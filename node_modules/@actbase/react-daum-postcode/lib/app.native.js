"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _tslib = require("tslib");

var React = _interopRequireWildcard(require("react"));

var _reactNativeWebview = _interopRequireDefault(require("react-native-webview"));

var _reactNative = require("react-native");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var html = "\n<!DOCTYPE html>\n<html lang=\"ko\">\n<head>\n\t<meta charset=\"utf-8\">\n\t<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\">\n\t<style> \n\t  * { box-sizing: border-box }\n\t  html, body { width: 100%; height: 100%; margin:0px; padding: 0px; background-color: #ececec; } \n  </style>\n</head>\n<body>\n\t<div id=\"layer\" style=\"width:100%; min-height: 100%;\"></div>\n\t<script type=\"text/javascript\">\n    function callback() {\n\t\t\tvar element_layer = document.getElementById('layer');\n\t\t\telement_layer.innerHTML = \"\";\n      new daum.Postcode({\n        ...window.options,\n        onsearch: function () {\n          window.scrollTo(0, 0);\n        },\n        oncomplete: function(data) {\n          window.ReactNativeWebView.postMessage(JSON.stringify(data));\n        },\n        onresize: function(size) {\n          document.getElementById('layer').style.height = size.height + 'px';\n        },\n        onclose: function() {\n          callback();\n        },\n        width : '100%',\n        height: '100%',\n      }).embed(element_layer);\n    }\n\t\tfunction initOnReady(options) {\n    \twindow.options = options;\n\t\t\tvar s = document.createElement('script');\n\t\t\ts.type = 'text/javascript'; s.src = 'https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js';\n\t\t\ts.onreadystatechange = callback; s.onload = callback;\n\t\t\tvar x = document.getElementsByTagName('script')[0]; x.parentNode.insertBefore(s, x);\n    }\n\t</script>\n</body>\n</html>\n";

var Postcode = function Postcode(props) {
  var jsOptions = props.jsOptions,
      onSelected = props.onSelected,
      onError = props.onError,
      style = props.style,
      otherProps = (0, _tslib.__rest)(props, ["jsOptions", "onSelected", "onError", "style"]);
  var injectedJavaScript = React.useMemo(function () {
    return "initOnReady(" + JSON.stringify(jsOptions) + ");void(0);";
  }, [jsOptions]);
  var onMessage = React.useCallback(function (_a) {
    var nativeEvent = _a.nativeEvent;

    try {
      nativeEvent.data && onSelected && onSelected(JSON.parse(nativeEvent.data));
    } catch (e) {
      onError(e);
    }
  }, [onSelected]);
  return React.createElement(_reactNative.View, {
    style: style
  }, React.createElement(_reactNativeWebview["default"], (0, _tslib.__assign)({
    mixedContentMode: 'compatibility',
    androidLayerType: "hardware",
    renderToHardwareTextureAndroid: true,
    useWebKit: true
  }, otherProps, {
    source: {
      html: html,
      baseUrl: 'https://postcode.map.daum.net'
    },
    onMessage: onMessage,
    injectedJavaScript: injectedJavaScript,
    onShouldStartLoadWithRequest: function onShouldStartLoadWithRequest(request) {
      var _a, _b, _c, _d;

      var isPostcode = !((_a = request.url) === null || _a === void 0 ? void 0 : _a.startsWith('https://postcode.map.daum.net/guide')) && (!((_b = request.url) === null || _b === void 0 ? void 0 : _b.startsWith('http')) || ((_c = request.url) === null || _c === void 0 ? void 0 : _c.startsWith('https://postcode.map.daum.net')) || ((_d = request.url) === null || _d === void 0 ? void 0 : _d.startsWith('http://postcode.map.daum.net')));

      if (!isPostcode) {
        _reactNative.Linking.openURL(request.url);

        return false;
      } else {
        return true;
      }
    }
  })));
};

Postcode.defaultProps = {
  jsOptions: {
    hideMapBtn: true
  }
};
var _default = Postcode;
exports["default"] = _default;