{"ast":null,"code":"// /* eslint-disable jsx-a11y/alt-text */\n// import React, { useState, useRef, useEffect } from 'react'\n// import styled from \"styled-components\";\n// import axios from 'axios';\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import { ko } from 'date-fns/esm/locale'\n// import moment, { relativeTimeThreshold } from 'moment';\n// import 'moment/locale/ko';\n// import del_img from '../components/images/del.png'\n// const PageStyled=styled.body`\n// display:flex;\n// flex-direction:column;\n// // align-items:center;\n// `;\n// const InputStyled = styled.input`\n//         margin: 0px 20px;\n//         border: none;\n//         outline: none;\n//         display: flex;\n//         height: 50px;\n//         width: 90%;\n//   `;\n// const TextStyled = styled.textarea`\n//         margin: 0px 20px;\n//         border: none;\n//         outline: none;\n//         display: flex;\n//         height: 300px;\n//         width: 90%;\n//   `;\n// const TopStyled=styled.ul` \n//     height:25px;\n//     display:flex;\n//     align-items:center;\n//     justify-content:space-between;\n//     list-style:none;\n//     margin-top:5;\n//     padding:0 20px 0 20px;\n//     color: black;\n//     font-size:15px;\n//     font-weight:bold;\n//   `;\n// const BoardStyled = styled.ul`\n//     display:flex;\n//     align-items:center;\n//     justify-content:space-evenly;\n//     list-style:none;\n//     margin:0;\n//     padding:0 20px 0 20px;\n// `;\n// //시작일, 종료일 달력 스타일\n// const DatePickerStyled = styled(DatePicker)`\n//     text-align: center;\n//     width: 150px;\n//     height: 30px;\n//     font-size: 15px;\n//     border-radius: 20px;\n//     border: 1px solid gray;\n// `;\n// const DateTitle = styled.div`\n//     color: gray;\n//     white-space: nowrap;\n//     font-size: 13px;\n//     margin-bottom: 5px;\n//     margin-left : 43px;\n// `;\n// const DivStyled = styled.div`\n//     display: flex;\n//     justify-content:space-evenly;\n// `;\n// const MainContainer = styled.div`\n//   display: flex;\n//   align-items: center;\n//   margin-top: 20px;\n//   margin-left: 15px;\n//   @media (max-width: 400px) {\n//     width: 100%;\n//     max-width: 400px;\n//     justify-content: start;\n//     flex-wrap: wrap;\n//   }\n// `;\n// //이미지-가로 스크롤\n// const Scroll = styled.div`\n//   display: flex;\n//   overflow-x:scroll;\n//   white-space:nowrap;\n//   ::-webkit-scrollbar { display: none; }\n// `;\n// const InitialBox = styled.div`\n//     width: 60px;\n//     height: 60px;\n//     border-radius:5px;\n//     margin-right:10px;\n//     border : solid 1px gray;\n//     display : flex;\n//     align-items: center;\n//     flex-direction: column;\n// `;\n// const ImgAreaContainer = styled.div`\n//   display: flex;\n//   align-items: center;\n// `;\n// const ImgArea = styled.div`\n//   width: 60px;\n//   height: 60px;\n//   display: flex;\n//   align-items: center;\n//   margin-left: 10px;\n//   object-fit: cover;\n// `;\n// const Img = styled.img`\n//   object-fit: cover;\n//   width: 100%;\n// `;\n// const FileInput = styled.input`\n//   position: absolute;\n//   width: 1px;\n//   height: 1px;\n//   padding: 0;\n//   margin: -1px;\n//   overflow: hidden;\n//   clip: rect(0, 0, 0, 0);\n//   border: none;\n// `;\n// //이미지 삭제 버튼\n// const DeleteButton = styled.button`\n//   background: none;\n//   border: none;\n//   outline: none;\n//   cursor: pointer;\n//   margin-left: -17px;\n//   margin-top: -46px;\n// `;\n// function Update(props) {\n//     const [title, setTitle] = useState(\"\"); //제목\n//     const [price, setPrice] = useState(\"\"); //가격\n//     const [startDate, setStartDate] = useState(new Date()); //대여 시작 날짜\n//     const [endDate, setEndDate] = useState(new Date()); //대여 끝 날짜\n//     const [content, setContent] = useState(\"\"); //내용\n//     const [fontStyle1, setFontStyle1]=useState({'background': \"linear-gradient(to top, #FFE400 50%, transparent 50%)\", color: \"black\"});\n//     const [fontStyle2, setFontStyle2]=useState({'background-color': \"transparent\", color: \"lightgray\"});\n//     const [menu, setMenu] = useState(true);   \n//     const [menu1, setMenu1] = useState(true); //빌려줄게요\n//     const [menu2, setMenu2] = useState(false); //빌려주세요\n//     // 이미지 업로드 버튼 클릭 시, 서버로 이미지 폼 데이터 전송 --> 서버에서 이미지의 저장경로를 보내줌(미리보기에 사용가능[?])\n//     // 게시글 업로드 클릭 시, 이미지의 저장경로를 다시 서버로 전송\n//     const [previewImage, setPreviewImage] = useState([]);\n//     const imagesRef = useRef();\n//     const newFileList = [];\n//     //업로드 이미지 미리보기\n//     const multipleImageHandler = e => {\n//         e.preventDefault();\n//         // var newFileList = [];\n//         const uploadedFile = e.target.files;\n//         for (var i = 0; i < uploadedFile.length; i++) {\n//           let reader = new FileReader();\n//           let file = uploadedFile[i];\n//           if(e.target.files[0]) {\n//             if(uploadedFile.length > 10){\n//               alert('사진은 10개까지 업로드 가능합니다');\n//               break;\n//             }\n//             else {\n//               reader.readAsDataURL(file);// 이미지를 특정 Blob로 읽어서 저장 \n//              //파일상태 업데이트 \n//               reader.onloadend = () => {\n//                   newFileList.push({\n//                     file: file,\n//                     previewURL: reader.result\n//                   })\n//               }\n//               //업로드 다 된 후에 미리보기 \n//               if (i === uploadedFile.length - 1) {\n//                 setTimeout(() => setPreviewImage(previewImg => previewImg.concat(newFileList)), 1000);\n//               }\n//             }\n//           }\n//         }\n//     }\n//     //이미지 삭제 \n//     const removeImageHandler = (id) => {\n//         const remainingImg = previewImage.filter((item, i) => i !== id )\n//         setPreviewImage(remainingImg)\n//     }\n//     const [postInfo,setPostInfo]=useState(''); //글 정보\n//     //update할 정보 받아오기 \n//     const getPostContent=(postId)=>{\n//         return axios.get(url, { //통신을 위한 url을 적어주세요.\n//                 params: {\n//                 id:postId, //글을 클릭할때 게시글 아이디(postId)를 넘겨줘서 해당 아이디에 맞는 데이터 가져옴\n//                 }\n//             });\n//         };\n//         useEffect((postId) => {  //페이지가 실행될 때 한 번만 실행된다\n//         axios.all([getPostContent(postId)]) // axios.all로 여러 개의 request를 보내고\n//         .then(axios.spread((contentResp) => { // response를 spread로 받는다\n//             //contentResp: 이미지를 제외한 게시물 정보 데이터 \n//             setPostInfo(contentResp); \n//         })).catch((error) => {\n//             console.error(error)\n//         })\n//         }, []);\n//     //글 등록 버튼 클릭 시  \n//     const onSubmitWrite = (e) => { \n//         e.preventDefault();\n//             if(!title){\n//                 alert('제목을 입력해주세요');\n//                 return;\n//             }\n//             if(!price){\n//                 alert('가격을 입력해주세요');\n//                 return;\n//             }\n//             if(!content){\n//                 alert('내용을 입력해주세요');\n//                 return;\n//             }\n//         //빌려줄게요 게시판에 글쓰기\n//         if(menu1 === true) {\n//           e.preventDefault();\n//           // setPreviewImage([]); \n//           imagesRef.current.value = '';\n//           const formData = new FormData();\n//           const config = {\n//                 headers : {'content-type': 'multipart/form-data'}\n//           }\n//           for(var i=0; i<previewImage.length; i++){\n//             formData.append('img'+i, previewImage[i].file);   //이미지 정보 \n//           }\n//           // formData.append('imgUrl', previewImage); //이미지 url\n//           formData.append('title', title);\n//           formData.append('price', price);\n//           formData.append('body', content);\n//           formData.append('startDate', startDate);\n//           formData.append('endDate', endDate);\n//           formData.append('date', moment().format('YYYY.MM.DD HH:mm'));\n// //        test\n//           for(var i=0; i< previewImage.length;i++) {\n//             console.log('img'+i+'_test', previewImage[i].file);\n//           }\n//            return axios.post('http://localhost:7000/post/write/lend', formData,\n//             { withCredentials: true })\n//               .then( (res) => {\n//                 props.history.push('/'); //메인 화면으로이동\n//               })\n//               .catch( (error)=> {\n//                 console.log(error);\n//               }, config);\n//         }\n//         //빌려주세요 게시판에 글쓰기\n//         if(menu2 === true) {\n//           const data = {\n//             title : title,\n//             body : content,  \n//             price : price, \n//             start_date : startDate, \n//             end_date : endDate,\n//             date: moment().format('YYYY.MM.DD HH:mm')\n//           };\n//           console.log(data);\n//           axios.post('http://localhost:7000/post/write/borrow', data,\n//             { withCredentials: true })\n//             .then( (res) => {\n//               props.history.push('/'); //메인 화면으로이동\n//             })\n//             .catch( (error)=> {\n//               console.log(error);\n//             });\n//           }\n//     }\n//   return (\n//     <PageStyled>\n//         <form onSubmit={onSubmitWrite}>\n//         <TopStyled>\n//             <li><a href=\"/\" style={{color: 'gray',  'font-size' : '13px', 'font-weight': 'bold'}}>취소</a></li>\n//             <li>게시글 쓰기</li>\n//             <li><button type=\"submit\" style={{color: '#A352CC', border:'none', background: 'none', 'font-weight': 'bold', 'font-size' : '13px'}}>등록</button></li>\n//         </TopStyled>\n//         <hr/>\n//         <BoardStyled>\n//           <li><a href=\"/\" onClick={(e) => {e.preventDefault(); setMenu(true); setMenu1(true); setMenu2(false); setFontStyle1({'background': \"linear-gradient(to top, #FFE400 50%, transparent 50%)\", color: \"black\"}); setFontStyle2({'background-color': \"transparent\", color: \"lightgray\"})}} style={fontStyle1}>빌려줄게요</a></li>\n//           <li><a href=\"/\" onClick={(e) => {e.preventDefault(); setMenu(false); setMenu1(false); setMenu2(true); setFontStyle1({'background-color': \"transparent\", color: \"lightgray\"}); setFontStyle2({'background': \"linear-gradient(to top, #FFE400 50%, transparent 50%)\", color: \"black\"})}} style={fontStyle2}>빌려주세요</a></li>\n//         </BoardStyled>\n//         { menu ? <div>\n//         <hr/>\n//         <MainContainer>\n//             <label htmlFor='file'>  \n//              <InitialBox>\n//                  <img src='https://ifh.cc/g/219dfc.png' alt=\"camera_img\" style={{width: '30px', 'margin-bottom': '-13px', 'padding-top' :'10px'}}></img>\n//                  <p style={{color: 'gray', 'font-size' : '12px'}}>{previewImage.length}/10</p>\n//              </InitialBox>\n//              </label>\n//              <FileInput type=\"file\" id=\"file\" multiple ref={imagesRef} accept=\"image/*\" onChange={multipleImageHandler} style={{ visibility: \"hidden\" }}/>\n//             <Scroll>    \n//             {previewImage.map((file, i) => \n//              <ImgAreaContainer key={i} className=\"content\">\n//                 <ImgArea><img src={file.previewURL} style={{width: '60px', height: '60px', 'white-space': 'nowrap'}} alt='profile_preview' /></ImgArea>\n//                 <DeleteButton onClick={(e) => {e.preventDefault(); removeImageHandler(i)} } ><img src={del_img} style={{width: '11px'}}/></DeleteButton>\n//             </ImgAreaContainer>\n//             )}\n//             </Scroll>\n//         </MainContainer>\n//         </div> : <div/> }\n//         <hr/>\n//           <InputStyled\n//                 type=\"title\"\n//                 name=\"title\"\n//                 placeholder=\"제목\"\n//                 onChange={(event) => setTitle(event.target.value)}\n//                 value={postInfo.title} \n//                 onSubmit={function(e){\n//                 this.setState({title:e.target.value});\n//                 }.bind(this)}\n//                 /><hr/>\n//           <InputStyled\n//                 type=\"number\"\n//                 name=\"price\"\n//                 placeholder=\"가격\"\n//                 onChange={(event) => setPrice(event.target.value)} \n//                  value={postInfo.price} \n//                  onSubmit={function(e){\n//                   this.setState({title:e.target.value});\n//                   }.bind(this)}\n//                 /><hr/>\n//           <DivStyled>\n//               <div>\n//           <DateTitle>대여시작일</DateTitle>\n//           <DatePickerStyled\n//             dateFormat=\"yyyy/MM/dd\"\n//             selected={startDate}\n//             onChange={date => setStartDate(date)}\n//             selectsStart\n//             startDate={startDate}\n//             endDate={endDate}\n//             minDate={new Date()}\n//             locale={ko}\n//              value={postInfo.startDate} \n//              onSubmit={function(e){\n//               this.setState({title:e.target.value});\n//               }.bind(this)}\n//             />\n//             </div>\n//             <div>\n//             <DateTitle>대여종료일</DateTitle>\n//             <DatePickerStyled\n//             dateFormat=\"yyyy/MM/dd\"\n//             selected={endDate}\n//             onChange={date => setEndDate(date)}\n//             selectsEnd\n//             startDate={startDate}\n//             endDate={endDate}\n//             minDate={startDate}\n//             locale={ko}\n//              value={postInfo.endDate} \n//              onSubmit={function(e){\n//               this.setState({title:e.target.value});\n//               }.bind(this)}\n//             />\n//             </div>\n//           </DivStyled>\n//             <hr/>\n//           <TextStyled\n//                 name=\"content\"\n//                 placeholder=\"내용\"\n//                 onChange={(event) => setContent(event.target.value)} \n//                  value={postInfo.body}\n//                  onSubmit={function(e){\n//                   this.setState({title:e.target.value});\n//                   }.bind(this)}\n//                 />\n//         </form>\n//     </PageStyled>\n//     )\n// }\n// export default Update","map":{"version":3,"sources":["C:/Users/sycho/Desktop/billage/Front-End/src/components/Update.jsx"],"names":[],"mappingssourcesContent":["// /* eslint-disable jsx-a11y/alt-text */\r\n// import React, { useState, useRef, useEffect } from 'react'\r\n// import styled from \"styled-components\";\r\n// import axios from 'axios';\r\n// import DatePicker from \"react-datepicker\";\r\n// import \"react-datepicker/dist/react-datepicker.css\";\r\n// import { ko } from 'date-fns/esm/locale'\r\n// import moment, { relativeTimeThreshold } from 'moment';\r\n// import 'moment/locale/ko';\r\n// import del_img from '../components/images/del.png'\r\n\r\n// const PageStyled=styled.body`\r\n// display:flex;\r\n// flex-direction:column;\r\n// // align-items:center;\r\n// `;\r\n// const InputStyled = styled.input`\r\n//         margin: 0px 20px;\r\n//         border: none;\r\n//         outline: none;\r\n//         display: flex;\r\n//         height: 50px;\r\n//         width: 90%;\r\n//   `;\r\n// const TextStyled = styled.textarea`\r\n//         margin: 0px 20px;\r\n//         border: none;\r\n//         outline: none;\r\n//         display: flex;\r\n//         height: 300px;\r\n//         width: 90%;\r\n//   `;\r\n// const TopStyled=styled.ul` \r\n//     height:25px;\r\n//     display:flex;\r\n//     align-items:center;\r\n//     justify-content:space-between;\r\n//     list-style:none;\r\n//     margin-top:5;\r\n//     padding:0 20px 0 20px;\r\n//     color: black;\r\n//     font-size:15px;\r\n//     font-weight:bold;\r\n//   `;\r\n// const BoardStyled = styled.ul`\r\n//     display:flex;\r\n//     align-items:center;\r\n//     justify-content:space-evenly;\r\n//     list-style:none;\r\n//     margin:0;\r\n//     padding:0 20px 0 20px;\r\n// `;\r\n// //시작일, 종료일 달력 스타일\r\n// const DatePickerStyled = styled(DatePicker)`\r\n//     text-align: center;\r\n//     width: 150px;\r\n//     height: 30px;\r\n//     font-size: 15px;\r\n//     border-radius: 20px;\r\n//     border: 1px solid gray;\r\n// `;\r\n// const DateTitle = styled.div`\r\n//     color: gray;\r\n//     white-space: nowrap;\r\n//     font-size: 13px;\r\n//     margin-bottom: 5px;\r\n//     margin-left : 43px;\r\n// `;\r\n// const DivStyled = styled.div`\r\n//     display: flex;\r\n//     justify-content:space-evenly;\r\n// `;\r\n// const MainContainer = styled.div`\r\n//   display: flex;\r\n//   align-items: center;\r\n//   margin-top: 20px;\r\n//   margin-left: 15px;\r\n//   @media (max-width: 400px) {\r\n//     width: 100%;\r\n//     max-width: 400px;\r\n//     justify-content: start;\r\n//     flex-wrap: wrap;\r\n//   }\r\n// `;\r\n// //이미지-가로 스크롤\r\n// const Scroll = styled.div`\r\n//   display: flex;\r\n//   overflow-x:scroll;\r\n//   white-space:nowrap;\r\n//   ::-webkit-scrollbar { display: none; }\r\n// `;\r\n// const InitialBox = styled.div`\r\n//     width: 60px;\r\n//     height: 60px;\r\n//     border-radius:5px;\r\n//     margin-right:10px;\r\n//     border : solid 1px gray;\r\n//     display : flex;\r\n//     align-items: center;\r\n//     flex-direction: column;\r\n// `;\r\n// const ImgAreaContainer = styled.div`\r\n//   display: flex;\r\n//   align-items: center;\r\n// `;\r\n// const ImgArea = styled.div`\r\n//   width: 60px;\r\n//   height: 60px;\r\n//   display: flex;\r\n//   align-items: center;\r\n//   margin-left: 10px;\r\n//   object-fit: cover;\r\n// `;\r\n// const Img = styled.img`\r\n//   object-fit: cover;\r\n//   width: 100%;\r\n// `;\r\n// const FileInput = styled.input`\r\n//   position: absolute;\r\n//   width: 1px;\r\n//   height: 1px;\r\n//   padding: 0;\r\n//   margin: -1px;\r\n//   overflow: hidden;\r\n//   clip: rect(0, 0, 0, 0);\r\n//   border: none;\r\n// `;\r\n// //이미지 삭제 버튼\r\n// const DeleteButton = styled.button`\r\n//   background: none;\r\n//   border: none;\r\n//   outline: none;\r\n//   cursor: pointer;\r\n//   margin-left: -17px;\r\n//   margin-top: -46px;\r\n// `;\r\n\r\n\r\n// function Update(props) {\r\n//     const [title, setTitle] = useState(\"\"); //제목\r\n//     const [price, setPrice] = useState(\"\"); //가격\r\n\r\n//     const [startDate, setStartDate] = useState(new Date()); //대여 시작 날짜\r\n//     const [endDate, setEndDate] = useState(new Date()); //대여 끝 날짜\r\n//     const [content, setContent] = useState(\"\"); //내용\r\n//     const [fontStyle1, setFontStyle1]=useState({'background': \"linear-gradient(to top, #FFE400 50%, transparent 50%)\", color: \"black\"});\r\n//     const [fontStyle2, setFontStyle2]=useState({'background-color': \"transparent\", color: \"lightgray\"});\r\n\r\n//     const [menu, setMenu] = useState(true);   \r\n//     const [menu1, setMenu1] = useState(true); //빌려줄게요\r\n//     const [menu2, setMenu2] = useState(false); //빌려주세요\r\n\r\n//     // 이미지 업로드 버튼 클릭 시, 서버로 이미지 폼 데이터 전송 --> 서버에서 이미지의 저장경로를 보내줌(미리보기에 사용가능[?])\r\n//     // 게시글 업로드 클릭 시, 이미지의 저장경로를 다시 서버로 전송\r\n    \r\n//     const [previewImage, setPreviewImage] = useState([]);\r\n//     const imagesRef = useRef();\r\n//     const newFileList = [];\r\n\r\n//     //업로드 이미지 미리보기\r\n//     const multipleImageHandler = e => {\r\n//         e.preventDefault();\r\n//         // var newFileList = [];\r\n//         const uploadedFile = e.target.files;\r\n        \r\n//         for (var i = 0; i < uploadedFile.length; i++) {\r\n//           let reader = new FileReader();\r\n//           let file = uploadedFile[i];\r\n          \r\n//           if(e.target.files[0]) {\r\n//             if(uploadedFile.length > 10){\r\n//               alert('사진은 10개까지 업로드 가능합니다');\r\n//               break;\r\n//             }\r\n//             else {\r\n//               reader.readAsDataURL(file);// 이미지를 특정 Blob로 읽어서 저장 \r\n\r\n//              //파일상태 업데이트 \r\n//               reader.onloadend = () => {\r\n\r\n//                   newFileList.push({\r\n//                     file: file,\r\n//                     previewURL: reader.result\r\n//                   })\r\n//               }\r\n\r\n//               //업로드 다 된 후에 미리보기 \r\n//               if (i === uploadedFile.length - 1) {\r\n//                 setTimeout(() => setPreviewImage(previewImg => previewImg.concat(newFileList)), 1000);\r\n//               }\r\n//             }\r\n//           }\r\n  \r\n//         }\r\n//     }\r\n//     //이미지 삭제 \r\n//     const removeImageHandler = (id) => {\r\n//         const remainingImg = previewImage.filter((item, i) => i !== id )\r\n//         setPreviewImage(remainingImg)\r\n//     }\r\n\r\n//     const [postInfo,setPostInfo]=useState(''); //글 정보\r\n//     //update할 정보 받아오기 \r\n//     const getPostContent=(postId)=>{\r\n//         return axios.get(url, { //통신을 위한 url을 적어주세요.\r\n//                 params: {\r\n//                 id:postId, //글을 클릭할때 게시글 아이디(postId)를 넘겨줘서 해당 아이디에 맞는 데이터 가져옴\r\n//                 }\r\n//             });\r\n//         };\r\n//         useEffect((postId) => {  //페이지가 실행될 때 한 번만 실행된다\r\n//         axios.all([getPostContent(postId)]) // axios.all로 여러 개의 request를 보내고\r\n//         .then(axios.spread((contentResp) => { // response를 spread로 받는다\r\n//             //contentResp: 이미지를 제외한 게시물 정보 데이터 \r\n//             setPostInfo(contentResp); \r\n//         })).catch((error) => {\r\n//             console.error(error)\r\n//         })\r\n//         }, []);\r\n\r\n//     //글 등록 버튼 클릭 시  \r\n//     const onSubmitWrite = (e) => { \r\n\r\n//         e.preventDefault();\r\n//             if(!title){\r\n//                 alert('제목을 입력해주세요');\r\n//                 return;\r\n//             }\r\n//             if(!price){\r\n//                 alert('가격을 입력해주세요');\r\n//                 return;\r\n//             }\r\n//             if(!content){\r\n//                 alert('내용을 입력해주세요');\r\n//                 return;\r\n//             }\r\n//         //빌려줄게요 게시판에 글쓰기\r\n//         if(menu1 === true) {\r\n\r\n//           e.preventDefault();\r\n//           // setPreviewImage([]); \r\n//           imagesRef.current.value = '';\r\n      \r\n//           const formData = new FormData();\r\n//           const config = {\r\n//                 headers : {'content-type': 'multipart/form-data'}\r\n//           }\r\n          \r\n//           for(var i=0; i<previewImage.length; i++){\r\n//             formData.append('img'+i, previewImage[i].file);   //이미지 정보 \r\n//           }\r\n//           // formData.append('imgUrl', previewImage); //이미지 url\r\n//           formData.append('title', title);\r\n//           formData.append('price', price);\r\n//           formData.append('body', content);\r\n//           formData.append('startDate', startDate);\r\n//           formData.append('endDate', endDate);\r\n//           formData.append('date', moment().format('YYYY.MM.DD HH:mm'));\r\n\r\n// //        test\r\n//           for(var i=0; i< previewImage.length;i++) {\r\n//             console.log('img'+i+'_test', previewImage[i].file);\r\n//           }\r\n\r\n//            return axios.post('http://localhost:7000/post/write/lend', formData,\r\n//             { withCredentials: true })\r\n//               .then( (res) => {\r\n//                 props.history.push('/'); //메인 화면으로이동\r\n//               })\r\n//               .catch( (error)=> {\r\n//                 console.log(error);\r\n//               }, config);\r\n//         }\r\n\r\n//         //빌려주세요 게시판에 글쓰기\r\n//         if(menu2 === true) {\r\n//           const data = {\r\n//             title : title,\r\n//             body : content,  \r\n//             price : price, \r\n//             start_date : startDate, \r\n//             end_date : endDate,\r\n//             date: moment().format('YYYY.MM.DD HH:mm')\r\n//           };\r\n//           console.log(data);\r\n//           axios.post('http://localhost:7000/post/write/borrow', data,\r\n//             { withCredentials: true })\r\n//             .then( (res) => {\r\n//               props.history.push('/'); //메인 화면으로이동\r\n//             })\r\n//             .catch( (error)=> {\r\n//               console.log(error);\r\n//             });\r\n//           }\r\n//     }\r\n\r\n//   return (\r\n//     <PageStyled>\r\n//         <form onSubmit={onSubmitWrite}>\r\n//         <TopStyled>\r\n//             <li><a href=\"/\" style={{color: 'gray',  'font-size' : '13px', 'font-weight': 'bold'}}>취소</a></li>\r\n//             <li>게시글 쓰기</li>\r\n//             <li><button type=\"submit\" style={{color: '#A352CC', border:'none', background: 'none', 'font-weight': 'bold', 'font-size' : '13px'}}>등록</button></li>\r\n//         </TopStyled>\r\n        \r\n//         <hr/>\r\n//         <BoardStyled>\r\n//           <li><a href=\"/\" onClick={(e) => {e.preventDefault(); setMenu(true); setMenu1(true); setMenu2(false); setFontStyle1({'background': \"linear-gradient(to top, #FFE400 50%, transparent 50%)\", color: \"black\"}); setFontStyle2({'background-color': \"transparent\", color: \"lightgray\"})}} style={fontStyle1}>빌려줄게요</a></li>\r\n//           <li><a href=\"/\" onClick={(e) => {e.preventDefault(); setMenu(false); setMenu1(false); setMenu2(true); setFontStyle1({'background-color': \"transparent\", color: \"lightgray\"}); setFontStyle2({'background': \"linear-gradient(to top, #FFE400 50%, transparent 50%)\", color: \"black\"})}} style={fontStyle2}>빌려주세요</a></li>\r\n//         </BoardStyled>\r\n        \r\n//         { menu ? <div>\r\n//         <hr/>\r\n//         <MainContainer>\r\n\r\n//             <label htmlFor='file'>  \r\n//              <InitialBox>\r\n//                  <img src='https://ifh.cc/g/219dfc.png' alt=\"camera_img\" style={{width: '30px', 'margin-bottom': '-13px', 'padding-top' :'10px'}}></img>\r\n//                  <p style={{color: 'gray', 'font-size' : '12px'}}>{previewImage.length}/10</p>\r\n//              </InitialBox>\r\n//              </label>\r\n//              <FileInput type=\"file\" id=\"file\" multiple ref={imagesRef} accept=\"image/*\" onChange={multipleImageHandler} style={{ visibility: \"hidden\" }}/>\r\n \r\n//             <Scroll>    \r\n              \r\n//             {previewImage.map((file, i) => \r\n//              <ImgAreaContainer key={i} className=\"content\">\r\n//                 <ImgArea><img src={file.previewURL} style={{width: '60px', height: '60px', 'white-space': 'nowrap'}} alt='profile_preview' /></ImgArea>\r\n//                 <DeleteButton onClick={(e) => {e.preventDefault(); removeImageHandler(i)} } ><img src={del_img} style={{width: '11px'}}/></DeleteButton>\r\n\r\n//             </ImgAreaContainer>\r\n//             )}\r\n               \r\n//             </Scroll>\r\n\r\n   \r\n//         </MainContainer>\r\n    \r\n//         </div> : <div/> }\r\n      \r\n\r\n//         <hr/>\r\n//           <InputStyled\r\n//                 type=\"title\"\r\n//                 name=\"title\"\r\n//                 placeholder=\"제목\"\r\n//                 onChange={(event) => setTitle(event.target.value)}\r\n//                 value={postInfo.title} \r\n//                 onSubmit={function(e){\r\n//                 this.setState({title:e.target.value});\r\n//                 }.bind(this)}\r\n//                 /><hr/>\r\n//           <InputStyled\r\n//                 type=\"number\"\r\n//                 name=\"price\"\r\n//                 placeholder=\"가격\"\r\n//                 onChange={(event) => setPrice(event.target.value)} \r\n//                  value={postInfo.price} \r\n//                  onSubmit={function(e){\r\n//                   this.setState({title:e.target.value});\r\n//                   }.bind(this)}\r\n//                 /><hr/>\r\n      \r\n//           <DivStyled>\r\n//               <div>\r\n//           <DateTitle>대여시작일</DateTitle>\r\n\r\n//           <DatePickerStyled\r\n//             dateFormat=\"yyyy/MM/dd\"\r\n//             selected={startDate}\r\n//             onChange={date => setStartDate(date)}\r\n//             selectsStart\r\n//             startDate={startDate}\r\n//             endDate={endDate}\r\n//             minDate={new Date()}\r\n//             locale={ko}\r\n//              value={postInfo.startDate} \r\n//              onSubmit={function(e){\r\n//               this.setState({title:e.target.value});\r\n//               }.bind(this)}\r\n//             />\r\n//             </div>\r\n//             <div>\r\n//             <DateTitle>대여종료일</DateTitle>\r\n//             <DatePickerStyled\r\n//             dateFormat=\"yyyy/MM/dd\"\r\n//             selected={endDate}\r\n//             onChange={date => setEndDate(date)}\r\n//             selectsEnd\r\n//             startDate={startDate}\r\n//             endDate={endDate}\r\n//             minDate={startDate}\r\n//             locale={ko}\r\n//              value={postInfo.endDate} \r\n//              onSubmit={function(e){\r\n//               this.setState({title:e.target.value});\r\n//               }.bind(this)}\r\n//             />\r\n//             </div>\r\n//           </DivStyled>\r\n//             <hr/>\r\n//           <TextStyled\r\n//                 name=\"content\"\r\n//                 placeholder=\"내용\"\r\n//                 onChange={(event) => setContent(event.target.value)} \r\n//                  value={postInfo.body}\r\n//                  onSubmit={function(e){\r\n//                   this.setState({title:e.target.value});\r\n//                   }.bind(this)}\r\n//                 />\r\n//         </form>\r\n//     </PageStyled>\r\n//     )\r\n// }\r\n\r\n// export default Update"]},"metadata":{},"sourceType":"module"}