[{"C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\index.js":"1","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\App.js":"2","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\reportWebVitals.js":"3","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\SignUp.jsx":"4","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\BorrowBoard.jsx":"5","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\LoginPage.jsx":"6","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\Write.jsx":"7","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\Chatting.jsx":"8","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\ShowPost.jsx":"9","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\SignUp_kakao.jsx":"10","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\Logo.jsx":"11","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\PostComponent.jsx":"12","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\BoardNav.jsx":"13","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\PostComponent2.jsx":"14","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\Login_btn.jsx":"15","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\ReviewWrite.jsx":"16","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\FindAccount.jsx":"17","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\index.js":"18","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\App.js":"19","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\reportWebVitals.js":"20","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\SignUp.jsx":"21","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\LoginPage.jsx":"22","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\Write.jsx":"23","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\Chatting.jsx":"24","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\ShowPost.jsx":"25","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\BoardNav.jsx":"26","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\MainBoards.jsx":"27","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\FindId.jsx":"28","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\Scrap.jsx":"29","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\Update.jsx":"30","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\FindPw.jsx":"31","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\SignUp_kakao.jsx":"32","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\ReviewWrite.jsx":"33","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\Quit.jsx":"34","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\useChat.js":"35","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\Logo.jsx":"36","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\Login_btn.jsx":"37","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\LikeButton.jsx":"38","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\PostComponent2.jsx":"39","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\PostComponent.jsx":"40","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\FindAccount.jsx":"41","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\MyModal.jsx":"42","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\MyInfoEdit.jsx":"43","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\ReviewList.jsx":"44"},{"size":589,"mtime":1637509169841,"results":"45","hashOfConfig":"46"},{"size":1458,"mtime":1642062579971,"results":"47","hashOfConfig":"46"},{"size":362,"mtime":1636071792293,"results":"48","hashOfConfig":"46"},{"size":8687,"mtime":1642609016450,"results":"49","hashOfConfig":"46"},{"size":12031,"mtime":1642608665493,"results":"50","hashOfConfig":"46"},{"size":3561,"mtime":1636071792791,"results":"51","hashOfConfig":"46"},{"size":11233,"mtime":1636071793716,"results":"52","hashOfConfig":"46"},{"size":6393,"mtime":1636071792708,"results":"53","hashOfConfig":"46"},{"size":10072,"mtime":1641045766281,"results":"54","hashOfConfig":"46"},{"size":5764,"mtime":1642608792338,"results":"55","hashOfConfig":"46"},{"size":532,"mtime":1636071792973,"results":"56","hashOfConfig":"46"},{"size":1818,"mtime":1636071793166,"results":"57","hashOfConfig":"46"},{"size":2166,"mtime":1641967095828,"results":"58","hashOfConfig":"46"},{"size":2393,"mtime":1636071793254,"results":"59","hashOfConfig":"46"},{"size":568,"mtime":1636071792877,"results":"60","hashOfConfig":"46"},{"size":2426,"mtime":1641048130881,"results":"61","hashOfConfig":"46"},{"size":1609,"mtime":1642504702836,"results":"62","hashOfConfig":"46"},{"size":609,"mtime":1643036787038,"results":"63","hashOfConfig":"64"},{"size":2272,"mtime":1643383931618,"results":"65","hashOfConfig":"64"},{"size":375,"mtime":1643036787041,"results":"66","hashOfConfig":"64"},{"size":9815,"mtime":1643446248706,"results":"67","hashOfConfig":"64"},{"size":4734,"mtime":1643379017277,"results":"68","hashOfConfig":"64"},{"size":12230,"mtime":1643640500459,"results":"69","hashOfConfig":"64"},{"size":5276,"mtime":1643036786950,"results":"70","hashOfConfig":"64"},{"size":11819,"mtime":1643556549265,"results":"71","hashOfConfig":"64"},{"size":2237,"mtime":1643441906450,"results":"72","hashOfConfig":"64"},{"size":12152,"mtime":1643177026236,"results":"73","hashOfConfig":"64"},{"size":3150,"mtime":1643040716030,"results":"74","hashOfConfig":"64"},{"size":14683,"mtime":1643036786976,"results":"75","hashOfConfig":"64"},{"size":15133,"mtime":1643036786987,"results":"76","hashOfConfig":"64"},{"size":3595,"mtime":1643040827167,"results":"77","hashOfConfig":"64"},{"size":5877,"mtime":1643036786984,"results":"78","hashOfConfig":"64"},{"size":3387,"mtime":1643645261904,"results":"79","hashOfConfig":"64"},{"size":1201,"mtime":1643036786974,"results":"80","hashOfConfig":"64"},{"size":1331,"mtime":1643036787046,"results":"81","hashOfConfig":"64"},{"size":555,"mtime":1643036786964,"results":"82","hashOfConfig":"64"},{"size":656,"mtime":1643036786962,"results":"83","hashOfConfig":"64"},{"size":1245,"mtime":1643036786957,"results":"84","hashOfConfig":"64"},{"size":2420,"mtime":1643036786971,"results":"85","hashOfConfig":"64"},{"size":1850,"mtime":1643036786969,"results":"86","hashOfConfig":"64"},{"size":1451,"mtime":1643040899924,"results":"87","hashOfConfig":"64"},{"size":782,"mtime":1643176650244,"results":"88","hashOfConfig":"64"},{"size":9851,"mtime":1644161227725,"results":"89","hashOfConfig":"64"},{"size":4600,"mtime":1644160773639,"results":"90","hashOfConfig":"64"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},"1wqe6h1",{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"93"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"93"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"93"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"113","usedDeprecatedRules":"93"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"93"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"93"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"93"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},"djnye8",{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"135"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"135"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"135"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"135"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"135"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"135"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"135"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"135"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"135"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"135"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"135"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"135"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"135"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"135"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"135"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"135"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"135"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"135"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"135"},"C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\index.js",[],["207","208"],"C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\App.js",["209","210","211"],"import React, { Component } from 'react';\nimport styled from \"styled-components\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport './App.css';\nimport SignUp from './components/SignUp';\nimport SignUp_kakao from './components/SignUp_kakao';\nimport LoginPage from './components/LoginPage';\nimport BorrowBoard from './components/BorrowBoard';\nimport Write from './components/Write';\nimport Chatting from './components/Chatting';\nimport ShowPost from './components/ShowPost';\nimport ReviewWrite from './components/ReviewWrite';\nimport FindAccount from './components/FindAccount';\n// const Page = styled.html` \n// text-align: center;\n//   `;\nfunction App() {\n  return (\n    \n    <Router>\n      <div>\n        {/* <Page> */}\n        <Switch>\n          <Route exact path=\"/join\" component={SignUp} />\n          <Route exact path=\"/join/kakao\" component={SignUp_kakao} />\n          <Route exact path=\"/login\" component={LoginPage} />\n          <Route exact path=\"/\" component={BorrowBoard}/>\n          <Route exact path=\"/write\" component={Write}/>\n          <Route exact path=\"/chat/:post/:writer\" component={Chatting}/>\n          <Route exact path=\"/post/:id\" component={ShowPost}/>\n          <Route exact path=\"/reviewWrite\" component={ReviewWrite}/>\n          <Route exact path=\"/FindAccount\" component={FindAccount}/>\n        </Switch>\n        {/* </Page> */}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\reportWebVitals.js",[],"C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\SignUp.jsx",[],"C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\BorrowBoard.jsx",["212","213","214","215","216","217","218","219","220"],"C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\LoginPage.jsx",[],"C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\Write.jsx",["221"],"/* eslint-disable jsx-a11y/alt-text */\nimport React, { useState, useEffect } from 'react'\nimport styled from \"styled-components\";\nimport axios from 'axios';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { ko } from 'date-fns/esm/locale'\nimport moment from 'moment';\nimport 'moment/locale/ko';\nimport del_img from '../components/images/del.png'\n\nconst PageStyled=styled.body`\ndisplay:flex;\nflex-direction:column;\n// align-items:center;\n`;\nconst InputStyled = styled.input`\n        margin: 0px 20px;\n        border: none;\n        outline: none;\n        display: flex;\n        height: 50px;\n        width: 90%;\n  `;\nconst TextStyled = styled.textarea`\n        margin: 0px 20px;\n        border: none;\n        outline: none;\n        display: flex;\n        height: 300px;\n        width: 90%;\n  `;\nconst TopStyled=styled.ul` \n    height:25px;\n    display:flex;\n    align-items:center;\n    justify-content:space-between;\n    list-style:none;\n    margin-top:5;\n    padding:0 20px 0 20px;\n    color: black;\n    font-size:15px;\n    font-weight:bold;\n  `;\nconst BoardStyled = styled.ul`\n    display:flex;\n    align-items:center;\n    justify-content:space-evenly;\n    list-style:none;\n    margin:0;\n    padding:0 20px 0 20px;\n`;\n//시작일, 종료일 달력 스타일\nconst DatePickerStyled = styled(DatePicker)`\n    text-align: center;\n    width: 150px;\n    height: 30px;\n    font-size: 15px;\n    border-radius: 20px;\n    border: 1px solid gray;\n`;\nconst DateTitle = styled.div`\n    color: gray;\n    white-space: nowrap;\n    font-size: 13px;\n    margin-bottom: 5px;\n    margin-left : 43px;\n`;\nconst DivStyled = styled.div`\n    display: flex;\n    justify-content:space-evenly;\n`;\nconst MainContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 20px;\n  margin-left: 15px;\n  @media (max-width: 400px) {\n    width: 100%;\n    max-width: 400px;\n    justify-content: start;\n    flex-wrap: wrap;\n  }\n`;\n//이미지-가로 스크롤\nconst Scroll = styled.div`\n  display: flex;\n  overflow-x:scroll;\n  white-space:nowrap;\n  ::-webkit-scrollbar { display: none; }\n`;\nconst InitialBox = styled.div`\n    width: 60px;\n    height: 60px;\n    border-radius:5px;\n    margin-right:10px;\n    border : solid 1px gray;\n    display : flex;\n    align-items: center;\n    flex-direction: column;\n`;\nconst ImgAreaContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\nconst ImgArea = styled.div`\n  width: 60px;\n  height: 60px;\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n  object-fit: cover;\n`;\nconst Img = styled.img`\n  object-fit: cover;\n  width: 100%;\n`;\nconst FileInput = styled.input`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: none;\n`;\n//이미지 삭제 버튼\nconst DeleteButton = styled.button`\n  background: none;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  margin-left: -17px;\n  margin-top: -46px;\n`;\n\nfunction Write(props) {\n    const [title, setTitle] = useState(\"\"); //제목\n    const [price, setPrice] = useState(\"\"); //가격\n\n    const [startDate, setStartDate] = useState(new Date()); //대여 시작 날짜\n    const [endDate, setEndDate] = useState(new Date()); //대여 끝 날짜\n    const [content, setContent] = useState(\"\"); //내용\n    const [fontStyle1, setFontStyle1]=useState({'background': \"linear-gradient(to top, #FFE400 50%, transparent 50%)\", color: \"black\"});\n    const [fontStyle2, setFontStyle2]=useState({'background-color': \"transparent\", color: \"lightgray\"});\n\n    const [menu, setMenu] = useState(true);   \n    const [menu1, setMenu1] = useState(true); //빌려줄게요\n    const [menu2, setMenu2] = useState(false); //빌려주세요\n    \n    // 이미지 업로드 \n    const [ img, setImg ] = useState([]);\n    const [ previewImg, setPreviewImg ] = useState([]);\n    // 이미지 업로드 버튼 클릭 시, 서버로 이미지 폼 데이터 전송 --> 서버에서 이미지의 저장경로를 보내줌(미리보기에 사용가능[?])\n    // 게시글 업로드 클릭 시, 이미지의 저장경로를 다시 서버로 전송\n    // 이미지 삽입 \n    const insertImg = (e) => {\n        let reader = new FileReader();\n  \n        if(e.target.files[0]) {\n            if(img.length > 11){\n                alert('사진은 10개까지만 업로드 가능합니다');                \n            }\n            else {\n                reader.readAsDataURL(e.target.files[0]);\n                setImg([...img, e.target.files[0]]);\n            }\n        }\n    \n        reader.onloadend = () => {\n          const previewImgUrl = reader.result;\n    \n          if(previewImgUrl) {\n            setPreviewImg([...previewImg, previewImgUrl]);\n          }\n        }\n    \n      }\n    //이미지 삭제\n      const deleteImg = (index) => {\n        const imgArr = img.filter((el, idx) => idx !== index);\n        const imgNameArr = previewImg.filter((el, idx) => idx !== index);\n    \n        setImg([...imgArr]);\n        setPreviewImg([...imgNameArr]);\n      }\n    \n      //이미지 미리보기 \n      const getPreviewImg = () => {\n        if(img === null || img.length === 0) {\n          return (\n            <ImgAreaContainer>\n              <ImgArea>\n                <Img src='https://ifh.cc/g/F7gnxH.gif' alt='이미지없음'/>\n              </ImgArea>\n            </ImgAreaContainer>\n          )\n        } else {\n          return img.map((el, index) => {\n            // const { name } = el\n            const delOnClik = (e) => {\n                e.preventDefault();\n                deleteImg(index);\n            }\n            return (\n              <ImgAreaContainer key={index}>\n                <ImgArea>\n                  <Img src={previewImg[index]}/>\n                </ImgArea>\n                <DeleteButton onClick={delOnClik}><img src={del_img} style={{width: '11px'}}/></DeleteButton>\n              </ImgAreaContainer>\n            )\n          })\n        }\n      }\n\n    //글 등록 버튼 클릭 시  \n    const onSubmitWrite = (e) => { \n        e.preventDefault();\n            if(!title){\n                alert('제목을 입력해주세요');\n                return;\n            }\n            if(!price){\n                alert('가격을 입력해주세요');\n                return;\n            }\n            if(!content){\n                alert('내용을 입력해주세요');\n                return;\n            }\n        //빌려줄게요 게시판에 글쓰기\n        if(menu1 === true) {\n            const data = {\n                title : title,\n                body : content,  \n                price : price, \n                start_date : startDate, \n                end_date : endDate,\n                date: moment().format('YYYY.MM.DD HH:mm')\n            };\n            axios.post('http://localhost:7000/post/write/lend', data,\n            { withCredentials: true })\n              .then( (res) => {\n                props.history.push('/'); //메인 화면으로이동\n              })\n              .catch( (error)=> {\n                console.log(error);\n              });\n        }\n\n        //빌려주세요 게시판에 글쓰기\n        if(menu2 === true) {\n          const data = {\n            title : title,\n            body : content,  \n            price : price, \n            start_date : startDate, \n            end_date : endDate,\n            date: moment().format('YYYY.MM.DD HH:mm')\n          };\n          console.log(data);\n          axios.post('http://localhost:7000/post/write/borrow', data,\n            { withCredentials: true })\n            .then( (res) => {\n              props.history.push('/'); //메인 화면으로이동\n            })\n            .catch( (error)=> {\n              console.log(error);\n            });\n          }\n    }\n\n  return (\n    <PageStyled>\n        <form onSubmit={onSubmitWrite}>\n        <TopStyled>\n            <li><a href=\"/\" style={{color: 'gray',  'font-size' : '13px', 'font-weight': 'bold'}}>취소</a></li>\n            <li>게시글 쓰기</li>\n            <li><button type=\"submit\" style={{color: '#A352CC', border:'none', background: 'none', 'font-weight': 'bold', 'font-size' : '13px'}}>등록</button></li>\n        </TopStyled>\n        \n        <hr/>\n        <BoardStyled>\n          <li><a href=\"/\" onClick={(e) => {e.preventDefault(); setMenu(true); setMenu1(true); setMenu2(false); setFontStyle1({'background': \"linear-gradient(to top, #FFE400 50%, transparent 50%)\", color: \"black\"}); setFontStyle2({'background-color': \"transparent\", color: \"lightgray\"})}} style={fontStyle1}>빌려줄게요</a></li>\n          <li><a href=\"/\" onClick={(e) => {e.preventDefault(); setMenu(false); setMenu1(false); setMenu2(true); setFontStyle1({'background-color': \"transparent\", color: \"lightgray\"}); setFontStyle2({'background': \"linear-gradient(to top, #FFE400 50%, transparent 50%)\", color: \"black\"})}} style={fontStyle2}>빌려주세요</a></li>\n        </BoardStyled>\n        \n        { menu ? <div>\n        <hr/>\n        <MainContainer>\n            <form encType='multipart/form-data'>\n            <label htmlFor='file'>  \n            <InitialBox>\n                <img src='https://ifh.cc/g/219dfc.png' alt=\"camera_img\" style={{width: '30px', 'margin-bottom': '-13px', 'padding-top' :'10px'}}></img>\n                <p style={{color: 'gray', 'font-size' : '12px'}}>{img.length}/10</p>\n            </InitialBox>\n            </label>\n            <FileInput type='file' accept=\"image/*\" id='file' onChange={(e) => insertImg(e)}/>\n            </form>\n            <Scroll>\n            {getPreviewImg()} {/*사진 미리보기*/}\n            </Scroll>\n        </MainContainer>\n    \n        </div> : <div/> }\n      \n\n        <hr/>\n          <InputStyled\n                type=\"title\"\n                name=\"title\"\n                placeholder=\"제목\"\n                onChange={(event) => setTitle(event.target.value)} \n                /><hr/>\n          <InputStyled\n                type=\"number\"\n                name=\"price\"\n                placeholder=\"가격\"\n                onChange={(event) => setPrice(event.target.value)} \n                /><hr/>\n      \n          <DivStyled>\n              <div>\n          <DateTitle>대여시작일</DateTitle>\n\n          <DatePickerStyled\n            dateFormat=\"yyyy/MM/dd\"\n            selected={startDate}\n            onChange={date => setStartDate(date)}\n            selectsStart\n            startDate={startDate}\n            endDate={endDate}\n            minDate={new Date()}\n            locale={ko}\n            />\n            </div>\n            <div>\n            <DateTitle>대여종료일</DateTitle>\n            <DatePickerStyled\n            dateFormat=\"yyyy/MM/dd\"\n            selected={endDate}\n            onChange={date => setEndDate(date)}\n            selectsEnd\n            startDate={startDate}\n            endDate={endDate}\n            minDate={startDate}\n            locale={ko}\n            />\n            </div>\n          </DivStyled>\n            <hr/>\n          <TextStyled\n                name=\"content\"\n                placeholder=\"내용\"\n                onChange={(event) => setContent(event.target.value)} \n                />\n        </form>\n    </PageStyled>\n    )\n}\n\nexport default Write","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\Chatting.jsx",["222","223","224","225","226","227"],"/* eslint-disable array-callback-return */\nimport React, { useState, useEffect, useRef } from 'react'\nimport styled from \"styled-components\";\nimport '../ChatStyle.css';\nimport axios from 'axios';\nimport socketIo, { io } from 'socket.io-client';\nimport send from '../components/images/send.png';\nimport moment from \"moment\";\nimport { message } from 'antd';\n\nconst TopStyled = styled.ul`\n    display: flex;\n    height: 25px;\n    align-items:center;\n    list-style:none;\n`;\nconst Top = styled.div`\n    padding-top: 1px;\n    background-color: white;\n    //상단고정\n    position: sticky;\n    top: 0;\n    z-index: 1;\n`;\nconst ChatList = styled.div`\n  margin-left: 15px;\n  margin-right: 15px;\n  overflow-y: auto;\n`;\n\nconst msessage = styled.span`\n    // display: inline-block;\n    // padding: 7px 15px;\n    // margin-bottom: 20px;\n    // margin-top: 5px;\n`;\n\nconst Nick = styled.div`\n    font-size: 5px;\n    color: gray;\n    margin-bottom: -4px;\n`;\n\nconst InputStyled = styled.input`\n    margin: 5px 5px 5px 5px;\n    display: flex;\n    width: 95%;\n    border:none;\n    outline:none;\n`;\nconst InputBox = styled.div`\n    margin: 5px 10px 5px 10px;\n    display: flex;\n    padding: 2px;\n    border: solid 1px lightgray;\n    border-radius : 10px;\n    height: 25px;\n    align-items:center;\n    background-color: white;\n`;\nconst Bottom = styled.div`\n  background-color: white;\n  // 하단고정\n    position: fixed;\n    bottom:0px;\n    width: 100%;\n`;\n\nconst Button = styled.button`\n    border: none;\n    background: none;\n    margin-top: 3px;\n`;\n\n//날짜 스타일 \nconst Line = styled.div`\n    display: flex;\n    flex-basis: 100%;\n    align-items : center;\n    color: rgba(0, 0, 0, 0.35);\n    font-size: 13px;\n    margin: 8px 0px;\n    ::before {\n      content: \"\";\n      flex-grow: 1;\n      margin: 0px 16px;\n      background: rgba(0, 0, 0, 0.35);\n      height: 1px;\n      line-height: 0px;\n    }\n    ::after {\n      content: \"\";\n      flex-grow: 1;\n      margin: 0px 16px;\n      background: rgba(0, 0, 0, 0.35);\n      height: 1px;\n      line-height: 0px;\n    }\n`;\n//시간 스타일\nconst MyTime = styled.span`\n    color: gray;\n    font-size: 5px;\n    margin-right: 4px;\n`;\nconst AnotherTime = styled.span`\n    color: gray;\n    font-size: 5px;\n    margin-left: 4px;\n`;\n\nconst Chatting = (props) => {\n    const [roomId, setRoomId] = useState('');\n    const [userInfo, setUserInfo] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [newMessage, setNewMessage] = React.useState(\"\"); //채팅 입력 값\n\n    const post = {\n      postId: props.match.params.post\n    };\n\n    const createRoom = () => {\n      return axios.post(\"http://localhost:7000/chat\", post, { withCredentials: true })\n    };\n\n    const getUser = () => {\n      return axios.get(\"http://localhost:7000/auth\", { withCredentials: true })\n    };\n\n    const io = socketIo(\"http://localhost:7000/chat\");\n\n    const mounted = useRef(false);\n\n    useEffect(()=>{\n        axios.all([createRoom(), getUser()])\n          .then(axios.spread((room, user) => {\n            setRoomId(room.data);\n            setUserInfo(user);\n          }))\n    }, []);\n\n    useEffect(()=>{\n      if(!mounted.current){\n        mounted.current=true;\n      }else{\n        io.emit('join', roomId);\n      }\n    }, [roomId]);\n\n\n    const sendMessage = (messageBody) => {\n      io.emit(\"chat\", {\n        roomId: roomId,\n        body: messageBody,\n        senderId: userInfo.data.id,\n        timeStamp : moment().format('YYYY-MM-DD hh:mm'),\n        date : moment().format('YYYY년 MM월 DD일'), \n      }); \n      return { message, sendMessage };\n    };\n\n    const onSendMessage = () => {\n      sendMessage(newMessage);\n      setNewMessage(\"\");\n    };\n    \n    // const handleNewMessageChange = (event) => {\n    //   setNewMessage(event.target.value);\n    //   console.log(newMessage);\n    // };\n    //뒤로가기 icon \n    const backClick = () => {\n      window.history.back();\n    }\n\n    return (\n      <div>\n        <Top> \n          <TopStyled>\n              <li onClick={backClick} style={{'color' : 'gray'}}>⬅</li>\n              <li style={{'margin-left' : '15px', 'font-weight' : 'bold'}}>어피치</li>\n              {/* <li style={{'margin-left' : '15px', 'font-weight' : 'bold'}}>{roomId}</li> */}\n          </TopStyled>\n        <hr/>\n        </Top>\n\n        <div>\n\n        <ChatList>\n          {messages.map((msg) => {\n            msg.ownedByCurrentUser ? (\n              <div>\n                <div className=\"myChat\">\n                <MyTime>{msg.timeStamp}</MyTime>\n                <span className=\"msg\">{msg.body}</span> \n                </div>\n              </div>\n            ) : (\n              <div>\n                <div className=\"anotherChat\">\n                <span className=\"msg\">{msg.body}</span>\n                <AnotherTime>{msg.timeStamp}</AnotherTime>\n                </div>\n              </div>\n            );\n          })}\n        </ChatList>\n\n            <ChatList>\n              <Line>2021년 9월 11일</Line>\n              <div className=\"myChat\">\n                <MyTime>오후 2:40</MyTime>\n                <span className=\"msg\">안녕하세요!</span> \n              </div>\n              <div className=\"myChat\">\n                <MyTime>오후 2:40</MyTime>\n                <span className=\"msg\">9월 19일까지 빌릴 수 있을까요?</span> \n              </div>\n              <div className=\"anotherChat\">\n                <span className=\"msg\">네 가능합니다 : )</span>\n                <AnotherTime>오후 3:20</AnotherTime>\n              </div>\n              <div className=\"anotherChat\">\n                <span className=\"msg\">어디서 만날까요?</span>\n                <AnotherTime>오후 3:20</AnotherTime>\n              </div>\n              <div className=\"myChat\">\n                <MyTime>오후 3:22</MyTime>\n                <span className=\"msg\">제가 지축역으로 갈게요!</span> \n              </div>\n            </ChatList> \n\n        </div>\n        <Bottom>\n          <form onSubmit={onSendMessage}>\n            <InputBox>\n              <InputStyled\n                onChange={(event) => setNewMessage(event.target.value)} \n              />\n              <Button>\n              <img src={send} alt=\"\" style={{width: '20px', height: 'auto'}}/>\n              </Button>\n            </InputBox>\n            </form>\n        </Bottom>\n\n      </div>\n    );\n  };\n\nexport default Chatting;","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\ShowPost.jsx",["228","229","230","231","232"],"import React, {useState, useEffect} from 'react';\nimport styled from \"styled-components\";\nimport axios from 'axios';\nimport 'antd/dist/antd.css';\nimport { Tabs, Button } from 'antd';\n\nconst { TabPane } = Tabs;\n\n// 이미지 슬라이더 감싸는 div\nconst ImgWrapper=styled.div` \n    // overflow:hidden;\n    // overflow-y:hidden;\n    text-align:center;\n    height:300px;\n    width:100%;\n    position:relative;\n    // transform : translateY(-100%);\n    background: ${props => props.arrLength===0 ? '#E5E5E5' : 'none'};\n`;\n//이미지 하나하나 스타일링\nconst PostImg=styled.img`\n    box-sizing: border-box;\n    height:100%;\n    width:100%;\n    // display:inline-block;\n`;\n//슬라이더 양옆으로 옮기는 버튼\nconst SlideBtn=styled.button`\n    position:absolute;\n    top:150px;\n    ${props=>props.name==='left'?'left:10px;':'right:10px'};\n    border:none;\n    border-radius:50%;\n    width:35px;\n    height:35px;\n    font-size:20px;\n    color:white;\n    opacity:0.5; \n    background-color:black;\n`;\n//\nconst PostHeader=styled.div`\n    display:flex;\n    justify-content:space-between;\n    border-bottom: solid 2px #E5E5E5;\n    margin:10px 0 5px 0;\n    padding: 2px;\n    position:relative;\n   \n`;\n\nconst PostFooter=styled.div`\n    background:white;\n    display:flex;\n    justify-content:space-between;\n    height:50px;\n    align-items:center;\n    position:fixed;\n    bottom:0;\n    width:90%;\n`;\nconst PostComponent=styled.div`\n    width:90%;\n    height:50%;\n    overflow:auto;\n    margin:auto;\n    position:relative;\n`;\nconst PostTitle=styled.div`\n    display:flex;\n    justify-content:space-between;\n`;\nconst ChatButton=styled.button`\n    background:#A352CC;\n    color:white;\n    border:none;\n    width:110px;\n    height:30px;\n    font-size:16px;\n    text-align:center;\n`;\nconst HighLight=styled.div`\n    color:#A352CC;\n    font-size:20px;\n    font-weight:bold;\n    \n    background-color:white;\n`;\nconst PostButton=styled.button`\n    border:none;\n    background:none;\n    color: #7D7D7D;\n    font-size:12px;\n`;\nconst PostContent=styled.div`\n    font-size:16px; \n    margin-top:3px; \n    position:relative;\n    margin-bottom:15%;\n`;\nconst ImgTurn=styled.div`\n    background:black;\n    width:50px;\n    height:20px;\n    position:absolute;\n    bottom:0;\n    left:46%;\n    border-radius:2px;\n    margin:5px;\n    color:white;\n    font-size:12px;\n    opacity:0.5;\n    text-align:center;\n`;\nconst ReviewButton=styled(Button)`\n    background-color:#ffffff;\n    border:1px solid #E5E5E5;\n    color:#A352CC;\n    &:hover, &:focus {\n        color:#ffffff;\n        background-color:#A352CC;\n        border:1px solid #A352CC;\n    }\n   \n  \n`;\nconst TabItem=styled(TabPane)`\n    \n`;\nconst StyledTab=styled(Tabs)`\n    size:large;\n   \n    \n`;\n\n    const ShowPost=({postId})=>{\n    const [imgArr,setImgArr]=useState([]); //이미지를 넣는 배열 \n    const [postInfo,setPostInfo]=useState(''); //이미지 제외 게시글 정보\n    let [imgIdx,setImgIdx]=useState(0); //이미지 슬라이더에서 사진 교체할 때 사용하는 인덱스 넘버\n    const [curUser,setCurUser]=useState('') //현재 계정에 접속해 서비스를 사용하는 사용자\n    const [temp,setTemp]=useState('안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다 안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다 안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다 안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다 안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다  안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다 안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다 ')\n    // const getPostContent=(postId)=>{\n    // return axios.get(url, { //통신을 위한 url을 적어주세요.\n    //         params: {\n    //         id:postId, //글을 클릭할때 게시글 아이디(postId)를 넘겨줘서 해당 아이디에 맞는 데이터 가져옴\n    //         }\n    //     });\n    // };\n    // const getPostImg=(postId)=>{ //통신을 위한 url을 적어주세요.\n    //     return axios.get(url, {\n    //         params: {\n    //         id:postId, //글을 클릭할때 게시글 아이디(postId)를 넘겨줘서 해당 아이디에 맞는 데이터 가져옴\n    //         }\n    //     });\n    // };\n    // useEffect((postId) => {  //페이지가 실행될 때 한 번만 실행된다\n    // axios.all([getPostContent(postId),getPostImg(postId)]) // axios.all로 여러 개의 request를 보내고\n    // .then(axios.spread((contentResp, imgResp) => { // response를 spread로 받는다\n    //     //contentResp: 이미지를 제외한 게시물 정보 데이터 / imgResp: 이미지 데이터\n    //     setPostInfo(contentResp); \n    //     setImgArr(imgResp);\n    // })).catch((error) => {\n    //     console.error(error)\n    // })\n    // }, []);\n    const numberWithCommas=(x)=> {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n   \n    const onClickSlide=(e)=>{\n    if(e.target.name==='right'&&imgArr.length-1!==imgIdx){\n        setImgIdx(imgIdx+1);\n       console.log(e.target.name);\n    }//슬라이더 오른쪽 버튼 누르면, 마지막 인덱스가 아닌지 확인후 다음 인덱스의 이미지 가져옴\n    else if(e.target.name==='left'&&imgIdx>0){\n        setImgIdx(imgIdx-1);\n        console.log(e.target.name);\n    }//슬라이더 왼쪽 버튼 누르면, 처음 인덱스가 아닌지 확인후 이전 인덱스의 이미지 가져옴\n    };\n\n    //채팅 보내기 버튼 눌렀을 때 \n    const onClickChat = () => {\n        window.location.href = \"/Chatting\";\n\n        //닉네임 보내기 \n        axios.post('url', {\n            nick: postInfo.user.nick,\n        }\n        ).then( (res) => {\n            console.log(res);\n        })\n        .catch( (error)=> {\n            console.log(error);\n        });\n\n    }\n    useEffect(()=>{\n        axios.get(\"http://localhost:7000/auth\", { withCredentials: true })\n        .then((res)=>{\n            if(res.data){\n                setCurUser(res.data);\n            }\n        }).\n        catch((error)=>{\n            console.log(error);\n        }\n\n        );\n    });\n    return(\n        <div style={{background: 'white'}}>\n        <ImgWrapper arrLength={imgArr.length}>\n        {/* 이미지가 하나라도 있으면, 아래 wrapper 안의 코드가 보이고 이미지가 하나도 없으면 회색 바탕 */}\n        {imgArr.length!==0&&<PostImg src={imgArr[imgIdx].url} alt={imgArr[imgIdx].name}/>}\n        {imgArr.length!==0&&<SlideBtn name=\"right\" onClick={onClickSlide}>»</SlideBtn> /* 슬라이더 오른쪽 버튼*/}\n        {imgArr.length!==0&&<SlideBtn name=\"left\" onClick={onClickSlide}>«</SlideBtn> /* 슬라이더 왼쪽 버튼*/}\n        {imgArr.length!==0&&<ImgTurn><span style={{opacity:'1.0'}}>{imgIdx+1} / {imgArr.length}</span></ImgTurn>}\n        </ImgWrapper>\n        <PostComponent>\n        <PostHeader>\n            <div>\n            <div style={{fontWeight:'bold', fontSize:'14px'}}>\n                {/* {postInfo.user.nick}  */}\n                글쓴이 닉네임\n                </div>\n            <div style={{color:'#7D7D7D', fontSize:'11px'}}>\n                {/* {postInfo.user.showAddress}  */}\n                글쓴이 주소\n                </div>\n            </div>\n            <HighLight> \n                {postInfo.startDate} - {postInfo.endDate}\n            </HighLight> \n            {/* 대여기간 */}\n        </PostHeader>\n       \n        <StyledTab type={{line:'300px'}} defaultActiveKey=\"1\" centered>\n        <TabItem tab=\"본문 내용\" key=\"1\">\n        <PostTitle>\n        <div style={{fontWeight:'bold', fontSize:'18px', marginTop:'2px'}}>\n            {/* {postInfo.title}  */}\n            게시글 제목 \n        </div>\n        {/* 현재 계정 접속자와 글쓴이 id 가 같으면 수정/삭제 버튼이 보입니다 */}\n        {/* {postInfo.user.id===curUser.id&& */}\n        <div>\n        <PostButton>수정</PostButton>\n        <PostButton>삭제</PostButton>\n        </div>\n        {/* } */}\n        </PostTitle>\n            <div style={{color:'#7D7D7D',fontSize:'12px', margin:'2px 0 0 2px'}}>{postInfo.createAt}</div> {/* 글쓴 날짜 및 시각 */}\n        <PostContent>  \n        {/* 게시글 보이는 곳*/} \n        {/* 게시글 줄 띄어쓰기되는 코드입니다 */}\n        {/* 관련사항은 링크 참조해주세요 : https://coding-hwije.tistory.com/58 */}\n     {/* {postInfo.body.split(\"\\n\").map((line) => { //postInfo.body: 글내용\n            return (\n              <span>\n                {line}\n                <br />\n              </span>\n            );\n          })} */}\n           {temp.split(\"\\n\").map((line) => { //postInfo.body: 글내용\n            return (\n              <span>\n                {line}\n                <br />\n              </span>\n            );\n          })}\n        {/* {postInfo.body}  */}\n        </PostContent>\n        </TabItem>\n        <TabItem tab=\"대여 후기\" key=\"2\">\n        <PostContent>  \n        <ReviewButton style={{ position:'absolute',right:'5px'}}type=\"primary\">후기 작성</ReviewButton>\n        </PostContent>\n        </TabItem>\n  \n         </StyledTab>\n        \n        <PostFooter>\n            <HighLight style={{background:'white'}}>\n                {/* {numberWithCommas(postInfo.price)} */}\n                {numberWithCommas(10000)}\n                원</HighLight> {/* 제품 가격*/}\n            <ChatButton onClick={onClickChat}>채팅 보내기</ChatButton>\n        </PostFooter>\n      \n        \n        </PostComponent>\n        \n        </div>\n    );\n};\nexport default ShowPost;\nexport {ReviewButton, PostHeader};","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\SignUp_kakao.jsx",["233"],"C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\Logo.jsx",[],"C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\PostComponent.jsx",[],"C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\BoardNav.jsx",["234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250"],"//제일 위에 보라색 nav bar 부분입니다.\nimport React, {useState} from 'react';\nimport styled from \"styled-components\";\nimport {Img, StyledButton} from \"../components/BorrowBoard\";\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport { Layout, Menu, Button } from 'antd';\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  UserOutlined,\n  VideoCameraOutlined,\n  UploadOutlined,\n  AppstoreTwoTone,\n  getTwoToneColor, setTwoToneColor,\n  RightCircleTwoTone,\n  LeftCircleTwoTone\n} from '@ant-design/icons';\nsetTwoToneColor('#EBCAFD');\nconst { Header, Sider, Content } = Layout;\n// nav 바를 감싸는 ul 태그 styled component 입니다.\nconst StyledNav=styled.ul` \n    height:120px;\n    display:flex;\n    align-items:center;\n    justify-content:space-between;\n    list-style:none;\n    margin:0;\n    padding:0 20px 0 20px;\n    color: gray;\n    font-size:15px;\n    font-weight:bold;\n    text-align: center;\n    background:#ffffff\n    `;\n;\nconst StyledTitle=styled.li`\n    flex-basis: 80%;\n`;\nconst StyledIcon=styled.li`\n    flex-basis: 50px;\n    white-space: nowrap;\n`;\nconst StyledFirst=styled.li`\n    flex-basis: 70px;\n`;\n// 통신을 위한 수정\nconst BoardNav = ({showAddress, login})=>{\n    return(\n        <div>\n        <StyledNav>\n            <StyledFirst><li></li></StyledFirst>\n            <StyledTitle>\n            <li><Img src=\"Img/logo.png\" alt=\"로고\" />\n            <br/>{showAddress}\n            </li>\n            </StyledTitle>\n            <StyledIcon>\n                {/* {login?\n                (<li>\n                <StyledButton><a href=\"/write\"><Img src=\"img/plus.png\" alt=\"글 등록\"/></a></StyledButton>\n                <StyledButton><a href=\"http://localhost:7000/auth/logout\"><Img src=\"img/logout.png\" alt=\"로그아웃\"/></a></StyledButton>\n                </li>)\n                : \n                <a href = \"/login\"><StyledButton style={{marginRight:'30px',textAlign:'center',display:'flex',justifyContent:'space-evenly'}}><Img src=\"img/mypage.png\" alt=\"로그인\"/></StyledButton></a>\n                }    */}\n            </StyledIcon>\n        </StyledNav>\n        </div>\n    );\n};\n\nexport default BoardNav;","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\PostComponent2.jsx",[],"C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\Login_btn.jsx",[],"C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\ReviewWrite.jsx",["251","252","253"],"import React, {useState, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport 'antd/dist/antd.css';\r\nimport axios from 'axios';\r\nimport { Rate, Input } from 'antd';\r\nimport {ReviewButton, PostHeader} from './ShowPost';\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\n\r\nconst { TextArea } = Input;\r\nconst ReviewWrite=()=> {\r\n    const [reviewContent,setReviewContent]=useState('');\r\n    const [currentValue, setCurrentValue] = useState(0);\r\n    const history = useHistory();\r\n    console.log(reviewContent);\r\n    console.log(currentValue);\r\n\r\n    const submitBtn=(e)=>{\r\n      if(!currentValue){\r\n        alert('별점을 눌러주세요.')\r\n      }\r\n      else if(!reviewContent){\r\n        alert('평가를 남겨주세요.')\r\n      }\r\n      else {\r\n        const data = {\r\n          rate: currentValue,\r\n          content: reviewContent\r\n        };\r\n        console.log(data);\r\n        axios.post('url', data)\r\n          .then( (res) => {\r\n            //기존 post 화면으로 이동 \r\n          })\r\n          .catch( (error)=> {\r\n            console.log(error);\r\n          });\r\n        }\r\n    };\r\n    return (\r\n    <>\r\n      <PostHeader style={{border:'none', padding:'12px'}}>\r\n      <ArrowLeftOutlined style={{fontSize:'20px', marginTop:'3px'}} onClick={() => history.goBack()}/>\r\n        <h1 style={{fontWeight:'bold', fontSize:'16px', position:'absolute',left:'80px', top:'12px'}}>대여후기 작성</h1>\r\n        <ReviewButton onClick={submitBtn} style={{display:'inline-block', fontSize:'12px',height:'25px', textAlign:'center'}}type=\"primary\">완료</ReviewButton>    \r\n      </PostHeader>\r\n      <PostHeader style={{flexDirection:'column', alignItems:'center'}}>\r\n      <Rate allowHalf onChange={(value) => {\r\n        setCurrentValue(value)\r\n      }}  value={currentValue} style={{color:'#EBCAFD', fontSize:'30px'}}/> <br />\r\n     \r\n      <p style={{position:'relative',top:'-15px',color:'#7D7D7D', fontSize:'10px', fontWeight:'bolder'}}>별을 탭하여 평가해주세요</p>\r\n      </PostHeader>\r\n      <TextArea onPressEnter={submitBtn} onChange={(e) => setReviewContent(e.target.value)}value={reviewContent} placeholder=\"당신의 경험을 이웃에게 공유해주세요\" autoSize={true} bordered={false} />\r\n      </>\r\n    );\r\n  }\r\n//  Current Rating: {currentValue} \r\nexport default ReviewWrite;\r\n// #EBCAFD 연한 보라색\r\n","C:\\Users\\sycho\\Desktop\\Front-End-master\\src\\components\\FindAccount.jsx",["254","255","256","257","258"],"import React, {useState, useEffect} from 'react';\r\nimport styled from \"styled-components\";\r\nimport axios from 'axios';\r\nimport 'antd/dist/antd.css';\r\nimport { Tabs, Button } from 'antd';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport '../index.css';\r\nimport '../App.css';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst Head = styled.div`\r\n    background-color:#A352CC;\r\n    height:60px;\r\n    text-align:center;\r\n    color:#ffffff;\r\n    display:flex;\r\n    justify-content:center;\r\n    align-items:center;\r\n    font-weight:bold;\r\n    font-size:16px; \r\n`;\r\nconst TabBar = styled(Tabs)`\r\n\r\n\r\n// .ant-tabs-tab.ant-tabs-tab-active.ant-tabs-ink-bar.ant-tabs-ink-bar-animated {\r\n//   width:20px;\r\n// }\r\n// .ant-tabs.ant-tabs-top .ant-tabs-centered .sc-JsfZP .hysmfv{\r\n//   width:20px;\r\n// }\r\n.ant-tabs-ink-bar {\r\n  padding:0px;\r\n  margin:0px;\r\n}\r\n.ant-tabs-tab-btn{\r\n  width:44vw;\r\n  text-align:center;\r\n  padding:0px;\r\n  margin:0px;\r\n  \r\n}\r\n#rc-tabs-1-tab-1{\r\n  border-right:2px solid;\r\n  padding:0px;\r\n  margin:0px;\r\n}\r\n#rc-tabs-1-tab-2{\r\n  border-left:2px solid;\r\n  padding:0px;\r\n  margin:0px;\r\n}\r\n`;\r\nconst FindAccount=()=>{\r\n    const callback=(key)=> {\r\n        console.log(key);\r\n      };\r\n      \r\n    return(\r\n        <>\r\n        <Head>아이디/비밀번호 찾기</Head>\r\n    <TabBar centered defaultActiveKey=\"1\" onChange={callback}>\r\n    <TabPane tab=\"아이디 찾기\" key=\"1\">\r\n     아이디 찾기 칸\r\n    </TabPane>\r\n    <TabPane tab=\"비밀번호 찾기\" key=\"2\">\r\n      비밀번호 찾기 칸\r\n    </TabPane>\r\n  </TabBar>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default FindAccount;","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\index.js",[],["259","260"],"C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\App.js",["261","262","263","264","265"],"import React, { Component } from 'react';\r\nimport styled from \"styled-components\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nimport './App.css';\r\nimport Axios from 'axios';\r\nimport SignUp from './components/SignUp';\r\nimport SignUp_kakao from './components/SignUp_kakao';\r\nimport LoginPage from './components/LoginPage';\r\nimport Write from './components/Write';\r\nimport Chatting from './components/Chatting';\r\nimport ShowPost from './components/ShowPost';\r\nimport MainBoards from './components/MainBoards';\r\nimport BoardNav from './components/BoardNav';\r\nimport Update from './components/Update';\r\nimport Scrap from './components/Scrap';\r\nimport FindId from './components/FindId';\r\nimport FindPw from './components/FindPw';\r\nimport Quit from './components/Quit';\r\nimport ReviewWrite from './components/ReviewWrite';\r\nimport FindAccount from './components/FindAccount';\r\nimport MyModal from './components/MyModal';\r\nimport MyInfoEdit from './components/MyInfoEdit';\r\nfunction App() {\r\n  return (\r\n    \r\n    <Router>\r\n      <div>\r\n\r\n        <Switch>\r\n        <Route exact path=\"/join\" component={SignUp} />\r\n          <Route exact path=\"/join/kakao\" component={SignUp_kakao} />\r\n          <Route exact path=\"/login\" component={LoginPage} />\r\n          <Route exact path=\"/\" component={MainBoards}/>\r\n          <Route exact path=\"/write\" component={Write}/>\r\n          <Route exact path=\"/chat/:post/:writer\" component={Chatting}/>\r\n          <Route exact path=\"/post/:id\" component={ShowPost}/>\r\n          <Route exact path=\"/Update\" component={Update}/>\r\n          <Route exact path=\"/\" component={MainBoards}/>\r\n          <Route exact path=\"/Scrap\" component={Scrap}/>\r\n          <Route exact path=\"/FindId\" component={FindId}/>\r\n          <Route exact path=\"/FindPw\" component={FindPw}/>\r\n          <Route exact path=\"/Quit\" component={Quit}/>\r\n          <Route exact path=\"/reviewWrite\" component={ReviewWrite}/>\r\n          <Route exact path=\"/FindAccount\" component={FindAccount}/>\r\n          <Route exact path=\"/myModal\" component={MyModal}/>\r\n          <Route exact path=\"/myInfo\" component={MyInfoEdit}/>\r\n        </Switch>\r\n\r\n        {/* </Page> */}\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\reportWebVitals.js",[],"C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\SignUp.jsx",["266","267","268","269"],"import React, {useCallback, useState} from 'react';\r\nimport Logo from './Logo';\r\nimport axios from 'axios';\r\nimport Postcode from '@actbase/react-daum-postcode';\r\nimport Modal from 'react-modal';\r\nimport styled from \"styled-components\";\r\n\r\nconst Page=styled.body`\r\n    margin:0;\r\n    padding:20px;\r\n    display:flex;\r\n    flex-direction:column;\r\n    align-items:center;\r\n`;\r\nconst InputComponent=styled.input`\r\n    border:none;\r\n    outline:none;\r\n    border-bottom: 1px solid #E5E5E5;\r\n    ::placeholder{\r\n        color:#E5E5E5;\r\n    }\r\n    width:250px;\r\n    height:40px;\r\n`;\r\nconst Label=styled.h2`  \r\nfont-size:14px;\r\ncolor:#7D7D7D;\r\nfont-weight:600;\r\n`;\r\n\r\nconst SubmitButton=styled.button`\r\n    margin-top:30px;\r\n    border:none;\r\n    width:350px;\r\n    height:50px;\r\n    background-color:#A352CC;\r\n    border-radius:5px;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:18px;\r\n    text-align:center;\r\n`;\r\nconst Btn=styled.button`\r\n    border: 1px solid #EBCAFD;\r\n    background-color:white;\r\n    color:#EBCAFD;\r\n    width:80px;\r\n    height:30px;\r\n    border-radius:5px;\r\n    margin-left:12px;\r\n`;\r\n\r\nconst CloseBtn=styled.div`\r\n     position:fixed;\r\n    top:0;\r\n    right:0;\r\n    height:20px;\r\n    margin:5px 10px 0px 0px;\r\n    padding:auto;\r\n    background:none;\r\n    color:#E5E5E5;\r\n    width:20px;\r\n    font-weight:bold;\r\n    text-align:center;\r\n    border-radius:2px;\r\n    cursor:pointer;\r\n`;\r\nconst SignUp=()=>{\r\n    const useInput = (initValue = null) =>{\r\n        const [value,setter] = useState(initValue);\r\n       \r\n        const handler = (e) => {\r\n            if(e) setter(e.target.value);\r\n            else setter(initValue);\r\n        };\r\n        return [value,handler];\r\n    };\r\n   \r\n\r\n    const [email,setEmail] = useInput('');\r\n    const [id, setId]=useInput('');\r\n    const [pw,setPw] = useInput('');\r\n    const [nickname,setNickname] = useInput('');\r\n    const [showAddress,setShowAddress] =  useState('');\r\n    const [fullAddress,setFullAddress]=useState('');\r\n    //주소의 경우, 사용자에게 보여주는 것은 showAddress로 '##동'으로만 나오고, full 주소는 fullAddress에 저장됩니다.\r\n    const [pwChk,setPwChk]=useState('');\r\n    const [pwError,setPwError]=useState(false);\r\n    const [chkEmail,setChkEmail]=useState(false);\r\n    const [chkNickname,setChkNickname]=useState(false);\r\n    const [chkId,setChkId]=useState(false);\r\n    // const pwChkRef=useRef();\r\n    // const pwRef=useRef();\r\n    \r\n    const onSubmitForm=(e)=>{\r\n        e.preventDefault();\r\n        if(!(email&&id&&pw&&pwChk&&nickname&&fullAddress)){\r\n            alert(`모든 문항을 입력해주세요`);\r\n            return;\r\n        }\r\n        else{\r\n        //  입력하지 않은 문항 알려주는 것 추가 예정\r\n        if(!/^[A-Za-z0-9]{6,12}$/.test(pw)){\r\n            alert('영문, 숫자 포함 6-12자리의 비밀번호를 입력해주세요.');\r\n            return;\r\n        }\r\n        if(!chkEmail){\r\n            alert('이메일 중복확인을 완료해주세요.');\r\n            return;\r\n        }\r\n        if(!chkId){\r\n            alert('아이디 중복확인을 완료해주세요.');\r\n            return;\r\n        }\r\n        if(!chkNickname){\r\n            alert('닉네임 중복확인을 완료해주세요.');\r\n            return;\r\n        }\r\n        axios.post('url을 입력해주세요', {\r\n                email: email,\r\n                id:id,\r\n                password: pw,\r\n                nickname:nickname,\r\n                address:fullAddress,\r\n                showAddress:showAddress,\r\n            }\r\n          ).then( (res) => {\r\n            console.log(res);\r\n          })\r\n          .catch( (error)=> {\r\n           console.log(error);\r\n          });\r\n    \r\n       alert('가입을 환영합니다!');\r\n        \r\n    }\r\n};\r\n    const onChangeChkPw=(e)=>{\r\n        if(!pw) {\r\n            alert('비밀번호를 먼저 입력해주세요.');\r\n            setPwChk('');\r\n        }\r\n        else{\r\n        setPwError(e.target.value!==pw);\r\n        setPwChk(e.target.value);\r\n        }\r\n    };\r\n    const [isModal, setModal] = useState(false);\r\n    const modal=(e)=>{\r\n        e.preventDefault();\r\n        if(isModal) setModal(false);\r\n        else setModal(true);\r\n    };\r\n\r\n    const onClickChk=(e)=>{\r\n        e.preventDefault();\r\n        if(e.target.value==='email'){ //이메일 정보 받아오는 곳\r\n            if(!email) {\r\n                alert('입력창에 먼저 입력해주세요.');\r\n                return;\r\n            }else if(!/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i.test(email)){\r\n                //이메일 형식에 맞는 값이 들어왔는지 확인합니다.\r\n                alert('올바르지 않은 이메일입니다. 다시 입력해주세요.');\r\n                setEmail('');\r\n                return;\r\n            }else{ //여기에서 axios 통신하시고, 아래 주석처리된 if문 괄호도 채워서 주석 해제해주세요\r\n                axios.get('')\r\n                .then((res)=> { //성공적으로 통신했을 때\r\n                    // if() { //이미 저장된 이메일이 아니라면\r\n                    //     alert('사용 가능한 이메일입니다.');\r\n                    //     setChkEmail(true);\r\n                    // } else{ //이미 저장된 이메일이라면 \r\n                    //     alert('이미 사용중인 이메일입니다.');\r\n                    //     setEmail('');\r\n                    // }\r\n                })\r\n                .catch((error)=> { console.log(error); }) //에러처리\r\n            }\r\n        }\r\n    \r\n        else if(e.target.value==='nickname'){ //닉네임 정보 받아오는 곳\r\n            if(!nickname) {\r\n                alert('입력창에 먼저 입력해주세요.');\r\n                return;\r\n            }\r\n            else{ //여기에서 axios 통신하시고, 아래 주석처리된 if문 괄호도 채워서 주석 해제해주세요\r\n                axios.get('')\r\n                .then((res)=> { //성공적으로 통신했을 때\r\n                    // if() { //이미 저장된 닉네임이 아니라면\r\n                    //     alert('사용 가능한 닉네임입니다.');\r\n                    //     setChkNickname(true);\r\n                    // } else{ //이미 저장된 닉네임이라면 \r\n                    //     alert('이미 사용중인 닉네임입니다.');\r\n                    //     setNickname('');\r\n                    // }\r\n                })\r\n                .catch((error)=> { console.log(error); }) //에러처리\r\n            }\r\n        }\r\n        else if(e.target.value==='id'){ //아이디 정보 받아오는 곳\r\n            if(!id) {\r\n                alert('입력창에 먼저 입력해주세요.');\r\n                return;\r\n            } else{ //여기에서 axios 통신하시고, 아래 주석처리된 if문 괄호도 채워서 주석 해제해주세요\r\n                axios.get('')\r\n                .then((res)=> { //성공적으로 통신했을 때\r\n                    // if() { //이미 저장된 아이디가 아니라면\r\n                    //     alert('사용 가능한 아이디입니다.');\r\n                    //     setChkId(true);\r\n                    // } else{ //이미 저장된 아이디라면 \r\n                    //     alert('이미 사용중인 아이디입니다.');\r\n                    //     setId('');\r\n                    // }\r\n                })\r\n                .catch((error)=> { console.log(error); }) //에러처리\r\n            }\r\n        }\r\n\r\n    };\r\n    return(\r\n    <Page >\r\n    <Logo />\r\n    <form>\r\n    <Label>이메일</Label>\r\n    <InputComponent \r\n        value={email} \r\n        onChange={setEmail}\r\n        name=\"email\"\r\n        label=\"이메일\" \r\n        placeholder=\"사용자 이메일\"\r\n         /> \r\n    <Btn onClick={onClickChk} value=\"email\">중복확인</Btn>\r\n    <Label>비밀번호</Label>\r\n    <InputComponent \r\n        value={pw}\r\n        onChange={setPw}\r\n        name=\"password\"\r\n        label=\"비밀번호\" \r\n        placeholder=\"영문, 숫자 포함 6-12자리\"\r\n        type=\"password\"/>\r\n    <Label>비밀번호 확인</Label>\r\n    <InputComponent  \r\n        value={pwChk}\r\n        onChange={onChangeChkPw}\r\n        name=\"passwordChk\" \r\n        label=\"비밀번호 확인\" \r\n        type=\"password\"/>\r\n    {pwError&&<div style={{color : '#F79F81', fontSize: '10px'}}>비밀번호가 일치하지 않습니다.</div>}\r\n    <Label>아이디</Label>\r\n    <InputComponent   \r\n        onChange={setId}\r\n        value={id}\r\n        name=\"id\" \r\n        label=\"아이디\" />\r\n    <Btn onClick={onClickChk}  value=\"id\">중복확인</Btn>\r\n    <Label>닉네임</Label>\r\n    <InputComponent   \r\n        onChange={setNickname}\r\n        value={nickname}\r\n        name=\"nickname\" \r\n        label=\"닉네임\" />\r\n    <Btn onClick={onClickChk}  value=\"nickname\">중복확인</Btn>\r\n    <Label>주소</Label>\r\n         <InputComponent   \r\n        onChange={setShowAddress}\r\n        value={showAddress}\r\n        name=\"showAddress\" \r\n        label=\"주소\" \r\n        readOnly\r\n        />\r\n        <Btn onClick={modal}>주소찾기</Btn>\r\n    {/* <div> */}\r\n     <Modal isOpen={isModal} style={{width:'150px'}}>\r\n        <Postcode\r\n         style={{ width: 320, height: 320 }}\r\n          jsOptions={{ animated: true, hemaileMapBtn: true }}\r\n          onSelected={data => {\r\n            setShowAddress(data.bname);\r\n            setFullAddress(data.address);\r\n            setModal(false);\r\n          }}\r\n        />\r\n        <CloseBtn onClick={modal}>X</CloseBtn>\r\n      </Modal>\r\n      {/* </div> */}\r\n    <div>\r\n    <SubmitButton \r\n        onClick={onSubmitForm}>\r\n           회원가입 \r\n    </SubmitButton>\r\n    </div>\r\n    </form>\r\n    </Page>\r\n    );\r\n}\r\nexport default SignUp;","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\LoginPage.jsx",["270","271"],"import React, { useState, useEffect } from 'react'\r\nimport styled from \"styled-components\";\r\nimport Logo from \"./Logo\"\r\nimport LoginBtn from \"./Login_btn\"\r\nimport axios from 'axios';\r\nimport {useCookies} from 'react-cookie';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n // id저장, 회원가입 부분 style\r\n const Styled = styled.div`\r\n width: 390px;\r\n margin-top: auto;\r\n margin-botton: auto;\r\n display: inline-block;\r\n\r\n margin: 5px 0px 20px 5px;\r\n`;\r\n\r\nconst Center = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n`;\r\n\r\n//Id, Pw input창 \r\nconst Input=styled.input`\r\n    // border-radius: 30px;\r\n    border-width: thin;\r\n    border-color: #E5E5E5;\r\n    border-style: solid; \r\n    width:250px;\r\n    height:40px;\r\n`;\r\n\r\n\r\nfunction LoginPage(props) {\r\n\r\n    const [id, setId] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [saveId, setSaveId] = useState(false);\r\n    const [cookies, setCookie, removeCookie] = useCookies(['rememberId']);\r\n\r\n    const onIdHandler = (e) => {\r\n      setId(e.currentTarget.value);\r\n    }\r\n    const onPasswordHandler = (e) => {\r\n        setPassword(e.currentTarget.value);\r\n    }\r\n\r\n    //쿠키에 id저장\r\n    useEffect(() => {\r\n      if(cookies.rememberId !== undefined) {\r\n        setId(cookies.rememberId);\r\n        setSaveId(true);\r\n      }\r\n    }, []);\r\n  \r\n    const handleOnChange = (e) => {\r\n      setSaveId(e.target.checked);\r\n      if(e.target.checked){  //checkBox 체크하면\r\n        setCookie('rememberId', id, {maxAge: 2000});\r\n      } else {  //checkBox지우면\r\n        removeCookie('rememberId'); //쿠키에서 삭제\r\n      }\r\n    }\r\n\r\n    const kakaoSubmit = (e) => {\r\n      e.preventDefault();\r\n      window.location.href = \"/SignUp_kakao\";\r\n    }\r\n    \r\n    const onSubmitLogin = (event) => {\r\n        event.preventDefault(); \r\n\r\n        //아이디 또는 비밀번호 입력안했을 때 \r\n        if (!id && !password) {\r\n          alert('아이디와 비밀번호를 입력하세요');\r\n          return;\r\n        } else if (!id) {\r\n          alert('아이디를 입력하세요');\r\n          return;\r\n        } else if (!password) {\r\n          alert('비밀번호를 입력하세요');\r\n          return;\r\n        }\r\n\r\n        // console.log('Id', id)\r\n        // console.log('Password', password)\r\n        // console.log('SaveId', saveId)\r\n\r\n        //서버에 보냄\r\n       let ans = {\r\n            id: id,\r\n            password: password\r\n            // , saveid: saveId\r\n        }\r\n\r\n      axios.post('https://reqres.in/api/login', ans)\r\n        //성공\r\n        .then((res)=>{\r\n            console.log(res);\r\n            // props.history.push('/'); //메인 화면으로 이동\r\n        })\r\n        //에러\r\n        .catch(error=>{\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    // const Left = styled.div`\r\n    //     text-align:left;\r\n    //     color: gray;\r\n    // `;\r\n    // const Right = styled.div`\r\n    //     text-align:right;\r\n    // `;\r\n\r\n   \r\n\r\n    let inputStyle = {\r\n        width:\"380px\",\r\n        height:\"60px\",\r\n        margin: \"8px\"\r\n    }\r\n\r\n   return (\r\n       <div>\r\n           <Logo></Logo>\r\n            <Center>\r\n              <form onSubmit={onSubmitLogin}>\r\n                  <Input type=\"email\" placeholder='빌리지 ID' style={inputStyle} value={id} onChange={onIdHandler}/><br/>\r\n                  <Input type=\"password\" placeholder='비밀번호' style={inputStyle} value={password} onChange={onPasswordHandler}/>\r\n                  <br/>\r\n                  <Styled>\r\n                    <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                      <label style={{color: '#878787'}}><input type=\"checkbox\" name=\"save_id\" value=\"save_id\" checked={saveId} onChange={handleOnChange}/>ID 저장</label>\r\n                      <a href=\"/FindAccount\" style={{marginLeft : '160px'}}>ID/PW 찾기</a>\r\n                      <a href=\"/SignUp\">회원가입</a>\r\n                    </div>\r\n                  </Styled>\r\n                  <br/>\r\n                  \r\n                  <button style={{border: 'none', background:'none'}} type=\"submit\"><LoginBtn title=\"빌리지\"></LoginBtn></button>\r\n                  <br/>\r\n                  <button style={{border: 'none', background:'none'}} onClick={kakaoSubmit} ><LoginBtn title=\"카카오톡\"></LoginBtn></button>\r\n              \r\n\r\n                {/* <div style={{marginTop: '10px'}}>\r\n                  <a href=\"/SignUp\" style={{margin: '10px'}}>회원가입 </a>  \r\n                  <a href=\"/\">아이디/비밀번호 찾기</a>             \r\n                </div> */}\r\n\r\n              </form>\r\n              \r\n            </Center>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginPage","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\Write.jsx",["272","273","274"],"/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { useState, useRef, useEffect } from 'react'\r\nimport styled from \"styled-components\";\r\nimport axios from 'axios';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { ko } from 'date-fns/esm/locale'\r\nimport moment from 'moment';\r\nimport 'moment/locale/ko';\r\nimport del_img from '../components/images/del.png'\r\n\r\nconst PageStyled=styled.body`\r\ndisplay:flex;\r\nflex-direction:column;\r\n// align-items:center;\r\n`;\r\nconst InputStyled = styled.input`\r\n        margin: 0px 20px;\r\n        border: none;\r\n        outline: none;\r\n        display: flex;\r\n        height: 50px;\r\n        width: 90%;\r\n  `;\r\nconst TextStyled = styled.textarea`\r\n        margin: 0px 20px;\r\n        border: none;\r\n        outline: none;\r\n        display: flex;\r\n        height: 300px;\r\n        width: 90%;\r\n  `;\r\nconst TopStyled=styled.ul` \r\n    height:25px;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:space-between;\r\n    list-style:none;\r\n    margin-top:5;\r\n    padding:0 20px 0 20px;\r\n    color: black;\r\n    font-size:15px;\r\n    font-weight:bold;\r\n  `;\r\nconst BoardStyled = styled.ul`\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:space-evenly;\r\n    list-style:none;\r\n    margin:0;\r\n    padding:0 20px 0 20px;\r\n`;\r\n//시작일, 종료일 달력 스타일\r\nconst DatePickerStyled = styled(DatePicker)`\r\n    text-align: center;\r\n    width: 150px;\r\n    height: 30px;\r\n    font-size: 15px;\r\n    border-radius: 20px;\r\n    border: 1px solid gray;\r\n`;\r\nconst DateTitle = styled.div`\r\n    color: gray;\r\n    white-space: nowrap;\r\n    font-size: 13px;\r\n    margin-bottom: 5px;\r\n    margin-left : 43px;\r\n`;\r\nconst DivStyled = styled.div`\r\n    display: flex;\r\n    justify-content:space-evenly;\r\n`;\r\nconst MainContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 20px;\r\n  margin-left: 15px;\r\n  @media (max-width: 400px) {\r\n    width: 100%;\r\n    max-width: 400px;\r\n    justify-content: start;\r\n    flex-wrap: wrap;\r\n  }\r\n`;\r\n//이미지-가로 스크롤\r\nconst Scroll = styled.div`\r\n  display: flex;\r\n  overflow-x:scroll;\r\n  white-space:nowrap;\r\n  ::-webkit-scrollbar { display: none; }\r\n`;\r\nconst InitialBox = styled.div`\r\n    width: 60px;\r\n    height: 60px;\r\n    border-radius:5px;\r\n    margin-right:10px;\r\n    border : solid 1px gray;\r\n    display : flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n`;\r\nconst ImgAreaContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\nconst ImgArea = styled.div`\r\n  width: 60px;\r\n  height: 60px;\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n  object-fit: cover;\r\n`;\r\nconst Img = styled.img`\r\n  object-fit: cover;\r\n  width: 100%;\r\n`;\r\nconst FileInput = styled.input`\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  padding: 0;\r\n  margin: -1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  border: none;\r\n`;\r\n//이미지 삭제 버튼\r\nconst DeleteButton = styled.button`\r\n  background: none;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  margin-left: -17px;\r\n  margin-top: -46px;\r\n`;\r\n\r\nfunction Write(props) {\r\n    const [title, setTitle] = useState(\"\"); //제목\r\n    const [price, setPrice] = useState(\"\"); //가격\r\n\r\n    const [startDate, setStartDate] = useState(new Date()); //대여 시작 날짜\r\n    const [endDate, setEndDate] = useState(new Date()); //대여 끝 날짜\r\n    const [content, setContent] = useState(\"\"); //내용\r\n    const [fontStyle1, setFontStyle1]=useState({'background': \"linear-gradient(to top, #FFE400 50%, transparent 50%)\", color: \"black\"});\r\n    const [fontStyle2, setFontStyle2]=useState({'background-color': \"transparent\", color: \"lightgray\"});\r\n\r\n    const [menu, setMenu] = useState(true);   \r\n    const [menu1, setMenu1] = useState(true); //빌려줄게요\r\n    const [menu2, setMenu2] = useState(false); //빌려주세요\r\n\r\n    // 이미지 업로드 버튼 클릭 시, 서버로 이미지 폼 데이터 전송 --> 서버에서 이미지의 저장경로를 보내줌(미리보기에 사용가능[?])\r\n    // 게시글 업로드 클릭 시, 이미지의 저장경로를 다시 서버로 전송\r\n    \r\n    const [previewImage, setPreviewImage] = useState([]);\r\n    const imagesRef = useRef();\r\n    const newFileList = [];\r\n\r\n    //업로드 이미지 미리보기\r\n    const multipleImageHandler = e => {\r\n        e.preventDefault();\r\n        // var newFileList = [];\r\n        const uploadedFile = e.target.files;\r\n        \r\n        for (var i = 0; i < uploadedFile.length; i++) {\r\n          let reader = new FileReader();\r\n          let file = uploadedFile[i];\r\n          \r\n\r\n          if(e.target.files[0]) {\r\n            if(uploadedFile.length > 10){\r\n              alert('사진은 10개까지 업로드 가능합니다');\r\n              break;\r\n            }\r\n            else {\r\n              reader.readAsDataURL(file);// 이미지를 특정 Blob로 읽어서 저장 \r\n\r\n             //파일상태 업데이트 \r\n              reader.onloadend = () => {\r\n\r\n                  newFileList.push({\r\n                    file: file,\r\n                    previewURL: reader.result\r\n                  })\r\n              }\r\n\r\n              //업로드 다 된 후에 미리보기 \r\n              if (i === uploadedFile.length - 1) {\r\n                setTimeout(() => setPreviewImage(previewImg => previewImg.concat(newFileList)), 1000);\r\n              }\r\n            }\r\n          }\r\n  \r\n        }\r\n    }\r\n    //이미지 삭제 \r\n    const removeImageHandler = (id) => {\r\n        const remainingImg = previewImage.filter((item, i) => i !== id )\r\n        setPreviewImage(remainingImg)\r\n\r\n    }\r\n\r\n    //글 등록 버튼 클릭 시  \r\n    const onSubmitWrite = (e) => { \r\n\r\n        e.preventDefault();\r\n            if(!title){\r\n                alert('제목을 입력해주세요');\r\n                return;\r\n            }\r\n            if(!price){\r\n                alert('가격을 입력해주세요');\r\n                return;\r\n            }\r\n            if(!content){\r\n                alert('내용을 입력해주세요');\r\n                return;\r\n            }\r\n        //빌려줄게요 게시판에 글쓰기\r\n        if(menu1 === true) {\r\n\r\n          e.preventDefault();\r\n          // setPreviewImage([]); \r\n          imagesRef.current.value = '';\r\n      \r\n          const formData = new FormData();\r\n          const config = {\r\n                headers : {'content-type': 'multipart/form-data'}\r\n          }\r\n          \r\n          for(var i=0; i<previewImage.length; i++){\r\n            formData.append('img'+i, previewImage[i].file);   //이미지 정보 \r\n          }\r\n          // formData.append('imgUrl', previewImage); //이미지 url\r\n          formData.append('title', title);\r\n          formData.append('price', price);\r\n          formData.append('body', content);\r\n          formData.append('startDate', startDate);\r\n          formData.append('endDate', endDate);\r\n          formData.append('date', moment().format('YYYY.MM.DD HH:mm'));\r\n\r\n//        test\r\n          for(var i=0; i< previewImage.length;i++) {\r\n            console.log('img'+i+'_test', previewImage[i].file);\r\n          }\r\n\r\n           return axios.post('http://localhost:7000/post/write/lend', formData,\r\n            { withCredentials: true })\r\n              .then( (res) => {\r\n                props.history.push('/'); //메인 화면으로이동\r\n              })\r\n              .catch( (error)=> {\r\n                console.log(error);\r\n              }, config);\r\n        }\r\n\r\n        //빌려주세요 게시판에 글쓰기\r\n        if(menu2 === true) {\r\n          const data = {\r\n            title : title,\r\n            body : content,  \r\n            price : price, \r\n            start_date : startDate, \r\n            end_date : endDate,\r\n            date: moment().format('YYYY.MM.DD HH:mm')\r\n          };\r\n          console.log(data);\r\n          axios.post('http://localhost:7000/post/write/borrow', data,\r\n            { withCredentials: true })\r\n            .then( (res) => {\r\n              props.history.push('/'); //메인 화면으로이동\r\n            })\r\n            .catch( (error)=> {\r\n              console.log(error);\r\n            });\r\n          }\r\n    }\r\n\r\n  return (\r\n    <PageStyled>\r\n        <form onSubmit={onSubmitWrite}>\r\n        <TopStyled>\r\n            <li><a href=\"/\" style={{color: 'gray',  'font-size' : '13px', 'font-weight': 'bold'}}>취소</a></li>\r\n            <li>게시글 쓰기</li>\r\n            <li><button type=\"submit\" style={{color: '#A352CC', border:'none', background: 'none', 'font-weight': 'bold', 'font-size' : '13px'}}>등록</button></li>\r\n        </TopStyled>\r\n        \r\n        <hr/>\r\n        <BoardStyled>\r\n          <li><a href=\"/\" onClick={(e) => {e.preventDefault(); setMenu(true); setMenu1(true); setMenu2(false); setFontStyle1({'background': \"linear-gradient(to top, #FFE400 50%, transparent 50%)\", color: \"black\"}); setFontStyle2({'background-color': \"transparent\", color: \"lightgray\"})}} style={fontStyle1}>빌려줄게요</a></li>\r\n          <li><a href=\"/\" onClick={(e) => {e.preventDefault(); setMenu(false); setMenu1(false); setMenu2(true); setFontStyle1({'background-color': \"transparent\", color: \"lightgray\"}); setFontStyle2({'background': \"linear-gradient(to top, #FFE400 50%, transparent 50%)\", color: \"black\"})}} style={fontStyle2}>빌려주세요</a></li>\r\n        </BoardStyled>\r\n        \r\n        { menu ? <div>\r\n        <hr/>\r\n        <MainContainer>\r\n\r\n            <label htmlFor='file'>  \r\n             <InitialBox>\r\n                 <img src='https://ifh.cc/g/219dfc.png' alt=\"camera_img\" style={{width: '30px', 'margin-bottom': '-13px', 'padding-top' :'10px'}}></img>\r\n                 <p style={{color: 'gray', 'font-size' : '12px'}}>{previewImage.length}/10</p>\r\n             </InitialBox>\r\n             </label>\r\n             <FileInput type=\"file\" id=\"file\" multiple ref={imagesRef} accept=\"image/*\" onChange={multipleImageHandler} style={{ visibility: \"hidden\" }}/>\r\n \r\n            <Scroll>    \r\n              \r\n            {previewImage.map((file, i) => \r\n             <ImgAreaContainer key={i} className=\"content\">\r\n                <ImgArea><img src={file.previewURL} style={{width: '60px', height: '60px', 'white-space': 'nowrap'}} alt='profile_preview' /></ImgArea>\r\n                <DeleteButton onClick={(e) => {e.preventDefault(); removeImageHandler(i)} } ><img src={del_img} style={{width: '11px'}}/></DeleteButton>\r\n\r\n            </ImgAreaContainer>\r\n            )}\r\n               \r\n            </Scroll>\r\n\r\n   \r\n        </MainContainer>\r\n    \r\n        </div> : <div/> }\r\n      \r\n\r\n        <hr/>\r\n          <InputStyled\r\n                type=\"title\"\r\n                name=\"title\"\r\n                placeholder=\"제목\"\r\n                onChange={(event) => setTitle(event.target.value)} \r\n                /><hr/>\r\n          <InputStyled\r\n                type=\"number\"\r\n                name=\"price\"\r\n                placeholder=\"가격\"\r\n                onChange={(event) => setPrice(event.target.value)} \r\n                /><hr/>\r\n      \r\n          <DivStyled>\r\n              <div>\r\n          <DateTitle>대여시작일</DateTitle>\r\n\r\n          <DatePickerStyled\r\n            dateFormat=\"yyyy/MM/dd\"\r\n            selected={startDate}\r\n            onChange={date => setStartDate(date)}\r\n            selectsStart\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n            minDate={new Date()}\r\n            locale={ko}\r\n            />\r\n            </div>\r\n            <div>\r\n            <DateTitle>대여종료일</DateTitle>\r\n            <DatePickerStyled\r\n            dateFormat=\"yyyy/MM/dd\"\r\n            selected={endDate}\r\n            onChange={date => setEndDate(date)}\r\n            selectsEnd\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n            minDate={startDate}\r\n            locale={ko}\r\n            />\r\n            </div>\r\n          </DivStyled>\r\n            <hr/>\r\n          <TextStyled\r\n                name=\"content\"\r\n                placeholder=\"내용\"\r\n                onChange={(event) => setContent(event.target.value)} \r\n                />\r\n        </form>\r\n    </PageStyled>\r\n    )\r\n}\r\n\r\nexport default Write","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\Chatting.jsx",["275","276","277","278","279","280","281","282","283","284","285"],"import React, { useState, useEffect } from 'react'\r\nimport styled from \"styled-components\";\r\nimport '../ChatStyle.css';\r\nimport axios from 'axios';\r\nimport socketio from 'socket.io-client';\r\nimport send from '../components/images/send.png';\r\nimport useChat from \"../useChat\";\r\nimport moment from \"moment\";\r\nimport { message } from 'antd';\r\n\r\nconst TopStyled = styled.ul`\r\n    display: flex;\r\n    height: 25px;\r\n    align-items:center;\r\n    list-style:none;\r\n`;\r\nconst Top = styled.div`\r\n    padding-top: 1px;\r\n    background-color: white;\r\n    //상단고정\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 1;\r\n\r\n`;\r\nconst ChatList = styled.div`\r\n  margin-left: 15px;\r\n  margin-right: 15px;\r\n  overflow-y: auto;\r\n\r\n`;\r\n\r\nconst msessage = styled.span`\r\n    // display: inline-block;\r\n    // padding: 7px 15px;\r\n    // margin-bottom: 20px;\r\n    // margin-top: 5px;\r\n`;\r\n\r\nconst Nick = styled.div`\r\n    font-size: 5px;\r\n    color: gray;\r\n    margin-bottom: -4px;\r\n`;\r\n\r\nconst InputStyled = styled.input`\r\n    margin: 5px 5px 5px 5px;\r\n    display: flex;\r\n    width: 95%;\r\n    border:none;\r\n    outline:none;\r\n`;\r\nconst InputBox = styled.div`\r\n    margin: 5px 10px 5px 10px;\r\n    display: flex;\r\n    padding: 2px;\r\n    border: solid 1px lightgray;\r\n    border-radius : 10px;\r\n    height: 25px;\r\n    align-items:center;\r\n    background-color: white;\r\n`;\r\nconst Bottom = styled.div`\r\n  background-color: white;\r\n  // 하단고정\r\n    position: fixed;\r\n    bottom:0px;\r\n    width: 100%;\r\n\r\n`;\r\n\r\nconst Button = styled.button`\r\n    border: none;\r\n    background: none;\r\n    margin-top: 3px;\r\n`;\r\n\r\n//날짜 스타일 \r\nconst Line = styled.div`\r\n    display: flex;\r\n    flex-basis: 100%;\r\n    align-items : center;\r\n    color: rgba(0, 0, 0, 0.35);\r\n    font-size: 13px;\r\n    margin: 8px 0px;\r\n\r\n    ::before {\r\n      content: \"\";\r\n      flex-grow: 1;\r\n      margin: 0px 16px;\r\n      background: rgba(0, 0, 0, 0.35);\r\n      height: 1px;\r\n      line-height: 0px;\r\n    }\r\n    ::after {\r\n      content: \"\";\r\n      flex-grow: 1;\r\n      margin: 0px 16px;\r\n      background: rgba(0, 0, 0, 0.35);\r\n      height: 1px;\r\n      line-height: 0px;\r\n    }\r\n`;\r\n//시간 스타일\r\nconst MyTime = styled.span`\r\n    color: gray;\r\n    font-size: 5px;\r\n    margin-right: 4px;\r\n`;\r\nconst AnotherTime = styled.span`\r\n    color: gray;\r\n    font-size: 5px;\r\n    margin-left: 4px;\r\n`;\r\n\r\n// const socket = socketio.connect(\"http://localhost:3001\");  \r\nconst Chatting = (props) => {\r\n    const { roomId } = props.match.params;\r\n    const { messages, sendMessage } = useChat(roomId);\r\n    const [newMessage, setNewMessage] = React.useState(\"\"); //채팅 입력 값\r\n\r\n    const handleNewMessageChange = (event) => {\r\n      setNewMessage(event.target.value);\r\n    };\r\n\r\n    const onSendMessage = () => {\r\n      sendMessage(newMessage);\r\n      setNewMessage(\"\");\r\n    };\r\n    \r\n    //뒤로가기 icon \r\n    const backClick = () => {\r\n      window.history.back();\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Top> \r\n          <TopStyled>\r\n              <li onClick={backClick} style={{'color' : 'gray'}}>⬅</li>\r\n              <li style={{'margin-left' : '15px', 'font-weight' : 'bold'}}>닉네임</li>\r\n              {/* <li style={{'margin-left' : '15px', 'font-weight' : 'bold'}}>{roomId}</li> */}\r\n          </TopStyled>\r\n        <hr/>\r\n        </Top>\r\n\r\n        <div>\r\n\r\n        <ChatList>\r\n          {messages.map((msg, i) => {   \r\n            msg.ownedByCurrentUser ? (\r\n              <div>\r\n                <div className=\"myChat\">\r\n                <MyTime>{msg.timeStamp}</MyTime>\r\n                <span className=\"msg\">{msg.body}</span> \r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <div className=\"anotherChat\">\r\n                <span className=\"msg\">{msg.body}</span>\r\n                <AnotherTime>{msg.timeStamp}</AnotherTime>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n         </ChatList>\r\n\r\n            {/* <ChatList>\r\n              <Line>2021년 9월 6일</Line>\r\n              <div className=\"myChat\">\r\n                <MyTime>2:40</MyTime>\r\n                <span className=\"msg\">안녕하세요 빌리고 싶어요!</span> \r\n              </div>\r\n              <div className=\"anotherChat\">\r\n                <span className=\"msg\">안녕하세요</span>\r\n                <AnotherTime>11:20</AnotherTime>\r\n              </div>\r\n              <div className=\"anotherChat\">\r\n                <span className=\"msg\">어디서 만날까요?</span>\r\n                <AnotherTime>11:20</AnotherTime>\r\n              </div>\r\n              <div className=\"myChat\">\r\n                <MyTime>2:40</MyTime>\r\n                <span className=\"msg\">강남역으로 갈게요</span> \r\n              </div>\r\n            </ChatList>  */}\r\n\r\n        </div>\r\n        <Bottom>\r\n          <form onSubmit={onSendMessage}>\r\n            <InputBox>\r\n              <InputStyled\r\n                value={newMessage}\r\n                onChange={handleNewMessageChange}\r\n              />\r\n              <Button>\r\n              <img src={send} style={{width: '20px', height: 'auto'}}/>\r\n              </Button>\r\n            </InputBox>\r\n            </form>\r\n        </Bottom>\r\n\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default Chatting;","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\ShowPost.jsx",["286","287","288","289","290","291","292","293","294","295","296","297"],"import React, {useState, useEffect} from 'react';\r\nimport styled from \"styled-components\";\r\nimport axios from 'axios';\r\nimport 'antd/dist/antd.css';\r\nimport { Tabs, Button } from 'antd';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {HeartOutlined, HeartFilled} from '@ant-design/icons';\r\nimport ReviewList from './ReviewList';\r\nimport LikeButton from './LikeButton';\r\nconst { TabPane } = Tabs;\r\n\r\n// 이미지 슬라이더 감싸는 div\r\nconst ImgWrapper=styled.div` \r\n    // overflow:hidden;\r\n    // overflow-y:hidden;\r\n    text-align:center;\r\n    height:300px;\r\n    width:100%;\r\n    position:relative;\r\n    // transform : translateY(-100%);\r\n    background: ${props => props.arrLength===0 ? '#E5E5E5' : 'none'};\r\n`;\r\n//이미지 하나하나 스타일링\r\nconst PostImg=styled.img`\r\n    box-sizing: border-box;\r\n    height:100%;\r\n    width:100%;\r\n    // display:inline-block;\r\n`;\r\n//슬라이더 양옆으로 옮기는 버튼\r\nconst SlideBtn=styled.button`\r\n    position:absolute;\r\n    top:150px;\r\n    ${props=>props.name==='left'?'left:10px;':'right:10px'};\r\n    border:none;\r\n    border-radius:50%;\r\n    width:35px;\r\n    height:35px;\r\n    font-size:20px;\r\n    color:white;\r\n    opacity:0.5; \r\n    background-color:black;\r\n`;\r\n//\r\nconst PostHeader=styled.div`\r\n    display:flex;\r\n    justify-content:space-between;\r\n    border-bottom: solid 2px #E5E5E5;\r\n    margin:10px 0 5px 0;\r\n    padding: 2px;\r\n    position:relative;\r\n    height:40px;\r\n   text-align:center;\r\n`;\r\n\r\nconst PostFooter=styled.div`\r\n    background:white;\r\n    display:flex;\r\n    justify-content:space-between;\r\n    height:50px;\r\n    align-items:center;\r\n    position:fixed;\r\n    bottom:0;\r\n    width:90%;\r\n`;\r\nconst PostComponent=styled.div`\r\n    width:90%;\r\n    height:50%;\r\n    overflow:auto;\r\n    margin:auto;\r\n    position:relative;\r\n`;\r\nconst PostTitle=styled.div`\r\n    display:flex;\r\n    justify-content:space-between;\r\n`;\r\nconst ChatButton=styled.button`\r\n    background:#A352CC;\r\n    color:white;\r\n    border:none;\r\n    width:110px;\r\n    height:30px;\r\n    font-size:16px;\r\n    text-align:center;\r\n`;\r\nconst HighLight=styled.div`\r\n    color:#A352CC;\r\n    font-size:20px;\r\n    font-weight:bold;\r\n    \r\n    background-color:white;\r\n`;\r\nconst PostButton=styled.button`\r\n    border:none;\r\n    background:none;\r\n    color: #7D7D7D;\r\n    font-size:12px;\r\n`;\r\nconst PostContent=styled.div`\r\n    font-size:16px; \r\n    margin-top:3px; \r\n    position:relative;\r\n    margin-bottom:15%;\r\n`;\r\nconst ImgTurn=styled.div`\r\n    background:black;\r\n    width:50px;\r\n    height:20px;\r\n    position:absolute;\r\n    bottom:0;\r\n    left:46%;\r\n    border-radius:2px;\r\n    margin:5px;\r\n    color:white;\r\n    font-size:12px;\r\n    opacity:0.5;\r\n    text-align:center;\r\n`;\r\nconst ReviewButton=styled(Button)`\r\n    background-color:#ffffff;\r\n    border:1px solid #E5E5E5;\r\n    color:#A352CC;\r\n    &:hover, &:focus {\r\n        color:#A352CC;\r\n        background-color:#ffffff;\r\n        border:1px solid #A352CC;\r\n    }\r\n    height:28px;\r\n    text-align:center;\r\n    font-size:12px;\r\n`;\r\nconst ChatButton2=styled(Button)`\r\n    background-color:#A352CC;\r\n    border:1px solid #ffffff;\r\n    color:#ffffff;\r\n    &:hover, &:focus {\r\n        color:#A352CC;\r\n        background-color:#ffffff;\r\n        border:1px solid #A352CC;\r\n    }\r\n`;\r\nconst StyledTab=styled(Tabs)`\r\n    size:large;\r\n   \r\n    \r\n`;\r\n\r\n    const ShowPost=({postId})=>{\r\n    const [imgArr,setImgArr]=useState([]); //이미지를 넣는 배열 \r\n    const [postInfo,setPostInfo]=useState(''); //이미지 제외 게시글 정보\r\n    let [imgIdx,setImgIdx]=useState(0); //이미지 슬라이더에서 사진 교체할 때 사용하는 인덱스 넘버\r\n    const [curUser,setCurUser]=useState('') //현재 계정에 접속해 서비스를 사용하는 사용자\r\n    const [temp,setTemp]=useState('안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다 안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다 안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다 안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다 안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다  안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다 안녕하세요 \\n 빔프로젝터 빌려가실 분을 찾습니다 ')\r\n    // const getPostContent=(postId)=>{\r\n    // return axios.get(url, { //통신을 위한 url을 적어주세요.\r\n    //         params: {\r\n    //         id:postId, //글을 클릭할때 게시글 아이디(postId)를 넘겨줘서 해당 아이디에 맞는 데이터 가져옴\r\n    //         }\r\n    //     });\r\n    // };\r\n    // const getPostImg=(postId)=>{ //통신을 위한 url을 적어주세요.\r\n    //     return axios.get(url, {\r\n    //         params: {\r\n    //         id:postId, //글을 클릭할때 게시글 아이디(postId)를 넘겨줘서 해당 아이디에 맞는 데이터 가져옴\r\n    //         }\r\n    //     });\r\n    // };\r\n    // useEffect((postId) => {  //페이지가 실행될 때 한 번만 실행된다\r\n    // axios.all([getPostContent(postId),getPostImg(postId)]) // axios.all로 여러 개의 request를 보내고\r\n    // .then(axios.spread((contentResp, imgResp) => { // response를 spread로 받는다\r\n    //     //contentResp: 이미지를 제외한 게시물 정보 데이터 / imgResp: 이미지 데이터\r\n    //     setPostInfo(contentResp); \r\n    //     setImgArr(imgResp);\r\n    // })).catch((error) => {\r\n    //     console.error(error)\r\n    // })\r\n    // }, []);\r\n    const numberWithCommas=(x)=> {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n   \r\n    const onClickSlide=(e)=>{\r\n    if(e.target.name==='right'&&imgArr.length-1!==imgIdx){\r\n        setImgIdx(imgIdx+1);\r\n       console.log(e.target.name);\r\n    }//슬라이더 오른쪽 버튼 누르면, 마지막 인덱스가 아닌지 확인후 다음 인덱스의 이미지 가져옴\r\n    else if(e.target.name==='left'&&imgIdx>0){\r\n        setImgIdx(imgIdx-1);\r\n        console.log(e.target.name);\r\n    }//슬라이더 왼쪽 버튼 누르면, 처음 인덱스가 아닌지 확인후 이전 인덱스의 이미지 가져옴\r\n    };\r\n\r\n    //채팅 보내기 버튼 눌렀을 때 \r\n    const onClickChat = () => {\r\n        window.location.href = \"/Chatting\";\r\n\r\n        //닉네임 보내기 \r\n        axios.post('url', {\r\n            nick: postInfo.user.nick,\r\n        }\r\n        ).then( (res) => {\r\n            console.log(res);\r\n        })\r\n        .catch( (error)=> {\r\n            console.log(error);\r\n        });\r\n\r\n    }\r\n    useEffect(()=>{\r\n        axios.get(\"http://localhost:7000/auth\", { withCredentials: true })\r\n        .then((res)=>{\r\n            if(res.data){\r\n                setCurUser(res.data);\r\n            }\r\n        }).catch((error)=>{\r\n            console.log(error);\r\n        }\r\n\r\n        );\r\n    },[]);\r\n     //찜 버튼 \r\n     const onLikeSubmit = (check) => {\r\n    \tconsole.log(check);\r\n       let ans = {\r\n        postId: postId,\r\n        // nick: postInfo.user.nick,\r\n        check: check\r\n        }\r\n        axios.post('url', ans)\r\n            //성공\r\n            .then((res)=>{\r\n                console.log(res);\r\n            })\r\n            //에러\r\n            .catch(error=>{\r\n                console.log(error);\r\n            });\r\n\r\n    }\r\n    return(\r\n        <div style={{background: 'white'}}>\r\n        <ImgWrapper arrLength={imgArr.length}>\r\n        {/* 이미지가 하나라도 있으면, 아래 wrapper 안의 코드가 보이고 이미지가 하나도 없으면 회색 바탕 */}\r\n        {imgArr.length!==0&&<PostImg src={imgArr[imgIdx].url} alt={imgArr[imgIdx].name}/>}\r\n        {imgArr.length!==0&&<SlideBtn name=\"right\" onClick={onClickSlide}>»</SlideBtn> /* 슬라이더 오른쪽 버튼*/}\r\n        {imgArr.length!==0&&<SlideBtn name=\"left\" onClick={onClickSlide}>«</SlideBtn> /* 슬라이더 왼쪽 버튼*/}\r\n        {imgArr.length!==0&&<ImgTurn><span style={{opacity:'1.0'}}>{imgIdx+1} / {imgArr.length}</span></ImgTurn>}\r\n        </ImgWrapper>\r\n        <PostComponent>\r\n        <PostHeader>\r\n            <div>\r\n            <div style={{fontWeight:'bold', fontSize:'14px'}}>\r\n                {/* {postInfo.user.nick}  */}\r\n                글쓴이 닉네임\r\n                </div>\r\n            <div style={{color:'#7D7D7D', fontSize:'11px'}}>\r\n                {/* {postInfo.user.showAddress}  */}\r\n                글쓴이 주소\r\n                </div>\r\n            </div>\r\n            <HighLight> \r\n                {postInfo.startDate} - {postInfo.endDate}\r\n            </HighLight> \r\n            {/* 대여기간 */}\r\n        </PostHeader>\r\n       \r\n        <StyledTab type={{line:'300px'}} defaultActiveKey=\"1\" centered>\r\n        <TabPane tab=\"본문 내용\" key=\"1\">\r\n        <PostTitle>\r\n        <div style={{fontWeight:'bold', fontSize:'18px', marginTop:'2px'}}>\r\n            {/* {postInfo.title}  */}\r\n            게시글 제목 \r\n        </div>\r\n        {/* 현재 계정 접속자와 글쓴이 id 가 같으면 수정/삭제 버튼이 보입니다 */}\r\n        {/* {postInfo.user.id===curUser.id&& */}\r\n        <div>\r\n   \r\n        <Link to={`/Update/${postInfo.id}`}><PostButton>수정</PostButton></Link>\r\n        {/* <Link to={`/Update/1`}><PostButton>수정</PostButton></Link> */}\r\n        \r\n        <PostButton>삭제</PostButton>\r\n        </div>\r\n        {/* } */}\r\n        </PostTitle>\r\n            <div style={{color:'#7D7D7D',fontSize:'12px', margin:'2px 0 0 2px'}}>{postInfo.createAt}</div> {/* 글쓴 날짜 및 시각 */}\r\n        <PostContent>  \r\n        {/* 게시글 보이는 곳*/} \r\n        {/* 게시글 줄 띄어쓰기되는 코드입니다 */}\r\n        {/* 관련사항은 링크 참조해주세요 : https://coding-hwije.tistory.com/58 */}\r\n     {/* {postInfo.body.split(\"\\n\").map((line) => { //postInfo.body: 글내용\r\n            return (\r\n              <span>\r\n                {line}\r\n                <br />\r\n              </span>\r\n            );\r\n          })} */}\r\n           {temp.split(\"\\n\").map((line) => { //postInfo.body: 글내용\r\n            return (\r\n              <span>\r\n                {line}\r\n                <br />\r\n              </span>\r\n            );\r\n          })}\r\n        {/* {postInfo.body}  */}\r\n        </PostContent>\r\n        </TabPane>\r\n        <TabPane tab=\"대여 후기\" key=\"2\"> \r\n        <PostHeader style={{border:'none',margin:'0', padding:'0'}}>\r\n        <ReviewButton postId={postId} style={{ position:'absolute',left:'5px'}}type=\"primary\">후기 작성</ReviewButton>\r\n      </PostHeader>\r\n        {/* 리뷰글 리스트 */}\r\n          <ReviewList />\r\n        </TabPane>\r\n         </StyledTab>\r\n        \r\n        <PostFooter>\r\n            <HighLight style={{background:'white'}}>\r\n                {/* {numberWithCommas(postInfo.price)} */}\r\n                원</HighLight> {/* 제품 가격*/}\r\n                <div style={{'display':'flex', 'marginTop':'5px'}}>\r\n            {/* 게시글 찜 */}\r\n            <LikeButton onSubmit={onLikeSubmit}/>\r\n\r\n            {/* 채팅 */}\r\n            <ChatButton2 onClick={onClickChat}>쪽지 보내기</ChatButton2>\r\n            </div>\r\n        </PostFooter>\r\n      \r\n        \r\n        </PostComponent>\r\n        \r\n        </div>\r\n    );\r\n};\r\nexport default ShowPost;\r\nexport {ReviewButton, PostHeader};","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\BoardNav.jsx",["298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314"],"//제일 위에 보라색 nav bar 부분입니다.\r\nimport React, {useState} from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Img, StyledButton} from \"../components/MainBoards\";\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport { Layout, Menu, Button } from 'antd';\r\nimport {\r\n  MenuUnfoldOutlined,\r\n  MenuFoldOutlined,\r\n  UserOutlined,\r\n  VideoCameraOutlined,\r\n  UploadOutlined,\r\n  AppstoreTwoTone,\r\n  getTwoToneColor, setTwoToneColor,\r\n  RightCircleTwoTone,\r\n  LeftCircleTwoTone\r\n} from '@ant-design/icons';\r\nsetTwoToneColor('#EBCAFD');\r\nconst { Header, Sider, Content } = Layout;\r\n// nav 바를 감싸는 ul 태그 styled component 입니다.\r\nconst StyledNav=styled.ul` \r\n    height:120px;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:space-between;\r\n    list-style:none;\r\n    margin:0;\r\n    padding:0 20px 0 20px;\r\n    color: gray;\r\n    font-size:15px;\r\n    font-weight:bold;\r\n    text-align: center;\r\n    background:#ffffff\r\n    `;\r\n;\r\nconst StyledTitle=styled.li`\r\n    flex-basis: 80%;\r\n`;\r\nconst StyledIcon=styled.li`\r\n    flex-basis: 50px;\r\n    white-space: nowrap;\r\n`;\r\nconst StyledFirst=styled.li`\r\n    flex-basis: 70px;\r\n`;\r\n// 통신을 위한 수정\r\nconst BoardNav = ({showAddress, login})=>{\r\n    return(\r\n        <div>\r\n        <StyledNav>\r\n            <StyledFirst><li></li></StyledFirst>\r\n            <StyledTitle>\r\n            <li><Img src=\"Img/logo.png\" alt=\"로고\" />\r\n            <br/>{showAddress}\r\n            </li>\r\n            </StyledTitle>\r\n            <StyledIcon>\r\n                {/* {login?\r\n                (<li>\r\n                <StyledButton><a href=\"/write\"><Img src=\"img/plus.png\" alt=\"글 등록\"/></a></StyledButton>\r\n                <StyledButton><a href=\"http://localhost:7000/auth/logout\"><Img src=\"img/logout.png\" alt=\"로그아웃\"/></a></StyledButton>\r\n                </li>)\r\n                : \r\n                <a href = \"/login\"><StyledButton style={{marginRight:'30px',textAlign:'center',display:'flex',justifyContent:'space-evenly'}}><Img src=\"img/mypage.png\" alt=\"로그인\"/></StyledButton></a>\r\n                }    */}\r\n            </StyledIcon>\r\n        </StyledNav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BoardNav;","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\MainBoards.jsx",["315","316","317","318","319","320","321","322","323","324"],"import React, {useState, useEffect} from 'react';\r\nimport BoardNav from './BoardNav';\r\nimport styled from \"styled-components\";\r\nimport axios from 'axios';\r\nimport PostComponent from './PostComponent';\r\nimport PostComponent2 from './PostComponent2';\r\nimport { Link } from 'react-router-dom';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport '../index.css';\r\nimport '../App.css';\r\nimport { Layout, Menu, Button } from 'antd';\r\nimport {\r\n  MenuUnfoldOutlined,\r\n  MenuFoldOutlined,\r\n  UserOutlined,\r\n  VideoCameraOutlined,\r\n  UploadOutlined,\r\n  AppstoreTwoTone,\r\n  getTwoToneColor, setTwoToneColor,\r\n  RightCircleTwoTone,\r\n  LeftCircleTwoTone,\r\n  EditOutlined,\r\n  ScissorOutlined,\r\n  HeartOutlined,\r\n  NotificationOutlined,\r\n  TeamOutlined,\r\n  CommentOutlined \r\n} from '@ant-design/icons';\r\nsetTwoToneColor('#EBCAFD');\r\nconst { Header, Sider, Content } = Layout;\r\n//검색박스 전체 (회색 둥글둥글 모양) 스타일링입니다.\r\nconst SearchBox=styled.div`\r\n    position:relative;\r\n    background-color:#E5E5E5;\r\n    border-radius:20px;\r\n    margin:-15px 15px 10px 15px;\r\n    padding:5px 5px 5px 20px;\r\n    height:25px;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:flex-end;\r\n    `;\r\n//위의 검색박스 내의 input 창 스타일링입니다.\r\nconst Input=styled.input`\r\n    width:95%;\r\n    outline:none;\r\n    border:none;\r\n    border-radius:20px;\r\n    height:25px;\r\n    background:none;\r\n`;\r\n//이미지 태그 (각 버튼들에 들어가는 아이콘) 대신 쓰는 component입니다.\r\nexport const Img=styled.img`\r\n    max-width: 100%;\r\n    height:auto;\r\n`;\r\n//각 버튼들 (글 등록, )\r\nconst StyledButton=styled.button`\r\n    border:none;\r\n    margin:2px;\r\n    background:none;\r\n    height:30px;\r\n    width:30px;\r\n    padding-top:5px;\r\n    background:none;\r\n    color:#7D7D7D;\r\n    font-weight:bold;\r\n`;\r\n//게시글 리스트 component입니다.\r\nconst List=styled.div`\r\n    font-family:'KoddiUDOnGothic-Regular';\r\n`;\r\n//메뉴 스타일\r\nconst MenuStyled=styled.div`\r\n    display:flex;\r\n    justify-content:space-evenly;\r\n    \r\n`;\r\n//스크롤 할때 상단 고정\r\nconst PageStyled=styled.div`\r\n    position: sticky;\r\n    top: 0px;\r\n    z-index: 1;\r\n    background-color: white;\r\n`;\r\n//메뉴바\r\nconst MBar = styled(Menu)`\r\n// .ant-menu > .ant-menu-item:hover,\r\n// .ant-menu > .ant-menu-submenu:hover,\r\n// .ant-menu > .ant-menu-item-active,\r\n// .ant-menu> .ant-menu-submenu-active,\r\n// .ant-menu > .ant-menu-item-open,\r\n// .ant-menu> .ant-menu-submenu-open,\r\n// .ant-menu > .ant-menu-item-selected,\r\n// .ant-menu > .ant-menu-submenu-selected {\r\n//   color: red;\r\n//   border-bottom: 2px solid red;\r\n// }\r\n.ant-menu-item-selected {\r\n    background-color:  #EBCAFD !important;\r\n    color: #ffffff;\r\n  }\r\n  .ant-menu-item:hover {\r\n    background-color:  #EBCAFD !important;\r\n    color: #ffffff;\r\n  }\r\n  .ant-menu-item-active {\r\n    background-color:  #EBCAFD !important;\r\n    color: #ffffff;\r\n  }\r\n  .ant-menu-item-open{\r\n    background-color:  #EBCAFD !important;\r\n    color: #ffffff;\r\n  }\r\n  .ant-menu-item-selected::after {\r\n    border-right: 2px solid #A352CC;\r\n  }\r\n  .ant-menu-title-content>a{\r\n      &:hover{\r\n      color:#ffffff;\r\n      }\r\n  }\r\n  \r\n`;\r\n\r\n\r\n// 변경 ---------------------------------------------------\r\n// 로그인 상태를 서버에서 구분 후, 그에 맞는 게시글을 클라이언트로 전송\r\nconst BorrowBoard=()=>{\r\n    const [login, setLogin]=useState(''); // 현재 로그인 상태\r\n    const [showAddress, setShowAddress]=useState(''); //현재 사용자의 주소\r\n    const [searchText,setSearchText]=useState(''); //검색 input 창에 입력되는 text\r\n    const [lendYouList,setLendYouList]=useState([]); //빌려줄게요 리스트. 백엔드에서 가져온 데이터 담는 배열\r\n    const [borrowMeList,setBorrowMeList]=useState([]); //빌려주세요 리스트\r\n\r\n    const [fontStyle1, setFontStyle1]=useState({color: \"black\", fontWeight:\"bold\"});\r\n    const [fontStyle2, setFontStyle2]=useState({color: \"gray\"});\r\n    const [lendBtn,setLendBtn]=useState(true); //현재 빌려줄게요 게시판인지 확인\r\n    const [borrowBtn,setBorrowBtn]=useState(false); //현재 빌려주세요 게시판인지 확인\r\n    const [search,setSearch]=useState(false); //검색 버튼이 눌렸는지 확인하는 변수\r\n    const [filteredPost,setFilteredPost]=useState([]); //검색한 post 를 담는 배열\r\n    \r\n    const onClickMenu1 = (e) => {e.preventDefault(); setFontStyle1({color: \"black\", fontWeight:\"bold\"}); setFontStyle2({color: \"gray\"}); \r\n    setLendBtn(true); setBorrowBtn(false); setSearch(false); };\r\n    const onClickMenu2 = (e) => {e.preventDefault(); setFontStyle1({color: \"gray\"}); setFontStyle2({color: \"black\",  fontWeight:\"bold\"});\r\n    setBorrowBtn(true);  setLendBtn(false); setSearch(false); };\r\n    //메뉴버튼 여닫는 toggle 관련 버튼\r\n    const [collapsed,setCollpased] = useState(true); \r\n    const toggle=()=>{\r\n        setCollpased(!collapsed);\r\n    };\r\n    // 유저 정보 가져오기\r\n    const getUser = () => {\r\n        return axios.get(\"http://localhost:7000/auth\", { withCredentials: true })\r\n    };\r\n    // 빌려줄게요 게시글 가져오기\r\n    const getLendYou = () => {\r\n        return axios.get(\"http://localhost:7000/post/lend\", { withCredentials: true })\r\n    };\r\n    // 빌려주세요 게시글 가져오기\r\n    const getBorrowMe = () => {\r\n        return axios.get(\"http://localhost:7000/post/borrow\", { withCredentials: true })\r\n    };\r\n    //각 게시판의 글을 가져올때 사용하는 통신입니다.\r\n    useEffect(() => {  //처음 페이지가 실행될 때, 로그인 상태바뀔때, 사용자 주소 바뀔때 실행됨\r\n        axios.all([getLendYou(), getBorrowMe(), getUser()]) // axios.all로 여러 개의 request를 보내고\r\n            .then(axios.spread((lendResp , borrowResp, user) => { // response를 spread로 받는다. \r\n                setLendYouList(lendResp.data);\r\n                setBorrowMeList(borrowResp.data);\r\n                if(user.data) {\r\n                    setShowAddress(user.data.address);\r\n                    setLogin(true);\r\n                } else {\r\n                    setLogin(false);\r\n                }\r\n            }))\r\n            .catch((error) => {\r\n                console.error(error)\r\n            })\r\n    }, []);\r\n    // ---------------------------------------------------\r\n    const searchChange=(e)=>{//검색창에 text 입력했을 때 입력한 text를 검색 text에 넣어줌\r\n        setSearchText(e.target.value);\r\n    };\r\n\r\n    const btnClick=()=>{ //검색창 버튼 클릭했을 때 뜨는 버튼\r\n        //filtered: 검색 결과 게시물들이 담기는 배열\r\n        if(lendBtn){\r\n            const filtered = lendYouList.filter((post) =>\r\n                post.email.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\r\n            setFilteredPost(filtered);\r\n        console.log(filtered);\r\n        } else{\r\n            const filtered = borrowMeList.filter((post) =>\r\n                post.email.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\r\n            setFilteredPost(filtered);\r\n            console.log(filtered);\r\n        }\r\n        setSearchText('');\r\n        setSearch(true);\r\n    };\r\n\r\n    const onKeyPress=(e)=>{\r\n        if(e.key ==='Enter'){\r\n            btnClick();\r\n        }\r\n    };\r\n\r\n    const numberWithCommas=(x)=> {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n    return(\r\n    <div>\r\n          <Layout>\r\n        <Sider trigger={null} collapsible collapsed={collapsed} style={{background:'#ffffff', height:'100'}}>\r\n          <MBar  mode=\"inline\" style={{color:'#7D7D7D'}}>\r\n          {!login ? \r\n          <>\r\n           <Menu.Item key=\"1\" icon={<UserOutlined />} >\r\n           <a href=\"http://localhost:7000/auth/logout\"> 로그아웃 </a>\r\n           {/* <Link to=\"/auth/logout\">로그아웃</Link> */}\r\n            </Menu.Item>\r\n            <Menu.Item key=\"2\" icon={<ScissorOutlined />}>\r\n             내 정보 수정\r\n            </Menu.Item>\r\n            <Menu.Item key=\"3\" icon={<EditOutlined />}>\r\n              게시글 작성\r\n            </Menu.Item>\r\n            <Menu.Item key=\"4\" icon={<CommentOutlined />}>\r\n             내 쪽지함\r\n            </Menu.Item>\r\n            <Menu.Item key=\"5\" icon={<HeartOutlined />}>\r\n            내가 찜한 물품\r\n            </Menu.Item>\r\n            </>\r\n          : <>\r\n          <Menu.Item key=\"1\" icon={<UserOutlined />}  >\r\n          <a href = \"/login\" >로그인 / 회원가입</a> \r\n           </Menu.Item>\r\n           </>}  \r\n           \r\n          </MBar>\r\n        </Sider>\r\n        <Layout className=\"site-layout\">\r\n        <BoardNav showAddress={showAddress} login={login} boardName=\"게시판\"/>    \r\n        <Header className=\"site-layout-background\" style={{ position:'absolute', top:'10px', padding: '20px', background:'#ffffff',  fontSize:'30px' }}>\r\n            {React.createElement(collapsed ? LeftCircleTwoTone : RightCircleTwoTone, {\r\n              className: 'trigger',\r\n              onClick: toggle,\r\n            })}\r\n          </Header>\r\n          <Content\r\n            className=\"site-layout-background\"\r\n            style={{position: 'sticky',\r\n                top: '0px',\r\n                zIndex: 1,\r\n                backgroundColor: 'white'}}\r\n          >\r\n           <PageStyled>\r\n        <br/>\r\n        <SearchBox>\r\n        <Input value={searchText} onChange={searchChange} onKeyPress={onKeyPress}/>\r\n        {searchText&&<StyledButton onClick={btnClick} color=\"#E5E5E5\"><Img src=\"img/search.png\" alt=\"검색\"/></StyledButton>}\r\n        {/* 검색창에 입력된 text 내용이 있을 경우 검색 버튼이 활성화됩니다. */}\r\n        </SearchBox>\r\n        <MenuStyled>\r\n        <a href=\"/\" onClick={onClickMenu1} style={fontStyle1}>빌려줄게요</a>\r\n        <a href=\"/\" onClick={onClickMenu2} style={fontStyle2}>빌려주세요</a>\r\n        </MenuStyled>\r\n        <hr></hr>\r\n    </PageStyled>\r\n    <List>\r\n    {(!search&&lendBtn)&&lendYouList.map((data) => { //빌려줄게요 게시판 \r\n        return (<Link to={`post/${data.id}`}>\r\n        <PostComponent2\r\n            image={data.img}\r\n            title={data.title}\r\n            postDate={data.date} \r\n            writerAddress={data.address} \r\n            startDate={data.start_date}\r\n            endDate={data.end_date}\r\n            cost={numberWithCommas(Number(data.price))}\r\n            key={data.id}\r\n            /></Link>);\r\n        }\r\n    )}\r\n    {(search&&lendBtn)&&filteredPost.map((data)=>{ //빌려줄게요 게시판에서 검색\r\n        return (<Link to={`post/${data.id}`}>\r\n        <PostComponent2\r\n            image={data.img}\r\n            title={data.title}\r\n            postDate={data.date} \r\n            writerAddress={data.address}  \r\n            startDate={data.start_date}\r\n            endDate={data.end_date}\r\n            cost={numberWithCommas(Number(data.price))}\r\n            key={data.id}\r\n            /></Link>);\r\n        }\r\n    )}\r\n    {(!search&&borrowBtn)&&borrowMeList.map((data)=> { //빌려주세요 게시판\r\n        return (<Link to={`post/${data.id}`}>\r\n        <PostComponent\r\n            title={data.title}\r\n            postDate={data.date} \r\n            writerAddress={data.address} \r\n            startDate={data.start_date}\r\n            endDate={data.end_date}\r\n            cost={numberWithCommas(Number(data.price))}\r\n            key={data.id}\r\n            /></Link>); \r\n        }\r\n    )}\r\n    {(search&&borrowBtn)&&filteredPost.map((data)=>{ //빌려주세요 게시판에서 검색\r\n        return (<Link to={`post/${data.id}`}>\r\n        <PostComponent\r\n            title={data.title}\r\n            postDate={data.date} \r\n            writerAddress={data.address} \r\n            startDate={data.start_date}\r\n            endDate={data.end_date}\r\n            cost={numberWithCommas(Number(data.price))}\r\n            key={data.id}\r\n            /></Link>);\r\n        }\r\n    )}\r\n    </List>\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    \r\n    </div>\r\n    );\r\n};\r\n\r\nexport default BorrowBoard;\r\nexport {StyledButton};","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\FindId.jsx",["325"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport styled from \"styled-components\";\r\n\r\nconst Page=styled.body`\r\n    margin:0;\r\n    padding:20px;\r\n    display:flex;\r\n    flex-direction:column;\r\n    align-items:center;\r\n`;\r\nconst InputComponent=styled.input`\r\n    border:1px solid #E5E5E5;\r\n    outline:none;\r\n    ::placeholder{\r\n        color:#E5E5E5;\r\n    }\r\n    border-radius: 15px;\r\n    width:100%;\r\n    height:35px;\r\n`;\r\n\r\nconst SubmitButton=styled.button`\r\n    margin-top:30px;\r\n    border:none;\r\n    width:350px;\r\n    height:40px;\r\n    background-color:#A352CC;\r\n    border-radius:30px;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:18px;\r\n    text-align:center;\r\n`;\r\n\r\nconst Message=styled.input`\r\n    border: none;\r\n    background-color: white;\r\n    color: red;\r\n    width: 100%;\r\n    text-align: center;\r\n    margin-top: 30px;\r\n`;\r\n\r\nclass FindId extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          result : false,\r\n          secret : \"\",\r\n          user_data : \"\",\r\n          change : false,\r\n      }\r\n  }\r\n  \r\n    _searchId = async function() {\r\n        \r\n        const email = document.getElementsByName('search_id_email')[0].value.trim();\r\n        \r\n        if(!(email)){\r\n            document.getElementsByName('message')[0].value = '이메일을 입력해주세요';\r\n            return;\r\n        }else if(!/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i.test(email)){\r\n            //이메일 형식에 맞는 값이 들어왔는지 확인합니다.\r\n            document.getElementsByName('message')[0].value = '올바르지 않은 이메일입니다. 다시 입력해주세요.';\r\n            return;\r\n        }\r\n\r\n        console.log(\"email: \" + email);\r\n\r\n        // const obj = { email : email }\r\n        const res = await axios('/search/id', {\r\n            method : 'POST',\r\n            data : email,\r\n        })\r\n      \r\n      if(res.data === false) {\r\n        document.getElementsByName('message')[0].value = '일치하는 회원정보가 없습니다';\r\n        return;\r\n      }\r\n\r\n      alert(res.data.result[0].email + '로 아이디가 수신되었습니다.');\r\n      return this.setState({ \r\n        result : true, \r\n        secret : res.data.secret, \r\n        user_data : res.data.result[0]\r\n      })\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n\r\n        <Page>\r\n        <p style={{'color':'gray', 'fontSize':'13px'}}>회원가입 시 등록한 이메일을 아래에 입력하세요.</p>\r\n        <br/>\r\n        <form>\r\n\r\n        <InputComponent \r\n            name=\"email\"\r\n            label=\"이메일\" \r\n            placeholder=\"이메일\"\r\n            type='text' \r\n            maxLength='20'\r\n            name='search_id_email'\r\n        /> \r\n        <div>\r\n        <SubmitButton type='button' value='아이디찾기' name='search_id_submit'\r\n            onClick={() => this._searchId()}\r\n        >\r\n        아이디 찾기\r\n        </SubmitButton>\r\n        </div>\r\n        </form>\r\n        <Message name='message' disabled/>\r\n        </Page>\r\n\r\n \r\n      );\r\n    }\r\n}\r\n\r\n\r\nexport default FindId;","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\Scrap.jsx",["326","327","328","329","330","331"],"import React, {useState, useEffect} from 'react';\r\nimport BoardNav from './BoardNav';\r\nimport styled from \"styled-components\";\r\nimport axios from 'axios';\r\nimport PostComponent from './PostComponent';\r\nimport PostComponent2 from './PostComponent2';\r\nimport { Link } from 'react-router-dom';\r\nimport { findAllByTestId } from '@testing-library/react';\r\n\r\n//검색박스 전체 (회색 둥글둥글 모양) 스타일링입니다.\r\nconst SearchBox=styled.div`\r\n\r\n    position:relative;\r\n    background-color:#E5E5E5;\r\n    border-radius:20px;\r\n    margin:-15px 15px 10px 15px;\r\n    padding:5px 5px 5px 20px;\r\n    height:25px;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:flex-end;\r\n\r\n    `;\r\n//위의 검색박스 내의 input 창 스타일링입니다.\r\nconst Input=styled.input`\r\n    width:95%;\r\n    outline:none;\r\n    border:none;\r\n    border-radius:20px;\r\n    height:25px;\r\n    background:none;\r\n`;\r\n\r\n//이미지 태그 (각 버튼들에 들어가는 아이콘) 대신 쓰는 component입니다.\r\nexport const Img=styled.img`\r\nmax-width: 100%;\r\nheight:auto;\r\n`;\r\n//각 버튼들 (글 등록, )\r\nconst StyledButton=styled.button`\r\n    border:none;\r\n    margin:2px;\r\n    background:none;\r\n    height:30px;\r\n    width:30px;\r\n    padding-top:5px;\r\n    background:none;\r\n    color:#7D7D7D;\r\n    font-weight:bold;\r\n`;\r\n//게시글 리스트 component 입니다.\r\nconst List=styled.div`\r\nfont-family:'KoddiUDOnGothic-Regular';\r\n`;\r\n\r\n//메뉴 스타일\r\nconst MenuStyled=styled.div`\r\n    display:flex;\r\n    justify-content:space-evenly;\r\n    \r\n`;\r\n\r\n//스크롤 할때 상단 고정\r\nconst PageStyled=styled.div`\r\n    position: sticky;\r\n    top: 0px;\r\n    z-index: 1;\r\n    background-color: white;\r\n`;\r\n\r\nconst Scrap=()=>{\r\n    const [showAddress, setShowAddress]=useState(''); //현재 사용자의 주소\r\n    const [searchText,setSearchText]=useState(''); //검색 input 창에 입력되는 text\r\n    const [lendYouList,setLendYouList]=useState([]); //빌려줄게요 리스트. 백엔드에서 가져온 데이터 담는 배열\r\n    const [borrowMeList,setBorrowMeList]=useState([]); //빌려주세요 리스트\r\n\r\n    const [fontStyle1, setFontStyle1]=useState({color: \"black\", fontWeight:\"bold\"});\r\n    const [fontStyle2, setFontStyle2]=useState({color: \"gray\"});\r\n    const [lendBtn,setLendBtn]=useState(true); //현재 빌려줄게요 게시판인지 확인\r\n    const [borrowBtn,setBorrowBtn]=useState(false); //현재 빌려주세요 게시판인지 확인\r\n    const [search,setSearch]=useState(false); // 검색 버튼이 눌렸는지 확인하는 변수\r\n\r\n    const [filteredPost,setFilteredPost]=useState([]); //검색한 post 를 담는 배열\r\n    const onClickMenu1 = (e) => {e.preventDefault(); setFontStyle1({color: \"black\", fontWeight:\"bold\"}); setFontStyle2({color: \"gray\"}); \r\n    setLendBtn(true); setBorrowBtn(false); setSearch(false); };\r\n    const onClickMenu2 = (e) => {e.preventDefault(); setFontStyle1({color: \"gray\"}); setFontStyle2({color: \"black\",  fontWeight:\"bold\"});\r\n    setBorrowBtn(true);  setLendBtn(false); setSearch(false); };\r\n    const [isLogined,setIsLogined]=useState(false);\r\n    \r\n    // 빌려줄게요 게시판 찜목록입니다.\r\n    const getLendYou=async (loginChk) => {\r\n        if(loginChk){ //로그인이 되어있는 상태에서는 사용자가 찜한 목록\r\n        return axios.get(\"https://reqres.in/api/users?page=2\", {//테스트용 url 입니다. 바꿔주세요.\r\n                    params: {\r\n                    //user 정보가 없어서 오류 나서 주석처리해놓았습니다. 아래주석 풀어주세요.\r\n                    // user.showAddress:showAddress, //사용자와 같은 동 내에서 쓴 글만 보여줌\r\n                    board:1, ////빌려줄게요 게시판 코드\r\n                    }\r\n                });\r\n            }\r\n        else{//로그인이 되어있지 않은 상태\r\n                return axios.get(\"https://reqres.in/api/login\", {//테스트용 url 입니다. 바꿔주세요.\r\n                            params: {\r\n                            board:1, //빌려줄게요 게시판 코드\r\n                            }\r\n                        });\r\n        }\r\n    };\r\n     // 빌려주세요 게시판 찜목록입니다.\r\n    const getBorrowMe=async (loginChk) => {\r\n        if(loginChk){ //로그인이 되어있는 상태에서는 사용자가 찜한 목록 \r\n        return axios.get(\"https://reqres.in/api/users?page=2\", {//테스트용 url 입니다. 바꿔주세요.\r\n        params: {\r\n        //user 정보가 없어서 오류 나서 주석처리해놓았습니다. 아래주석 풀어주세요.\r\n        // user.showAddress:showAddress, //사용자와 같은 동 내에서 쓴 글만 보여줌\r\n        //여기에서 user는 게시판에 글쓴 사람이고, user.address는 그 게시자들의 주소를 말합니다.\r\n        board:2, //빌려주세요 게시판 코드\r\n        }\r\n    });\r\n    }\r\n    else{ //로그인이 되어있지 않은 상태\r\n        return axios.get(\"https://reqres.in/api/login\", {//테스트용 url 입니다. 바꿔주세요.\r\n        params: {\r\n        board:2, //빌려주세요 게시판 코드\r\n        }\r\n    });       \r\n    }\r\n    };\r\n     //로그인 상태를 확인하기 위한 통신입니다.\r\n    useEffect(() => { //처음 페이지가 실행될 때, 로그인 상태바뀔때, 사용자 주소 바뀔때 실행됨\r\n        axios.get(\"https://reqres.in/api/login\") //로그인 상태를 확인하기 위한 통신 url 입력해주세요\r\n        .then((response) => { //로그인한 상태일때\r\n            setIsLogined(true); \r\n            return(\r\n                //사용자 주소 가져오기\r\n                axios.get(\"https://reqres.in/api/users?page=2\") //현재 로그인한 사용자 정보 url 입력해주세요\r\n                    .then((data) => {\r\n                        setShowAddress(showAddress); //지금 로그인한 사용자 주소를 가져옵니다.\r\n                    })\r\n                    .catch( e => console.log(e))\r\n            );\r\n        })//로그인한 안한 상태일때\r\n        .catch( e => {\r\n            console.log(e);\r\n            setIsLogined(false);\r\n        });\r\n     }, [isLogined, showAddress]); \r\n\r\n     //각 게시판의 글을 가져올때 사용하는 통신입니다.\r\n    useEffect(() => {  //처음 페이지가 실행될 때, 로그인 상태바뀔때, 사용자 주소 바뀔때 실행됨\r\n    if(!isLogined){ //로그인 하지 않은 상황에서는 아무글도 안보임 \r\n    axios.all([getLendYou(false),getBorrowMe(false)]) // axios.all로 여러 개의 request를 보내고\r\n    .then(axios.spread(({lendScrapResp}, {borrowScrapResp}) => { // response를 spread로 받는다. \r\n        //lendScrapResp: 빌려줄게요 게시판 찜목록 / borrowScrapResp: 빌려주세요 게시판 찜목록\r\n        setLendYouList(lendScrapResp.data.data);\r\n        console.log(lendScrapResp);\r\n        setBorrowMeList(borrowScrapResp.data.data);\r\n        console.log(borrowScrapResp)\r\n    })).catch((error) => {\r\n        console.error(error)\r\n    })}\r\n    else if(isLogined){//로그인 한 상황에서는 사용자가 찜한 목록 \r\n        axios.all([getLendYou(true),getBorrowMe(true)]) // axios.all로 여러 개의 request를 보내고\r\n        .then(axios.spread(({lendScrapResp}, {borrowScrapResp}) => { // response를 spread로 받는다. \r\n            //lendScrapResp: 빌려줄게요 게시판 찜목록 / borrowScrapResp: 빌려주세요 게시판 찜목록\r\n            setLendYouList(lendScrapResp.data.data);\r\n            console.log(lendScrapResp);\r\n            setBorrowMeList(borrowScrapResp.data.data);\r\n            console.log(borrowScrapResp)\r\n        })).catch((error) => {\r\n            console.error(error)\r\n        })\r\n    }\r\n    }, [isLogined, showAddress]);\r\n        \r\n    //아래 코드는 주석 풀지 않으셔도 됩니다.\r\n    // 현재주소 받기 \r\n    // useEffect(() => { //처음 페이지가 실행될 때만 실행된다\r\n    //     axios.get(\"url\") //통신하기 위한 url 을 입력해주세요\r\n    //     .then((data) => {\r\n    //         setShowAddress(data.showAddress);\r\n    //     })\r\n    //     .catch( e => console.log(e));\r\n    //  }, []);\r\n\r\n    const searchChange=(e)=>{//검색창에 text 입력했을 때 입력한 text를 검색 text에 넣어줌\r\n        setSearchText(e.target.value);\r\n    };\r\n    const btnClick=()=>{ //검색창 버튼 클릭했을 때 뜨는 버튼\r\n        //filtered: 검색 결과 게시물들이 담기는 배열\r\n    if(lendBtn){\r\n    const filtered = lendYouList.filter((post) =>\r\n        post.email.toLowerCase().indexOf(searchText.toLowerCase()) > -1\r\n    );\r\n    setFilteredPost(filtered);\r\n    console.log(filtered);\r\n    }\r\n    else{\r\n    const filtered = borrowMeList.filter((post) =>\r\n    post.email.toLowerCase().indexOf(searchText.toLowerCase()) > -1\r\n    );\r\n    setFilteredPost(filtered);\r\n    console.log(filtered);\r\n    }\r\n    setSearchText('');\r\n    setSearch(true);\r\n\r\n    };\r\n    const onKeyPress=(e)=>{\r\n        if(e.key ==='Enter'){\r\n            btnClick();\r\n        }\r\n    };\r\n    return(\r\n    <>\r\n   {/* <BoardNav showAddress={showAddress} login={isLogined} boardName=\"게시판\" />     */}\r\n    <PageStyled>\r\n        <br/>\r\n{/* \r\n        <SearchBox>\r\n        <Input value={searchText} onChange={searchChange} onKeyPress={onKeyPress}/>\r\n        {searchText&&<StyledButton onClick={btnClick} color=\"#E5E5E5\"><Img src=\"img/search.png\" alt=\"검색\"/></StyledButton>}\r\n        </SearchBox> */}\r\n        <p style={{fontSize:'16px', color:'#A352CC' ,fontWeight:'bolder', textAlign:'center', marginTop:'-5px'}}>스크랩</p>\r\n        <br/>\r\n        \r\n        <MenuStyled>\r\n        <a href=\"/\" onClick={onClickMenu1} style={fontStyle1}>빌려줄게요</a>\r\n        <a href=\"/\" onClick={onClickMenu2} style={fontStyle2}>빌려주세요</a>\r\n        </MenuStyled>\r\n        <hr></hr>\r\n    </PageStyled>\r\n    <List>\r\n    {(!search&&lendBtn)&&lendYouList.map((data) => { //빌려줄게요 게시판(default)\r\n                return ( <Link to={`/ShowPost/${data.no}`}>\r\n                    <PostComponent2\r\n                        image={data.image}\r\n                        title={data.title}\r\n                        postDate={data.postDate} \r\n                        writerAddress={data.user.showAddress} \r\n                        startDate={data.startDate}\r\n                        endDate={data.endDate}\r\n                        cost={data.cost}\r\n                        key={data.id}\r\n                        />\r\n                        </Link>\r\n                    );\r\n                    \r\n                //아래는 테스트용 더미 데이터입니다. 필요없다면 지워주세요.\r\n                // return (<PostComponent2\r\n                //     image={data.avatar}\r\n                //     title={data.first_name}\r\n                //     postDate=\"2021/08/19\"\r\n                //     writerAddress=\"등촌3동\" \r\n                //     startDate=\"8/12\"\r\n                //     endDate=\"8/30\"\r\n                //     cost=\"20,000\"\r\n                //     key={data.id}\r\n                //     />\r\n                // );\r\n                })}\r\n    {(search&&lendBtn)&&filteredPost.map((data)=>{ //빌려줄게요 게시판에서 검색한 경우 나오는 post\r\n                      return (<Link to={`/ShowPost/${data.no}`}>\r\n                        <PostComponent2\r\n                        image={data.image}\r\n                        title={data.title}\r\n                        postDate={data.postDate} \r\n                        writerAddress={data.user.showAddress}  \r\n                        startDate={data.startDate}\r\n                        endDate={data.endDate}\r\n                        cost={data.cost}\r\n                        key={data.id}\r\n                        /></Link>\r\n                    );\r\n                    //아래는 테스트용 더미 데이터입니다. 필요없다면 지워주세요.\r\n                    // return (<PostComponent2\r\n                    //     image={data.avatar}\r\n                    //     title={data.first_name}\r\n                    //     postDate=\"2021/08/19\"\r\n                    //     writerAddress=\"강서구 등촌3동\" \r\n                    //     startDate=\"8/12\"\r\n                    //     endDate=\"8/30\"\r\n                    //     cost=\"20,000\"\r\n                    //     key={data.id}\r\n                    //     />\r\n                    // );\r\n    })}\r\n    {(!search&&borrowBtn)&&borrowMeList.map((data)=> { //빌려주세요 게시판(default)\r\n            return ( <Link to={`/ShowPost/${data.no}`}>\r\n                        <PostComponent\r\n                        title={data.title}\r\n                        postDate={data.postDate} \r\n                        writerAddress={data.user.showAddress} \r\n                        startDate={data.startDate}\r\n                        endDate={data.endDate}\r\n                        cost={data.cost}\r\n                        key={data.id}\r\n                        />\r\n                    </Link>   \r\n                    );\r\n            //아래는 테스트용 더미 데이터입니다. 필요없다면 지워주세요.\r\n            // return (<PostComponent\r\n            //     title={data.email}\r\n            //     postDate=\"2021/08/19\"\r\n            //     writerAddress=\"미추홀구 용현동\" \r\n            //     startDate=\"8/12\"\r\n            //     endDate=\"8/30\"\r\n            //     cost=\"20,000\"\r\n            //     key={data.id}\r\n            //     />\r\n            // );\r\n            \r\n    })}\r\n     {(search&&borrowBtn)&&filteredPost.map((data)=>{ //빌려주세요 게시판에서 검색한 경우 나오는 post\r\n            return (<Link to={`/ShowPost/${data.no}`}>\r\n                <PostComponent\r\n                title={data.title}\r\n                postDate={data.postDate} \r\n                writerAddress={data.user.showAddress} \r\n                startDate={data.startDate}\r\n                endDate={data.endDate}\r\n                cost={data.cost}\r\n                key={data.id}\r\n                />\r\n                </Link>\r\n            );\r\n            //아래는 테스트용 더미 데이터입니다. 필요없다면 지워주세요.\r\n            // return (<PostComponent\r\n            //     title={data.email}\r\n            //     postDate=\"2021/08/19\"\r\n            //     writerAddress=\"미추홀구 용현동\" \r\n            //     startDate=\"8/12\"\r\n            //     endDate=\"8/30\"\r\n            //     cost=\"20,000\"\r\n            //     key={data.id}\r\n            //     />\r\n            // );\r\n    })}\r\n    </List>\r\n    </>\r\n    );\r\n};\r\n\r\nexport default Scrap;\r\nexport {StyledButton};","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\Update.jsx",[],"C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\FindPw.jsx",["332","333"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport styled from \"styled-components\";\r\n\r\nconst Page=styled.body`\r\n    margin:0;\r\n    padding:20px;\r\n    display:flex;\r\n    flex-direction:column;\r\n    align-items:center;\r\n`;\r\nconst InputComponent=styled.input`\r\n    border:1px solid #E5E5E5;\r\n    outline:none;\r\n    ::placeholder{\r\n        color:#E5E5E5;\r\n    }\r\n    border-radius: 15px;\r\n    width:100%;\r\n    height:35px;\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nconst SubmitButton=styled.button`\r\n    margin-top:30px;\r\n    border:none;\r\n    width:350px;\r\n    height:40px;\r\n    background-color:#A352CC;\r\n    border-radius:30px;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:18px;\r\n    text-align:center;\r\n`;\r\nconst Message=styled.input`\r\n    border: none;\r\n    background-color: white;\r\n    color: red;\r\n    width: 100%;\r\n    text-align: center;\r\n    margin-top: 30px;\r\n`;\r\n\r\nclass FindPw extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          result : false,\r\n          secret : \"\",\r\n          user_data : \"\",\r\n          change : false,\r\n      }\r\n  }\r\n  \r\n    _searchPassword = async function() {\r\n        \r\n        const email = document.getElementsByName('search_pw_email')[0].value.trim();\r\n        const id = document.getElementsByName('search_pw_id')[0].value.trim();\r\n\r\n        // const user_id = this.state.user_data.id;\r\n\r\n        if(!(email&&id)){\r\n            document.getElementsByName('message')[1].value = '모든 항목을 입력해주세요';\r\n            return;\r\n        }else if(!/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i.test(email)){\r\n            //이메일 형식에 맞는 값이 들어왔는지 확인합니다.\r\n            document.getElementsByName('message')[1].value = '올바르지 않은 이메일입니다. 다시 입력해주세요.';\r\n            return;\r\n        }\r\n\r\n        const obj = { id: id , email : email}\r\n        console.log(obj);\r\n\r\n        const res = await axios('/search/pw', {\r\n            method : 'POST',\r\n            data : obj,\r\n        })\r\n\r\n      if(res.data === false) {\r\n        document.getElementsByName('message')[0].value = '일치하는 회원정보가 없습니다.';\r\n        return;\r\n      }\r\n  \r\n      document.getElementsByName('search_pw_id')[0].value = '';\r\n  \r\n      alert(res.data.result[0].email + '로 임시 비밀번호가 수신되었습니다.');\r\n      return this.setState({ \r\n        result : true, \r\n        secret : res.data.secret, \r\n        user_data : res.data.result[0]\r\n      })\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n\r\n        <Page>\r\n        <p style={{'color':'gray', 'fontSize':'13px'}}>회원가입 시 등록한 이메일과 아이디를 아래에 입력하세요.</p>\r\n        <br/>\r\n        <form>\r\n\r\n        <InputComponent \r\n            name=\"id\"\r\n            label=\"아이디\" \r\n            placeholder=\"아이디\"\r\n            type='text' \r\n            maxLength='20'\r\n            name='search_pw_id'\r\n        /> \r\n        <InputComponent \r\n            name=\"email\"\r\n            label=\"이메일\" \r\n            placeholder=\"이메일\"\r\n            type='text' \r\n            name='search_pw_email'\r\n        /> \r\n        <div>\r\n        <SubmitButton type='button' value='비밀번호찾기' name='search_pw_submit'\r\n            onClick={() => this._searchPassword()}\r\n        >\r\n        비밀번호 찾기\r\n        </SubmitButton>\r\n        </div>\r\n        </form>\r\n        <Message name='message' disabled/>\r\n        </Page>\r\n\r\n \r\n      );\r\n    }\r\n}\r\n\r\n\r\nexport default FindPw;","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\SignUp_kakao.jsx",["334","335"],"import React, {useCallback, useState} from 'react';\r\nimport Logo from './Logo';\r\nimport axios from 'axios';\r\nimport Postcode from '@actbase/react-daum-postcode';\r\nimport Modal from 'react-modal';\r\nimport styled from \"styled-components\";\r\n\r\nconst Page=styled.body`\r\n    margin:0;\r\n    padding:20px;\r\n    display:flex;\r\n    flex-direction:column;\r\n    align-items:center;\r\n`;\r\nconst InputComponent=styled.input`\r\n    border:none;\r\n    outline:none;\r\n    border-bottom: 1px solid #E5E5E5;\r\n    ::placeholder{\r\n        color:#E5E5E5;\r\n    }\r\n    width:250px;\r\n    height:40px;\r\n`;\r\nconst Label=styled.h2`  \r\nfont-size:14px;\r\ncolor:#7D7D7D;\r\nfont-weight:600;\r\n`;\r\n\r\nconst SubmitButton=styled.button`\r\n    margin-top:30px;\r\n    border:none;\r\n    width:350px;\r\n    height:50px;\r\n    background-color:#A352CC;\r\n    border-radius:5px;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:18px;\r\n    text-align:center;\r\n`;\r\nconst Btn=styled.button`\r\n    border: 1px solid #EBCAFD;\r\n    background-color:white;\r\n    color:#EBCAFD;\r\n    width:80px;\r\n    height:30px;\r\n    border-radius:5px;\r\n    margin-left:12px;\r\n`;\r\nconst CloseBtn=styled.div`\r\n    position:fixed;\r\n    top:0;\r\n    right:0;\r\n    height:20px;\r\n    margin:5px 10px 0px 0px;\r\n    padding:auto;\r\n    background:none;\r\n    color:#E5E5E5;\r\n    width:20px;\r\n    font-weight:bold;\r\n    text-align:center;\r\n    border-radius:2px;\r\n    cursor:pointer;\r\n`;\r\nconst SignUp_kakao=()=>{\r\n    const useInput = (initValue = null) =>{\r\n        const [value,setter] = useState(initValue);\r\n       \r\n        const handler = (e) => {\r\n            if(e) setter(e.target.value);\r\n            else setter(initValue);\r\n        };\r\n        return [value,handler];\r\n    };\r\n   \r\n\r\n  \r\n    const [nickname,setNickname] = useInput('');\r\n    const [showAddress,setShowAddress] =  useState('');\r\n    const [fullAddress,setFullAddress]=useState('');\r\n    //주소의 경우, 사용자에게 보여주는 것은 showAddress로 '##동'으로만 나오고, full 주소는 fullAddress에 저장됩니다.\r\n    const [chkNickname,setChkNickname]=useState(false);\r\n    // const pwChkRef=useRef();\r\n    // const pwRef=useRef();\r\n    \r\n    const onSubmitForm=(e)=>{\r\n        e.preventDefault();\r\n        if(!(nickname&&fullAddress)){\r\n            alert(`모든 문항을 입력해주세요`);\r\n            return;\r\n        }\r\n        else{\r\n        //  입력하지 않은 문항 알려주는 것 추가 예정\r\n        if(!chkNickname){\r\n            alert('닉네임 중복확인을 완료해주세요.');\r\n            return;\r\n        }\r\n        axios.post('url을 입력해주세요', {\r\n                nickname:nickname,\r\n                address:fullAddress,\r\n                showAddress:showAddress,\r\n            }\r\n          ).then( (res) => {\r\n            console.log(res);\r\n          })\r\n          .catch( (error)=> {\r\n           console.log(error);\r\n          });\r\n    \r\n       alert('가입을 환영합니다!');\r\n        \r\n    }\r\n};\r\n   \r\n    const [isModal, setModal] = useState(false);\r\n    const modal=(e)=>{\r\n        e.preventDefault();\r\n        if(isModal) setModal(false);\r\n        else setModal(true);\r\n    };\r\n    const onClickChk=(e)=>{\r\n        e.preventDefault();\r\n       if(e.target.value==='nickname'){ //닉네임 정보 받아오는 곳\r\n            if(!nickname) {\r\n                alert('입력창에 먼저 입력해주세요.');\r\n                return;\r\n            }\r\n            else{ //여기에서 axios 통신하시고, 아래 주석처리된 if문 괄호도 채워서 주석 해제해주세요\r\n                axios.get('')\r\n                .then((res)=> { //성공적으로 통신했을 때\r\n                    // if() { //이미 저장된 닉네임이 아니라면\r\n                    //     alert('사용 가능한 닉네임입니다.');\r\n                    //     setChkNickname(true);\r\n                    // } else{ //이미 저장된 닉네임이라면 \r\n                    //     alert('이미 사용중인 닉네임입니다.');\r\n                    //     setNickname('');\r\n                    // }\r\n                })\r\n                .catch((error)=> { console.log(error); }) //에러처리\r\n            }\r\n        }\r\n\r\n    };\r\n    return(\r\n    <Page >\r\n    <Logo />\r\n    <form>\r\n    <Label>이메일</Label>\r\n    <InputComponent \r\n        label=\"이메일\" \r\n        placeholder=\"카카오 로그인입니다.\"\r\n        readOnly/> \r\n    <Label>비밀번호</Label>\r\n    <InputComponent \r\n        label=\"비밀번호\" \r\n        placeholder=\"카카오 로그인입니다.\"\r\n        readOnly/>\r\n    <Label>비밀번호 확인</Label>\r\n    <InputComponent  \r\n        label=\"비밀번호 확인\" \r\n        placeholder=\"카카오 로그인입니다.\"\r\n        readOnly/>\r\n    <Label>닉네임</Label>\r\n    <InputComponent   \r\n        onChange={setNickname}\r\n        value={nickname}\r\n        name=\"nickname\" \r\n        label=\"닉네임\" />\r\n    <Btn onClick={onClickChk}  value=\"nickname\">중복확인</Btn>\r\n    <Label>주소</Label>\r\n         <InputComponent   \r\n        onChange={setShowAddress}\r\n        value={showAddress}\r\n        name=\"showAddress\" \r\n        label=\"주소\" \r\n        readOnly\r\n        />\r\n        <Btn onClick={modal}>주소찾기</Btn>\r\n    {/* <div> */}\r\n     <Modal isOpen={isModal} style={{width:'150px'}}>\r\n    <CloseBtn onClick={modal}>X</CloseBtn>\r\n        <Postcode\r\n         style={{ width: 320, height: 320 }}\r\n          jsOptions={{ animated: true, hemaileMapBtn: true }}\r\n          onSelected={data => {\r\n            setShowAddress(data.bname);\r\n            setFullAddress(data.address);\r\n            setModal(false);\r\n          }}\r\n        />\r\n      </Modal>\r\n      {/* </div> */}\r\n    <div>\r\n    <SubmitButton \r\n        onClick={onSubmitForm}>\r\n           회원가입 \r\n    </SubmitButton>\r\n    </div>\r\n    </form>\r\n    </Page>\r\n    );\r\n}\r\nexport default SignUp_kakao;","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\ReviewWrite.jsx",["336","337"],"import React, {useState, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport 'antd/dist/antd.css';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport 'moment/locale/ko';\r\nimport { Rate, Input } from 'antd';\r\nimport {ReviewButton, PostHeader} from './ShowPost';\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\n\r\nconst { TextArea } = Input;\r\nconst ReviewWrite=({postId})=> {\r\n    const [curUser,setCurUser]=useState(''); //현재 접속한 유저\r\n    const [reviewContent,setReviewContent]=useState(''); //리뷰 글 내용\r\n    const [currentValue, setCurrentValue] = useState(0); //리뷰 별점 \r\n    const history = useHistory(); //뒤로가기 버튼을 위한 history\r\n    \r\n    console.log(reviewContent);\r\n    console.log(currentValue);\r\n    useEffect(()=>{\r\n      axios.get(\"http://localhost:7000/auth\", { withCredentials: true })\r\n      .then((res)=>{\r\n          if(res.data){\r\n              setCurUser(res.data);\r\n          }\r\n      }).catch((error)=>{\r\n          console.log(error);\r\n      }\r\n\r\n      );\r\n  });\r\n    const submitBtn=(e)=>{\r\n      if(!currentValue){\r\n        alert('별점을 눌러주세요.')\r\n      }\r\n      else if(!reviewContent){\r\n        alert('평가를 남겨주세요.')\r\n      }\r\n      else {\r\n        let data = {\r\n            reviewWriter:curUser, //리뷰 쓴 작성자 \r\n            rate: currentValue, //별점 \r\n            content:reviewContent, //리뷰글 \r\n            postId:postId, //어떤 글의 리뷰 글인지 알기 위함입니다. 리뷰글의 id가 아니라, 리뷰가 달린 post의 id 입니다\r\n            date: moment().format('YYYY.MM.DD') //리뷰 글쓴 날짜\r\n          }\r\n          axios.post('url', data)\r\n              //성공\r\n              .then((res)=>{\r\n                  console.log(res);\r\n                  history.goBack();\r\n                  //  기존 post 화면으로 이동  \r\n              })\r\n             // 에러 \r\n              .catch(error=>{\r\n                  console.log(error);\r\n              });\r\n              history.goBack();\r\n        }\r\n    };\r\n    return (\r\n    <>\r\n      <PostHeader style={{border:'none', padding:'12px'}}>\r\n      <ArrowLeftOutlined style={{fontSize:'20px', marginTop:'3px'}} onClick={() => history.goBack()}/>\r\n        <h1 style={{fontWeight:'bold', fontSize:'16px', position:'absolute',left:'80px', top:'12px'}}>대여후기 작성</h1>\r\n        <ReviewButton onClick={submitBtn} style={{display:'inline-block', fontSize:'12px',height:'25px', textAlign:'center'}}type=\"primary\">완료</ReviewButton>    \r\n      </PostHeader>\r\n      <PostHeader style={{flexDirection:'column', alignItems:'center'}}>\r\n      <Rate allowHalf onChange={(value) => {\r\n        setCurrentValue(value)\r\n      }}  value={currentValue} style={{color:'#EBCAFD', fontSize:'30px'}}/> <br />\r\n     \r\n      <p style={{position:'relative',top:'-15px',color:'#7D7D7D', fontSize:'10px', fontWeight:'bolder'}}>별을 탭하여 평가해주세요</p>\r\n      </PostHeader>\r\n      <TextArea onPressEnter={submitBtn} onChange={(e) => setReviewContent(e.target.value)}value={reviewContent} placeholder=\"당신의 경험을 이웃에게 공유해주세요\" autoSize={true} bordered={false} />\r\n      </>\r\n    );\r\n  }\r\n//  Current Rating: {currentValue} \r\nexport default ReviewWrite;\r\n// #EBCAFD 연한 보라색\r\n","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\Quit.jsx",["338","339"],"import React, { useState, useEffect } from 'react'\r\nimport styled from \"styled-components\";\r\n\r\nconst Page=styled.body`\r\n    margin:0;\r\n    padding:20px;\r\n    display:flex;\r\n    flex-direction:row;\r\n    justify-content: center; \r\n    align-items:center;\r\n`;\r\n// 탈퇴\r\nconst SubmitButton1=styled.button`\r\n    margin:5px;\r\n    border:none;\r\n    width:200px;\r\n    height:40px;\r\n    color:#A352CC;\r\n    font-weight:bold;\r\n    font-size:18px;\r\n    text-align:center;\r\n`;\r\n// 취소\r\nconst SubmitButton2=styled.button`\r\n    margin:5px;\r\n    border:none;\r\n    width:200px;\r\n    height:40px;\r\n    background-color:#A352CC;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:18px;\r\n    text-align:center;\r\n`;\r\n\r\n\r\nfunction Quit(props) {\r\n    \r\n    const onClickQuit = (event) => {\r\n        event.preventDefault(); \r\n        props.history.push('/');\r\n    }\r\n    const onClickBack = (event) => {\r\n        event.preventDefault(); \r\n        props.history.push('/');\r\n    }\r\n\r\n   return (\r\n       <Page>\r\n\r\n          <SubmitButton1 onClick={onClickQuit}>탈퇴하기</SubmitButton1>\r\n          <SubmitButton2 onClick={onClickBack}>돌아가기</SubmitButton2>\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default Quit","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\useChat.js",[],"C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\Logo.jsx",[],"C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\Login_btn.jsx",[],"C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\LikeButton.jsx",["340"],"import React from 'react';\r\nimport {HeartOutlined, HeartFilled} from '@ant-design/icons';\r\nimport axios from 'axios';\r\nclass LikeButton extends React.Component{\r\n    state = {\r\n        isChecked: false,\r\n        notice: ' ',\r\n    };\r\n// {this.props.userId}\r\n// {this.props.postId}\r\n    onClick = () => {\r\n        this.state.isChecked ?\r\n        this.setState({\r\n            isChecked: false,\r\n            notice: '',\r\n        })\r\n        :\r\n        this.setState({\r\n            isChecked: true,\r\n            notice: '',\r\n        });\r\n\r\n        this.props.onSubmit(this.state.isChecked); //부모컴포넌트(ShowPost.jsx)로 상태 전달 \r\n    }\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <div className=\"icons-list\">\r\n                    {this.state.isChecked ?  \r\n                    <HeartFilled style={{marginRight: '10px', marginTop: '7px', color:'red'}} className=\"button fill\" onClick={this.onClick}/> :\r\n                    <HeartOutlined style={{marginRight: '10px', marginTop: '7px'}} className=\"button\" onClick={(this.onClick)}/>}\r\n                    {/* <h3>{this.state.notice}</h3> */}\r\n                </div>\r\n            </React.Fragment> \r\n        )\r\n    }\r\n}\r\n\r\nexport default LikeButton;\r\n","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\PostComponent2.jsx",["341"],"import React  from 'react';\r\nimport styled from \"styled-components\";\r\n// 게시글 하나 전체를 묶는 div 태그의 스타일링\r\nconst Post=styled.div`\r\n    border-bottom: solid 2px #E5E5E5;\r\n    border-radius:20px;\r\n    height:120px;\r\n    width:95%;\r\n    margin:auto;\r\n    box-sizing: border-box;\r\n    padding:15px;\r\n    margin-bottom:5px;\r\n    background:white;\r\n    position:relative;\r\n    &:hover { //게시글 위에 커서 올릴경우\r\n        background:#E5E5E5;\r\n    }\r\n`;\r\n//이미지 스타일링\r\nconst PostImg=styled.div`\r\n    float:left;\r\n    display: flex;\r\n    justify-content:space-between;\r\n    margin-right: 10px;\r\n    margin-bottom:3px;\r\n`;\r\n\r\n//게시글 제일 상단(글 제목, 작성날짜) 스타일링\r\nconst PostHeader=styled.div`\r\n    display: flex;\r\n    justify-content:space-between;\r\n    margin-bottom:3px;\r\n`;\r\n// 게시글 제일 하단 (대여기간, 대여비) 스타일링\r\nconst PostFooter=styled.div`\r\n    position:relative;\r\n    // right:10px;\r\n    top:20px;\r\n    color:#A352CC;\r\n    font-weight: bold;\r\n    font-size:18px;\r\n    display: flex;\r\n    justify-content:space-between;\r\n`;\r\n\r\n// [변수 이름]\r\n// image: 이미지 주소\r\n// title: 게시글 제목\r\n// postDate: 게시글 작성날짜/시간\r\n// writerAddress: 작성자 주소\r\n// startDate: 대여기간 시작날\r\n// endDate: 대여기간 마지막날\r\n// cost: 대여비용\r\n\r\nconst PostComponent2=({image, title, postDate, writerAddress, startDate,endDate,cost})=>{\r\n    return(\r\n        <Post>\r\n            <PostImg>\r\n              <div><img src={image} style={{width:'100px', height:'100px', 'border-radius':'10px'}}></img></div>\r\n            </PostImg>\r\n \r\n                    <PostHeader>\r\n                        <div style={{\r\n                        fontSize:'18px', fontWeight:'bold'}}>{title}</div>\r\n                        <div style={{color:'#7D7D7D',\r\n                        fontSize:'12px'}}>{postDate}</div>\r\n                        </PostHeader>\r\n                        <div style={{color:'#7D7D7D',\r\n                        fontSize:'12px', fontWeight:'bold', 'text-align': 'left'}}>{writerAddress}</div>\r\n                        <PostFooter>\r\n                            <div style={{fontSize:'16px'}}>{`${startDate} - ${endDate}`}</div>\r\n                            <div>{cost}</div>\r\n                        </PostFooter>\r\n\r\n        </Post>\r\n    )\r\n};\r\n\r\nexport default PostComponent2","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\PostComponent.jsx",[],"C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\FindAccount.jsx",["342","343","344","345","346"],"import React, {useState, useEffect} from 'react';\r\nimport styled from \"styled-components\";\r\nimport axios from 'axios';\r\nimport 'antd/dist/antd.css';\r\nimport { Tabs, Button } from 'antd';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport '../index.css';\r\nimport '../App.css';\r\nimport FindId from './FindId';\r\nimport FindPw from './FindPw';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst Head = styled.div`\r\n    background-color:#A352CC;\r\n    height:60px;\r\n    text-align:center;\r\n    color:#ffffff;\r\n    display:flex;\r\n    justify-content:center;\r\n    align-items:center;\r\n    font-weight:bold;\r\n    font-size:16px; \r\n`;\r\nconst TabBar = styled(Tabs)`\r\n\r\n\r\n.ant-tabs-ink-bar {\r\n  padding:0px;\r\n  margin:0px;\r\n}\r\n.ant-tabs-tab-btn{\r\n  width:42vw;\r\n  text-align:center;\r\n  padding:0px;\r\n  margin:0px;\r\n  \r\n}\r\n#rc-tabs-1-tab-1{\r\n  border-right:2px solid;\r\n  padding:0px;\r\n  margin:0px;\r\n}\r\n#rc-tabs-1-tab-2{\r\n  border-left:2px solid;\r\n  padding:0px;\r\n  margin:0px;\r\n}\r\n`;\r\nconst FindAccount=()=>{\r\n    const callback=(key)=> {\r\n        console.log(key);\r\n      };\r\n      \r\n    return(\r\n        <>\r\n        <Head>아이디/비밀번호 찾기</Head>\r\n    <TabBar centered defaultActiveKey=\"1\" onChange={callback}>\r\n    <TabPane tab=\"아이디 찾기\" key=\"1\">\r\n    <FindId />\r\n    </TabPane>\r\n    <TabPane tab=\"비밀번호 찾기\" key=\"2\">\r\n    <FindPw />\r\n    </TabPane>\r\n  </TabBar>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default FindAccount;","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\MyModal.jsx",["347","348","349","350","351","352","353"],"import React, {useState, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport 'antd/dist/antd.css';\r\nimport axios from 'axios';\r\nimport { Modal, Button, Space } from 'antd';\r\nimport styled from \"styled-components\";\r\n\r\nstyled(Modal)`\r\n  button{\r\n    background-color:red;\r\n  }\r\n`;\r\n const MyModal=({text})=>{\r\n \r\n    const info=()=>{\r\n        Modal.warning({\r\n          title: '알림',\r\n          content: (\r\n            <div>\r\n              <p>{text}</p>\r\n              <p>아무거나</p>\r\n            </div>\r\n          ),\r\n          onOk() {},\r\n        });\r\n\r\n        \r\n      }\r\n      \r\n      return(\r\n        <>\r\n        <Button onClick={info}>Info</Button>\r\n      </>\r\n      );\r\n };\r\n\r\nexport default MyModal","C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\MyInfoEdit.jsx",["354","355","356","357","358"],"C:\\Users\\sycho\\Desktop\\billage\\Front-End\\src\\components\\ReviewList.jsx",["359","360","361","362","363","364"],"import React, {useState, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport 'antd/dist/antd.css';\r\nimport moment from 'moment';\r\nimport 'moment/locale/ko';\r\nimport axios from 'axios';\r\nimport { List, Avatar, Button, Skeleton, Rate } from 'antd';\r\nimport {ReviewButton, PostHeader} from './ShowPost';\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\nimport profile from './images/profile.png'\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst StyledBtn=styled(Button)`\r\n&:hover, &:focus {\r\n  color:#A352CC;\r\n  background-color:#ffffff;\r\n  border:1px solid #A352CC;\r\n}\r\n`;\r\nconst ReviewList=()=> {\r\n\r\n    const count = 3;\r\n    // const fakeDataUrl = `https://randomuser.me/api/?results=${count}&inc=name,gender,email,nat,picture&noinfo`;\r\n    const [initLoading,setInitLoading]= useState(true);\r\n    const [loading,setLoading]=useState(false);\r\n    const [data,setData]=useState([]);\r\n    const [list,setList]=useState([]);\r\n\r\n    //  rate: currentValue, //별점 \r\n    //         content:reviewContent, //리뷰글 \r\n    //시작할 때 실행\r\n    useEffect(()=>{\r\n        axios.get('url 넣어주세요')\r\n          .then(res => {\r\n            setInitLoading(false);\r\n            setData(res.data);\r\n            setList(res.data);\r\n            }).catch((error)=>{\r\n                console.log(error);\r\n            })},[]);\r\n    \r\n\r\n    const onLoadMore = () => {\r\n          setLoading(true);\r\n          setList(data.concat(\r\n            [...new Array(count)].map(() => ({ loading: true})),\r\n          ));\r\n        axios.get('url 넣어주세요')\r\n          .then(res => {\r\n            const newData=data.concat(res.data);\r\n            setData(newData);\r\n            setList(newData);\r\n            setLoading(false);\r\n          }).catch(error=>{\r\n            console.log(error)\r\n          })\r\n                // Resetting window's offsetTop so:to display react-virtualized demo underfloor.\r\n                // In real scene, you can using public method of react-virtualized:\r\n                // https://stackoverflow.com/questions/46700726/how-to-use-public-method-updateposition-of-react-virtualized\r\n                window.dispatchEvent(new Event('resize'));\r\n          };\r\n      \r\n     \r\n      const loadMore =\r\n       !(initLoading &&loading) ?\r\n          (<div\r\n            style={{\r\n              textAlign: 'center',\r\n              marginTop: 12,\r\n              height: 32,\r\n              lineHeight: '32px',\r\n            }}\r\n          >\r\n            <StyledBtn onClick={onLoadMore}>빌린 후기 더보기</StyledBtn>\r\n          </div>)\r\n          :null;\r\n\r\n    return (\r\n        <List\r\n          className=\"demo-loadmore-list\"\r\n          loading={initLoading}\r\n          itemLayout=\"horizontal\"\r\n          loadMore={loadMore}\r\n          dataSource={list}\r\n          renderItem={item => (\r\n            //  현재 계정 접속자와 글쓴이 id 가 같으면 수정/삭제 버튼이 보입니다 \r\n            // 주석 풀어주세요!!!!!!!!1\r\n          //  {postInfo.user.id===curUser.id&& \r\n            <List.Item\r\n              actions={[<Link to={\"list-loadmore-edit\"}>수정</Link>, <Link to={\"list-loadmore-more\"}>삭제</Link>]}\r\n            >\r\n              {/* } */}\r\n              <Skeleton avatar title={false} loading={item.loading} active>\r\n                <List.Item.Meta\r\n                  avatar={<Avatar src={profile} />}\r\n                  title={\r\n                    <div>\r\n                    <div style={{display:'flex', justifyContent:'space-between'}}> \r\n                  <span style={{fontWeight:'bold'}}>{item.reviewWriter}</span>  {/*item.reviewWriter:리뷰 쓴 사람*/}\r\n                  <Rate style={{color:'#EBCAFD', fontSize:'16px', marginRight:'20px'}} disabled defaultValue={item.rate}  /> {/*item.rate: 별점*/}\r\n                  </div>\r\n                   <span style={{fontWeight:'normal', color:'#7D7D7D', fontSize:'12px'}}>{item.date}</span> {/*item.date: 리뷰 쓴 날짜*/}\r\n                   </div>\r\n                }\r\n                  description={\r\n                     item.content.split(\"\\n\").map((line) => {  //item.content: 리뷰 글 내용\r\n                      return (\r\n                        <div style={{color:'black', wordBreak:'break-all'}}>\r\n                          {line}\r\n                      </div>\r\n                    );\r\n                    })} \r\n\r\n                />\r\n              </Skeleton>\r\n            </List.Item>\r\n          )}\r\n          style={{marginBottom:'100px'}}\r\n        />\r\n    );\r\n }\r\n\r\n export default ReviewList;",{"ruleId":"365","replacedBy":"366"},{"ruleId":"367","replacedBy":"368"},{"ruleId":"369","severity":1,"message":"370","line":1,"column":17,"nodeType":"371","messageId":"372","endLine":1,"endColumn":26},{"ruleId":"369","severity":1,"message":"373","line":2,"column":8,"nodeType":"371","messageId":"372","endLine":2,"endColumn":14},{"ruleId":"369","severity":1,"message":"374","line":7,"column":3,"nodeType":"371","messageId":"372","endLine":7,"endColumn":7},{"ruleId":"369","severity":1,"message":"375","line":8,"column":8,"nodeType":"371","messageId":"372","endLine":8,"endColumn":16},{"ruleId":"369","severity":1,"message":"376","line":12,"column":24,"nodeType":"371","messageId":"372","endLine":12,"endColumn":30},{"ruleId":"369","severity":1,"message":"377","line":14,"column":3,"nodeType":"371","messageId":"372","endLine":14,"endColumn":21},{"ruleId":"369","severity":1,"message":"378","line":15,"column":3,"nodeType":"371","messageId":"372","endLine":15,"endColumn":19},{"ruleId":"369","severity":1,"message":"379","line":17,"column":3,"nodeType":"371","messageId":"372","endLine":17,"endColumn":22},{"ruleId":"369","severity":1,"message":"380","line":18,"column":3,"nodeType":"371","messageId":"372","endLine":18,"endColumn":17},{"ruleId":"369","severity":1,"message":"381","line":19,"column":3,"nodeType":"371","messageId":"372","endLine":19,"endColumn":18},{"ruleId":"369","severity":1,"message":"382","line":20,"column":3,"nodeType":"371","messageId":"372","endLine":20,"endColumn":18},{"ruleId":"369","severity":1,"message":"383","line":26,"column":3,"nodeType":"371","messageId":"372","endLine":26,"endColumn":23},{"ruleId":"369","severity":1,"message":"384","line":2,"column":27,"nodeType":"371","messageId":"372","endLine":2,"endColumn":36},{"ruleId":"369","severity":1,"message":"385","line":6,"column":20,"nodeType":"371","messageId":"372","endLine":6,"endColumn":22},{"ruleId":"369","severity":1,"message":"386","line":31,"column":7,"nodeType":"371","messageId":"372","endLine":31,"endColumn":15},{"ruleId":"369","severity":1,"message":"387","line":38,"column":7,"nodeType":"371","messageId":"372","endLine":38,"endColumn":11},{"ruleId":"369","severity":1,"message":"388","line":115,"column":22,"nodeType":"371","messageId":"372","endLine":115,"endColumn":33},{"ruleId":"389","severity":1,"message":"390","line":140,"column":8,"nodeType":"391","endLine":140,"endColumn":10,"suggestions":"392"},{"ruleId":"389","severity":1,"message":"393","line":148,"column":8,"nodeType":"391","endLine":148,"endColumn":16,"suggestions":"394"},{"ruleId":"369","severity":1,"message":"395","line":137,"column":19,"nodeType":"371","messageId":"372","endLine":137,"endColumn":28},{"ruleId":"369","severity":1,"message":"396","line":138,"column":21,"nodeType":"371","messageId":"372","endLine":138,"endColumn":32},{"ruleId":"369","severity":1,"message":"397","line":140,"column":12,"nodeType":"371","messageId":"372","endLine":140,"endColumn":19},{"ruleId":"369","severity":1,"message":"398","line":141,"column":17,"nodeType":"371","messageId":"372","endLine":141,"endColumn":24},{"ruleId":"399","severity":1,"message":"400","line":203,"column":11,"nodeType":"401","messageId":"402","endLine":203,"endColumn":12,"fix":"403"},{"ruleId":"369","severity":1,"message":"404","line":1,"column":16,"nodeType":"371","messageId":"372","endLine":1,"endColumn":27},{"ruleId":"369","severity":1,"message":"405","line":2,"column":16,"nodeType":"371","messageId":"372","endLine":2,"endColumn":24},{"ruleId":"369","severity":1,"message":"406","line":4,"column":14,"nodeType":"371","messageId":"372","endLine":4,"endColumn":26},{"ruleId":"369","severity":1,"message":"375","line":5,"column":8,"nodeType":"371","messageId":"372","endLine":5,"endColumn":16},{"ruleId":"369","severity":1,"message":"407","line":7,"column":18,"nodeType":"371","messageId":"372","endLine":7,"endColumn":22},{"ruleId":"369","severity":1,"message":"376","line":7,"column":24,"nodeType":"371","messageId":"372","endLine":7,"endColumn":30},{"ruleId":"369","severity":1,"message":"377","line":9,"column":3,"nodeType":"371","messageId":"372","endLine":9,"endColumn":21},{"ruleId":"369","severity":1,"message":"378","line":10,"column":3,"nodeType":"371","messageId":"372","endLine":10,"endColumn":19},{"ruleId":"369","severity":1,"message":"408","line":11,"column":3,"nodeType":"371","messageId":"372","endLine":11,"endColumn":15},{"ruleId":"369","severity":1,"message":"379","line":12,"column":3,"nodeType":"371","messageId":"372","endLine":12,"endColumn":22},{"ruleId":"369","severity":1,"message":"380","line":13,"column":3,"nodeType":"371","messageId":"372","endLine":13,"endColumn":17},{"ruleId":"369","severity":1,"message":"381","line":14,"column":3,"nodeType":"371","messageId":"372","endLine":14,"endColumn":18},{"ruleId":"369","severity":1,"message":"382","line":15,"column":3,"nodeType":"371","messageId":"372","endLine":15,"endColumn":18},{"ruleId":"369","severity":1,"message":"409","line":16,"column":3,"nodeType":"371","messageId":"372","endLine":16,"endColumn":21},{"ruleId":"369","severity":1,"message":"410","line":17,"column":3,"nodeType":"371","messageId":"372","endLine":17,"endColumn":20},{"ruleId":"369","severity":1,"message":"411","line":20,"column":9,"nodeType":"371","messageId":"372","endLine":20,"endColumn":15},{"ruleId":"369","severity":1,"message":"412","line":20,"column":17,"nodeType":"371","messageId":"372","endLine":20,"endColumn":22},{"ruleId":"369","severity":1,"message":"413","line":20,"column":24,"nodeType":"371","messageId":"372","endLine":20,"endColumn":31},{"ruleId":"369","severity":1,"message":"384","line":1,"column":26,"nodeType":"371","messageId":"372","endLine":1,"endColumn":35},{"ruleId":"369","severity":1,"message":"375","line":2,"column":8,"nodeType":"371","messageId":"372","endLine":2,"endColumn":16},{"ruleId":"369","severity":1,"message":"374","line":3,"column":10,"nodeType":"371","messageId":"372","endLine":3,"endColumn":14},{"ruleId":"369","severity":1,"message":"405","line":1,"column":16,"nodeType":"371","messageId":"372","endLine":1,"endColumn":24},{"ruleId":"369","severity":1,"message":"384","line":1,"column":26,"nodeType":"371","messageId":"372","endLine":1,"endColumn":35},{"ruleId":"369","severity":1,"message":"414","line":3,"column":8,"nodeType":"371","messageId":"372","endLine":3,"endColumn":13},{"ruleId":"369","severity":1,"message":"376","line":5,"column":16,"nodeType":"371","messageId":"372","endLine":5,"endColumn":22},{"ruleId":"369","severity":1,"message":"375","line":6,"column":8,"nodeType":"371","messageId":"372","endLine":6,"endColumn":16},{"ruleId":"365","replacedBy":"415"},{"ruleId":"367","replacedBy":"416"},{"ruleId":"369","severity":1,"message":"370","line":1,"column":17,"nodeType":"371","messageId":"372","endLine":1,"endColumn":26},{"ruleId":"369","severity":1,"message":"373","line":2,"column":8,"nodeType":"371","messageId":"372","endLine":2,"endColumn":14},{"ruleId":"369","severity":1,"message":"374","line":7,"column":3,"nodeType":"371","messageId":"372","endLine":7,"endColumn":7},{"ruleId":"369","severity":1,"message":"417","line":11,"column":8,"nodeType":"371","messageId":"372","endLine":11,"endColumn":13},{"ruleId":"369","severity":1,"message":"418","line":19,"column":8,"nodeType":"371","messageId":"372","endLine":19,"endColumn":16},{"ruleId":"369","severity":1,"message":"404","line":1,"column":16,"nodeType":"371","messageId":"372","endLine":1,"endColumn":27},{"ruleId":"369","severity":1,"message":"419","line":89,"column":21,"nodeType":"371","messageId":"372","endLine":89,"endColumn":32},{"ruleId":"369","severity":1,"message":"420","line":90,"column":24,"nodeType":"371","messageId":"372","endLine":90,"endColumn":38},{"ruleId":"369","severity":1,"message":"421","line":91,"column":18,"nodeType":"371","messageId":"372","endLine":91,"endColumn":26},{"ruleId":"369","severity":1,"message":"422","line":7,"column":10,"nodeType":"371","messageId":"372","endLine":7,"endColumn":20},{"ruleId":"389","severity":1,"message":"423","line":56,"column":8,"nodeType":"391","endLine":56,"endColumn":10,"suggestions":"424"},{"ruleId":"369","severity":1,"message":"384","line":2,"column":35,"nodeType":"371","messageId":"372","endLine":2,"endColumn":44},{"ruleId":"369","severity":1,"message":"425","line":114,"column":7,"nodeType":"371","messageId":"372","endLine":114,"endColumn":10},{"ruleId":"426","severity":1,"message":"427","line":243,"column":19,"nodeType":"371","messageId":"428","endLine":243,"endColumn":20},{"ruleId":"369","severity":1,"message":"405","line":1,"column":17,"nodeType":"371","messageId":"372","endLine":1,"endColumn":25},{"ruleId":"369","severity":1,"message":"384","line":1,"column":27,"nodeType":"371","messageId":"372","endLine":1,"endColumn":36},{"ruleId":"369","severity":1,"message":"414","line":4,"column":8,"nodeType":"371","messageId":"372","endLine":4,"endColumn":13},{"ruleId":"369","severity":1,"message":"429","line":5,"column":8,"nodeType":"371","messageId":"372","endLine":5,"endColumn":16},{"ruleId":"369","severity":1,"message":"430","line":8,"column":8,"nodeType":"371","messageId":"372","endLine":8,"endColumn":14},{"ruleId":"369","severity":1,"message":"431","line":9,"column":10,"nodeType":"371","messageId":"372","endLine":9,"endColumn":17},{"ruleId":"369","severity":1,"message":"386","line":33,"column":7,"nodeType":"371","messageId":"372","endLine":33,"endColumn":15},{"ruleId":"369","severity":1,"message":"387","line":40,"column":7,"nodeType":"371","messageId":"372","endLine":40,"endColumn":11},{"ruleId":"369","severity":1,"message":"432","line":79,"column":7,"nodeType":"371","messageId":"372","endLine":79,"endColumn":11},{"ruleId":"433","severity":1,"message":"434","line":150,"column":34,"nodeType":"435","messageId":"436","endLine":150,"endColumn":36},{"ruleId":"437","severity":1,"message":"438","line":198,"column":15,"nodeType":"439","endLine":198,"endColumn":72},{"ruleId":"369","severity":1,"message":"440","line":6,"column":10,"nodeType":"371","messageId":"372","endLine":6,"endColumn":20},{"ruleId":"369","severity":1,"message":"441","line":6,"column":22,"nodeType":"371","messageId":"372","endLine":6,"endColumn":31},{"ruleId":"369","severity":1,"message":"442","line":8,"column":10,"nodeType":"371","messageId":"372","endLine":8,"endColumn":21},{"ruleId":"369","severity":1,"message":"443","line":8,"column":23,"nodeType":"371","messageId":"372","endLine":8,"endColumn":34},{"ruleId":"369","severity":1,"message":"444","line":9,"column":9,"nodeType":"371","messageId":"372","endLine":9,"endColumn":22},{"ruleId":"369","severity":1,"message":"445","line":9,"column":24,"nodeType":"371","messageId":"372","endLine":9,"endColumn":35},{"ruleId":"369","severity":1,"message":"446","line":79,"column":7,"nodeType":"371","messageId":"372","endLine":79,"endColumn":17},{"ruleId":"369","severity":1,"message":"395","line":151,"column":19,"nodeType":"371","messageId":"372","endLine":151,"endColumn":28},{"ruleId":"369","severity":1,"message":"396","line":152,"column":21,"nodeType":"371","messageId":"372","endLine":152,"endColumn":32},{"ruleId":"369","severity":1,"message":"397","line":154,"column":12,"nodeType":"371","messageId":"372","endLine":154,"endColumn":19},{"ruleId":"369","severity":1,"message":"398","line":155,"column":17,"nodeType":"371","messageId":"372","endLine":155,"endColumn":24},{"ruleId":"369","severity":1,"message":"447","line":180,"column":11,"nodeType":"371","messageId":"372","endLine":180,"endColumn":27},{"ruleId":"369","severity":1,"message":"405","line":2,"column":16,"nodeType":"371","messageId":"372","endLine":2,"endColumn":24},{"ruleId":"369","severity":1,"message":"406","line":4,"column":14,"nodeType":"371","messageId":"372","endLine":4,"endColumn":26},{"ruleId":"369","severity":1,"message":"375","line":5,"column":8,"nodeType":"371","messageId":"372","endLine":5,"endColumn":16},{"ruleId":"369","severity":1,"message":"407","line":7,"column":18,"nodeType":"371","messageId":"372","endLine":7,"endColumn":22},{"ruleId":"369","severity":1,"message":"376","line":7,"column":24,"nodeType":"371","messageId":"372","endLine":7,"endColumn":30},{"ruleId":"369","severity":1,"message":"377","line":9,"column":3,"nodeType":"371","messageId":"372","endLine":9,"endColumn":21},{"ruleId":"369","severity":1,"message":"378","line":10,"column":3,"nodeType":"371","messageId":"372","endLine":10,"endColumn":19},{"ruleId":"369","severity":1,"message":"408","line":11,"column":3,"nodeType":"371","messageId":"372","endLine":11,"endColumn":15},{"ruleId":"369","severity":1,"message":"379","line":12,"column":3,"nodeType":"371","messageId":"372","endLine":12,"endColumn":22},{"ruleId":"369","severity":1,"message":"380","line":13,"column":3,"nodeType":"371","messageId":"372","endLine":13,"endColumn":17},{"ruleId":"369","severity":1,"message":"381","line":14,"column":3,"nodeType":"371","messageId":"372","endLine":14,"endColumn":18},{"ruleId":"369","severity":1,"message":"382","line":15,"column":3,"nodeType":"371","messageId":"372","endLine":15,"endColumn":18},{"ruleId":"369","severity":1,"message":"409","line":16,"column":3,"nodeType":"371","messageId":"372","endLine":16,"endColumn":21},{"ruleId":"369","severity":1,"message":"410","line":17,"column":3,"nodeType":"371","messageId":"372","endLine":17,"endColumn":20},{"ruleId":"369","severity":1,"message":"411","line":20,"column":9,"nodeType":"371","messageId":"372","endLine":20,"endColumn":15},{"ruleId":"369","severity":1,"message":"412","line":20,"column":17,"nodeType":"371","messageId":"372","endLine":20,"endColumn":22},{"ruleId":"369","severity":1,"message":"413","line":20,"column":24,"nodeType":"371","messageId":"372","endLine":20,"endColumn":31},{"ruleId":"369","severity":1,"message":"375","line":8,"column":8,"nodeType":"371","messageId":"372","endLine":8,"endColumn":16},{"ruleId":"369","severity":1,"message":"376","line":12,"column":24,"nodeType":"371","messageId":"372","endLine":12,"endColumn":30},{"ruleId":"369","severity":1,"message":"377","line":14,"column":3,"nodeType":"371","messageId":"372","endLine":14,"endColumn":21},{"ruleId":"369","severity":1,"message":"378","line":15,"column":3,"nodeType":"371","messageId":"372","endLine":15,"endColumn":19},{"ruleId":"369","severity":1,"message":"379","line":17,"column":3,"nodeType":"371","messageId":"372","endLine":17,"endColumn":22},{"ruleId":"369","severity":1,"message":"380","line":18,"column":3,"nodeType":"371","messageId":"372","endLine":18,"endColumn":17},{"ruleId":"369","severity":1,"message":"381","line":19,"column":3,"nodeType":"371","messageId":"372","endLine":19,"endColumn":18},{"ruleId":"369","severity":1,"message":"382","line":20,"column":3,"nodeType":"371","messageId":"372","endLine":20,"endColumn":18},{"ruleId":"369","severity":1,"message":"383","line":26,"column":3,"nodeType":"371","messageId":"372","endLine":26,"endColumn":23},{"ruleId":"369","severity":1,"message":"448","line":27,"column":3,"nodeType":"371","messageId":"372","endLine":27,"endColumn":15},{"ruleId":"449","severity":1,"message":"450","line":104,"column":13,"nodeType":"451","messageId":"452","endLine":104,"endColumn":35},{"ruleId":"369","severity":1,"message":"418","line":2,"column":8,"nodeType":"371","messageId":"372","endLine":2,"endColumn":16},{"ruleId":"369","severity":1,"message":"453","line":8,"column":10,"nodeType":"371","messageId":"372","endLine":8,"endColumn":25},{"ruleId":"369","severity":1,"message":"454","line":11,"column":7,"nodeType":"371","messageId":"372","endLine":11,"endColumn":16},{"ruleId":"369","severity":1,"message":"455","line":25,"column":7,"nodeType":"371","messageId":"372","endLine":25,"endColumn":12},{"ruleId":"369","severity":1,"message":"456","line":186,"column":11,"nodeType":"371","messageId":"372","endLine":186,"endColumn":23},{"ruleId":"369","severity":1,"message":"457","line":209,"column":11,"nodeType":"371","messageId":"372","endLine":209,"endColumn":21},{"ruleId":"449","severity":1,"message":"450","line":109,"column":13,"nodeType":"451","messageId":"452","endLine":109,"endColumn":32},{"ruleId":"449","severity":1,"message":"450","line":116,"column":13,"nodeType":"451","messageId":"452","endLine":116,"endColumn":35},{"ruleId":"369","severity":1,"message":"404","line":1,"column":16,"nodeType":"371","messageId":"372","endLine":1,"endColumn":27},{"ruleId":"369","severity":1,"message":"420","line":84,"column":24,"nodeType":"371","messageId":"372","endLine":84,"endColumn":38},{"ruleId":"369","severity":1,"message":"375","line":2,"column":8,"nodeType":"371","messageId":"372","endLine":2,"endColumn":16},{"ruleId":"369","severity":1,"message":"374","line":3,"column":10,"nodeType":"371","messageId":"372","endLine":3,"endColumn":14},{"ruleId":"369","severity":1,"message":"405","line":1,"column":17,"nodeType":"371","messageId":"372","endLine":1,"endColumn":25},{"ruleId":"369","severity":1,"message":"384","line":1,"column":27,"nodeType":"371","messageId":"372","endLine":1,"endColumn":36},{"ruleId":"369","severity":1,"message":"414","line":3,"column":8,"nodeType":"371","messageId":"372","endLine":3,"endColumn":13},{"ruleId":"437","severity":1,"message":"438","line":59,"column":20,"nodeType":"439","endLine":59,"endColumn":101},{"ruleId":"369","severity":1,"message":"405","line":1,"column":16,"nodeType":"371","messageId":"372","endLine":1,"endColumn":24},{"ruleId":"369","severity":1,"message":"384","line":1,"column":26,"nodeType":"371","messageId":"372","endLine":1,"endColumn":35},{"ruleId":"369","severity":1,"message":"414","line":3,"column":8,"nodeType":"371","messageId":"372","endLine":3,"endColumn":13},{"ruleId":"369","severity":1,"message":"376","line":5,"column":16,"nodeType":"371","messageId":"372","endLine":5,"endColumn":22},{"ruleId":"369","severity":1,"message":"375","line":6,"column":8,"nodeType":"371","messageId":"372","endLine":6,"endColumn":16},{"ruleId":"369","severity":1,"message":"405","line":1,"column":16,"nodeType":"371","messageId":"372","endLine":1,"endColumn":24},{"ruleId":"369","severity":1,"message":"384","line":1,"column":26,"nodeType":"371","messageId":"372","endLine":1,"endColumn":35},{"ruleId":"369","severity":1,"message":"375","line":2,"column":8,"nodeType":"371","messageId":"372","endLine":2,"endColumn":16},{"ruleId":"369","severity":1,"message":"374","line":3,"column":10,"nodeType":"371","messageId":"372","endLine":3,"endColumn":14},{"ruleId":"369","severity":1,"message":"440","line":3,"column":16,"nodeType":"371","messageId":"372","endLine":3,"endColumn":26},{"ruleId":"369","severity":1,"message":"414","line":5,"column":8,"nodeType":"371","messageId":"372","endLine":5,"endColumn":13},{"ruleId":"369","severity":1,"message":"458","line":6,"column":25,"nodeType":"371","messageId":"372","endLine":6,"endColumn":30},{"ruleId":"369","severity":1,"message":"404","line":1,"column":16,"nodeType":"371","messageId":"372","endLine":1,"endColumn":27},{"ruleId":"369","severity":1,"message":"459","line":2,"column":8,"nodeType":"371","messageId":"372","endLine":2,"endColumn":12},{"ruleId":"369","severity":1,"message":"460","line":95,"column":12,"nodeType":"371","messageId":"372","endLine":95,"endColumn":24},{"ruleId":"369","severity":1,"message":"420","line":102,"column":24,"nodeType":"371","messageId":"372","endLine":102,"endColumn":38},{"ruleId":"389","severity":1,"message":"461","line":127,"column":8,"nodeType":"391","endLine":127,"endColumn":10,"suggestions":"462"},{"ruleId":"369","severity":1,"message":"375","line":2,"column":8,"nodeType":"371","messageId":"372","endLine":2,"endColumn":16},{"ruleId":"369","severity":1,"message":"440","line":3,"column":16,"nodeType":"371","messageId":"372","endLine":3,"endColumn":26},{"ruleId":"369","severity":1,"message":"430","line":5,"column":8,"nodeType":"371","messageId":"372","endLine":5,"endColumn":14},{"ruleId":"369","severity":1,"message":"463","line":9,"column":9,"nodeType":"371","messageId":"372","endLine":9,"endColumn":21},{"ruleId":"369","severity":1,"message":"464","line":9,"column":23,"nodeType":"371","messageId":"372","endLine":9,"endColumn":33},{"ruleId":"369","severity":1,"message":"465","line":10,"column":10,"nodeType":"371","messageId":"372","endLine":10,"endColumn":27},"no-native-reassign",["466"],"no-negated-in-lhs",["467"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'styled' is defined but never used.","'Link' is defined but never used.","'ReactDOM' is defined but never used.","'Button' is defined but never used.","'MenuUnfoldOutlined' is defined but never used.","'MenuFoldOutlined' is defined but never used.","'VideoCameraOutlined' is defined but never used.","'UploadOutlined' is defined but never used.","'AppstoreTwoTone' is defined but never used.","'getTwoToneColor' is defined but never used.","'NotificationOutlined' is defined but never used.","'useEffect' is defined but never used.","'io' is defined but never used.","'msessage' is assigned a value but never used.","'Nick' is assigned a value but never used.","'setMessages' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createRoom'. Either include it or remove the dependency array.","ArrayExpression",["468"],"React Hook useEffect has a missing dependency: 'io'. Either include it or remove the dependency array.",["469"],"'setImgArr' is assigned a value but never used.","'setPostInfo' is assigned a value but never used.","'curUser' is assigned a value but never used.","'setTemp' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"470","text":"471"},"'useCallback' is defined but never used.","'useState' is defined but never used.","'StyledButton' is defined but never used.","'Menu' is defined but never used.","'UserOutlined' is defined but never used.","'RightCircleTwoTone' is defined but never used.","'LeftCircleTwoTone' is defined but never used.","'Header' is assigned a value but never used.","'Sider' is assigned a value but never used.","'Content' is assigned a value but never used.","'axios' is defined but never used.",["466"],["467"],"'Axios' is defined but never used.","'BoardNav' is defined but never used.","'setChkEmail' is assigned a value but never used.","'setChkNickname' is assigned a value but never used.","'setChkId' is assigned a value but never used.","'withRouter' is defined but never used.","React Hook useEffect has a missing dependency: 'cookies.rememberId'. Either include it or remove the dependency array.",["472"],"'Img' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","'socketio' is defined but never used.","'moment' is defined but never used.","'message' is defined but never used.","'Line' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useHistory' is defined but never used.","'useParams' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","'HeartOutlined' is defined but never used.","'HeartFilled' is defined but never used.","'ChatButton' is assigned a value but never used.","'numberWithCommas' is assigned a value but never used.","'TeamOutlined' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'findAllByTestId' is defined but never used.","'SearchBox' is assigned a value but never used.","'Input' is assigned a value but never used.","'searchChange' is assigned a value but never used.","'onKeyPress' is assigned a value but never used.","'Space' is defined but never used.","'Logo' is defined but never used.","'initNickname' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setEmail', 'setId', 'setInitNickname', and 'setNickname'. Either include them or remove the dependency array.",["473"],"'ReviewButton' is defined but never used.","'PostHeader' is defined but never used.","'ArrowLeftOutlined' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},[5331,5341],"\n        .",{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},"Update the dependencies array to be: [createRoom]",{"range":"482","text":"483"},"Update the dependencies array to be: [io, roomId]",{"range":"484","text":"485"},"Update the dependencies array to be: [cookies.rememberId]",{"range":"486","text":"487"},"Update the dependencies array to be: [setEmail, setId, setInitNickname, setNickname]",{"range":"488","text":"489"},[3072,3074],"[createRoom]",[3217,3225],"[io, roomId]",[1314,1316],"[cookies.rememberId]",[3526,3528],"[setEmail, setId, setInitNickname, setNickname]"]