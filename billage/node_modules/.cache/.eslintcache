[{"C:\\Users\\sycho\\Front-End\\billage\\src\\index.js":"1","C:\\Users\\sycho\\Front-End\\billage\\src\\App.js":"2","C:\\Users\\sycho\\Front-End\\billage\\src\\reportWebVitals.js":"3","C:\\Users\\sycho\\Front-End\\billage\\src\\SignUp.jsx":"4","C:\\Users\\sycho\\Front-End\\billage\\src\\SignUp_kakao.jsx":"5","C:\\Users\\sycho\\Front-End\\billage\\src\\BorrowBoard.jsx":"6","C:\\Users\\sycho\\Front-End\\billage\\src\\Logo.jsx":"7","C:\\Users\\sycho\\Front-End\\billage\\src\\BoardNav.jsx":"8","C:\\Users\\sycho\\Front-End\\billage\\src\\PostComponent.jsx":"9","C:\\Users\\sycho\\Front-End\\billage\\src\\ShowPost.jsx":"10"},{"size":223,"mtime":1629209927811,"results":"11","hashOfConfig":"12"},{"size":636,"mtime":1629308983287,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1629209927851,"results":"14","hashOfConfig":"12"},{"size":8164,"mtime":1629209927687,"results":"15","hashOfConfig":"12"},{"size":5688,"mtime":1629209927765,"results":"16","hashOfConfig":"12"},{"size":4348,"mtime":1630152812996,"results":"17","hashOfConfig":"12"},{"size":259,"mtime":1629209927594,"results":"18","hashOfConfig":"12"},{"size":1040,"mtime":1629209048176,"results":"19","hashOfConfig":"12"},{"size":1822,"mtime":1629209048165,"results":"20","hashOfConfig":"12"},{"size":6410,"mtime":1630335455996,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1sywh8z",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\sycho\\Front-End\\billage\\src\\index.js",[],["47","48"],"C:\\Users\\sycho\\Front-End\\billage\\src\\App.js",[],"C:\\Users\\sycho\\Front-End\\billage\\src\\reportWebVitals.js",[],"C:\\Users\\sycho\\Front-End\\billage\\src\\SignUp.jsx",["49","50","51"],"//http://localhost:3000/signUp 에서 실행됩니다. port 번호는 바뀌어도 상관없고, 그 뒤에 /signUp만 붙여주세요\nimport React, {useCallback, useState} from 'react';\nimport Logo from './Logo';\nimport axios from 'axios';\nimport Postcode from '@actbase/react-daum-postcode';\nimport Modal from 'react-modal';\nimport styled from \"styled-components\";\n\nconst Page=styled.body`\n    margin:0;\n    padding:20px;\n    display:flex;\n    flex-direction:column;\n    align-items:center;\n`;\nconst InputComponent=styled.input`\n    border:none;\n    outline:none;\n    border-bottom: 1px solid #E5E5E5;\n    ::placeholder{\n        color:#E5E5E5;\n    }\n    width:250px;\n    height:40px;\n`;\nconst Label=styled.h2`  \nfont-size:14px;\ncolor:#7D7D7D;\nfont-weight:600;\n`;\n\nconst SubmitButton=styled.button`\n    margin-top:30px;\n    border:none;\n    width:350px;\n    height:50px;\n    background-color:#A352CC;\n    border-radius:5px;\n    color:white;\n    font-weight:bold;\n    font-size:18px;\n    text-align:center;\n`;\nconst Btn=styled.button`\n    border: 1px solid #EBCAFD;\n    background-color:white;\n    color:#EBCAFD;\n    width:80px;\n    height:30px;\n    border-radius:5px;\n    margin-left:12px;\n`;\nconst CloseBtn=styled.button`\n    position:absolute;\n    right:20px;\n    margin:5px 10px 0px 0px;\n    padding:8px;\n    background-color:white;\n    border: none;\n    color:#F79F81;\n    border-radius:5px;\n`;\nconst SignUp=()=>{\n    const useInput = (initValue = null) =>{\n        const [value,setter] = useState(initValue);\n       \n        const handler = (e) => {\n            if(e) setter(e.target.value);\n            else setter(initValue);\n        };\n        return [value,handler];\n    };\n   \n\n    const [email,setEmail] = useInput('');\n    const [pw,setPw] = useInput('');\n    const [nickname,setNickname] = useInput('');\n    const [showAddress,setShowAddress] =  useState('');\n    const [fullAddress,setFullAddress]=useState('');\n    //주소의 경우, 사용자에게 보여주는 것은 showAddress로 '##동'으로만 나오고, full 주소는 fullAddress에 저장됩니다.\n    const [pwChk,setPwChk]=useState('');\n    const [pwError,setPwError]=useState(false);\n    const [chkEmail,setChkEmail]=useState(false);\n    const [chkNickname,setChkNickname]=useState(false);\n    // const pwChkRef=useRef();\n    // const pwRef=useRef();\n    \n    const onSubmitForm=(e)=>{\n        e.preventDefault();\n        if(!(email&&pw&&pwChk&&nickname&&fullAddress)){\n            alert(`모든 문항을 입력해주세요`);\n            return;\n        }\n        else{\n        //  입력하지 않은 문항 알려주는 것 추가 예정\n        if(!/^[A-Za-z0-9]{6,12}$/.test(pw)){\n            alert('영문, 숫자 포함 6-12자리의 비밀번호를 입력해주세요.');\n            return;\n        }\n        if(!chkEmail){\n            alert('이메일 중복확인을 완료해주세요.');\n            return;\n        }\n        if(!chkNickname){\n            alert('닉네임 중복확인을 완료해주세요.');\n            return;\n        }\n        axios.post('url을 입력해주세요', {\n                email: email,\n                password: pw,\n                nickname:nickname,\n                address:fullAddress\n            }\n          ).then( (res) => {\n            console.log(res);\n          })\n          .catch( (error)=> {\n           console.log(error);\n          });\n    \n       alert('가입을 환영합니다!');\n        \n    }\n};\n    const onChangeChkPw=(e)=>{\n        if(!pw) {\n            alert('비밀번호를 먼저 입력해주세요.');\n            setPwChk('');\n        }\n        else{\n        setPwError(e.target.value!==pw);\n        setPwChk(e.target.value);\n        }\n    };\n    const [isModal, setModal] = useState(false);\n    const modal=(e)=>{\n        e.preventDefault();\n        if(isModal) setModal(false);\n        else setModal(true);\n    };\n    const onClickChk=(e)=>{\n        e.preventDefault();\n        if(e.target.value==='email'){ //이메일 정보 받아오는 곳\n            if(!email) {\n                alert('입력창에 먼저 입력해주세요.');\n                return;\n            }else if(!/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i.test(email)){\n                //이메일 형식에 맞는 값이 들어왔는지 확인합니다.\n                alert('올바르지 않은 이메일입니다. 다시 입력해주세요.');\n                setEmail('');\n                return;\n            }else{ //여기에서 axios 통신하시고, 아래 주석처리된 if문 괄호도 채워서 주석 해제해주세요\n                axios.get('')\n                .then((res)=> { //성공적으로 통신했을 때\n                    // if() { //이미 저장된 이메일이 아니라면\n                    //     alert('사용 가능한 이메일입니다.');\n                    //     setChkEmail(true);\n                    // } else{ //이미 저장된 이메일이라면 \n                    //     alert('이미 저장된 이메일입니다.');\n                    //     setEmail('');\n                    // }\n                })\n                .catch((error)=> { console.log(error); }) //에러처리\n            }\n        }\n    \n        else if(e.target.value==='nickname'){ //닉네임 정보 받아오는 곳\n            if(!nickname) {\n                alert('입력창에 먼저 입력해주세요.');\n                return;\n            }\n            else{ //여기에서 axios 통신하시고, 아래 주석처리된 if문 괄호도 채워서 주석 해제해주세요\n                axios.get('')\n                .then((res)=> { //성공적으로 통신했을 때\n                    // if() { //이미 저장된 닉네임이 아니라면\n                    //     alert('사용 가능한 닉네임입니다.');\n                    //     setChkNickname(true);\n                    // } else{ //이미 저장된 닉네임이라면 \n                    //     alert('이미 저장된 닉네임입니다.');\n                    //     setNickname('');\n                    // }\n                })\n                .catch((error)=> { console.log(error); }) //에러처리\n            }\n        }\n\n    };\n    return(\n    <Page >\n    <Logo />\n    <form>\n    <Label>이메일</Label>\n    <InputComponent \n        value={email} \n        onChange={setEmail}\n        name=\"email\"\n        label=\"이메일\" \n        placeholder=\"사용자 이메일\"\n         /> \n    <Btn onClick={onClickChk} value=\"email\">중복확인</Btn>\n    <Label>비밀번호</Label>\n    <InputComponent \n        value={pw}\n        onChange={setPw}\n        name=\"password\"\n        label=\"비밀번호\" \n        placeholder=\"영문, 숫자 포함 6-12자리\"\n        type=\"password\"/>\n    <Label>비밀번호 확인</Label>\n    <InputComponent  \n        value={pwChk}\n        onChange={onChangeChkPw}\n        name=\"passwordChk\" \n        label=\"비12밀번호 확인\" \n        type=\"password\"/>\n    {pwError&&<div style={{color : '#F79F81', fontSize: '10px'}}>비밀번호가 일치하지 않습니다.</div>}\n    <Label>닉네임</Label>\n    <InputComponent   \n        onChange={setNickname}\n        value={nickname}\n        name=\"nickname\" \n        label=\"닉네임\" />\n    <Btn onClick={onClickChk}  value=\"nickname\">중복확인</Btn>\n    <Label>주소</Label>\n         <InputComponent   \n        onChange={setShowAddress}\n        value={showAddress}\n        name=\"showAddress\" \n        label=\"주소\" \n        readOnly\n        />\n        <Btn onClick={modal}>주소찾기</Btn>\n    {/* <div> */}\n     <Modal isOpen={isModal} style={{width:'150px'}}>\n    <CloseBtn onClick={modal}>X</CloseBtn>\n        <Postcode\n         style={{ width: 320, height: 320 }}\n          jsOptions={{ animated: true, hemaileMapBtn: true }}\n          onSelected={data => {\n            setShowAddress(data.bname);\n            setFullAddress(data.address);\n            setModal(false);\n          }}\n        />\n      </Modal>\n      {/* </div> */}\n    <div>\n    <SubmitButton \n        onClick={onSubmitForm}>\n           회원가입 \n    </SubmitButton>\n    </div>\n    </form>\n    </Page>\n    );\n}\nexport default SignUp;\n","C:\\Users\\sycho\\Front-End\\billage\\src\\SignUp_kakao.jsx",["52","53"],"//http://localhost:3000/signUp 에서 실행됩니다. port 번호는 바뀌어도 상관없고, 그 뒤에 /signUp만 붙여주세요\nimport React, {useCallback, useState} from 'react';\nimport Logo from './Logo';\nimport axios from 'axios';\nimport Postcode from '@actbase/react-daum-postcode';\nimport Modal from 'react-modal';\nimport styled from \"styled-components\";\n\nconst Page=styled.body`\n    margin:0;\n    padding:20px;\n    display:flex;\n    flex-direction:column;\n    align-items:center;\n`;\nconst InputComponent=styled.input`\n    border:none;\n    outline:none;\n    border-bottom: 1px solid #E5E5E5;\n    ::placeholder{\n        color:#E5E5E5;\n    }\n    width:250px;\n    height:40px;\n`;\nconst Label=styled.h2`  \nfont-size:14px;\ncolor:#7D7D7D;\nfont-weight:600;\n`;\n\nconst SubmitButton=styled.button`\n    margin-top:30px;\n    border:none;\n    width:350px;\n    height:50px;\n    background-color:#A352CC;\n    border-radius:5px;\n    color:white;\n    font-weight:bold;\n    font-size:18px;\n    text-align:center;\n`;\nconst Btn=styled.button`\n    border: 1px solid #EBCAFD;\n    background-color:white;\n    color:#EBCAFD;\n    width:80px;\n    height:30px;\n    border-radius:5px;\n    margin-left:12px;\n`;\nconst CloseBtn=styled.button`\n    position:absolute;\n    right:20px;\n    margin:5px 10px 0px 0px;\n    padding:8px;\n    background-color:white;\n    border: none;\n    color:#F79F81;\n    border-radius:5px;\n`;\nconst SignUp_kakao=()=>{\n    const useInput = (initValue = null) =>{\n        const [value,setter] = useState(initValue);\n       \n        const handler = (e) => {\n            if(e) setter(e.target.value);\n            else setter(initValue);\n        };\n        return [value,handler];\n    };\n   \n\n  \n    const [nickname,setNickname] = useInput('');\n    const [showAddress,setShowAddress] =  useState('');\n    const [fullAddress,setFullAddress]=useState('');\n    //주소의 경우, 사용자에게 보여주는 것은 showAddress로 '##동'으로만 나오고, full 주소는 fullAddress에 저장됩니다.\n    const [chkNickname,setChkNickname]=useState(false);\n    // const pwChkRef=useRef();\n    // const pwRef=useRef();\n    \n    const onSubmitForm=(e)=>{\n        e.preventDefault();\n        if(!(nickname&&fullAddress)){\n            alert(`모든 문항을 입력해주세요`);\n            return;\n        }\n        else{\n        //  입력하지 않은 문항 알려주는 것 추가 예정\n        if(!chkNickname){\n            alert('닉네임 중복확인을 완료해주세요.');\n            return;\n        }\n        axios.post('url을 입력해주세요', {\n                nickname:nickname,\n                address:fullAddress\n            }\n          ).then( (res) => {\n            console.log(res);\n          })\n          .catch( (error)=> {\n           console.log(error);\n          });\n    \n       alert('가입을 환영합니다!');\n        \n    }\n};\n   \n    const [isModal, setModal] = useState(false);\n    const modal=(e)=>{\n        e.preventDefault();\n        if(isModal) setModal(false);\n        else setModal(true);\n    };\n    const onClickChk=(e)=>{\n        e.preventDefault();\n       if(e.target.value==='nickname'){ //닉네임 정보 받아오는 곳\n            if(!nickname) {\n                alert('입력창에 먼저 입력해주세요.');\n                return;\n            }\n            else{ //여기에서 axios 통신하시고, 아래 주석처리된 if문 괄호도 채워서 주석 해제해주세요\n                axios.get('')\n                .then((res)=> { //성공적으로 통신했을 때\n                    // if() { //이미 저장된 닉네임이 아니라면\n                    //     alert('사용 가능한 닉네임입니다.');\n                    //     setChkNickname(true);\n                    // } else{ //이미 저장된 닉네임이라면 \n                    //     alert('이미 저장된 닉네임입니다.');\n                    //     setNickname('');\n                    // }\n                })\n                .catch((error)=> { console.log(error); }) //에러처리\n            }\n        }\n\n    };\n    return(\n    <Page >\n    <Logo />\n    <form>\n    <Label>이메일</Label>\n    <InputComponent \n        label=\"이메일\" \n        placeholder=\"카카오 로그인입니다.\"\n        readOnly/> \n    <Label>비밀번호</Label>\n    <InputComponent \n        label=\"비밀번호\" \n        placeholder=\"카카오 로그인입니다.\"\n        readOnly/>\n    <Label>비밀번호 확인</Label>\n    <InputComponent  \n        label=\"비밀번호 확인\" \n        placeholder=\"카카오 로그인입니다.\"\n        readOnly/>\n    <Label>닉네임</Label>\n    <InputComponent   \n        onChange={setNickname}\n        value={nickname}\n        name=\"nickname\" \n        label=\"닉네임\" />\n    <Btn onClick={onClickChk}  value=\"nickname\">중복확인</Btn>\n    <Label>주소</Label>\n         <InputComponent   \n        onChange={setShowAddress}\n        value={showAddress}\n        name=\"showAddress\" \n        label=\"주소\" \n        readOnly\n        />\n        <Btn onClick={modal}>주소찾기</Btn>\n    {/* <div> */}\n     <Modal isOpen={isModal} style={{width:'150px'}}>\n    <CloseBtn onClick={modal}>X</CloseBtn>\n        <Postcode\n         style={{ width: 320, height: 320 }}\n          jsOptions={{ animated: true, hemaileMapBtn: true }}\n          onSelected={data => {\n            setShowAddress(data.bname);\n            setFullAddress(data.address);\n            setModal(false);\n          }}\n        />\n      </Modal>\n      {/* </div> */}\n    <div>\n    <SubmitButton \n        onClick={onSubmitForm}>\n           회원가입 \n    </SubmitButton>\n    </div>\n    </form>\n    </Page>\n    );\n}\nexport default SignUp_kakao;\n","C:\\Users\\sycho\\Front-End\\billage\\src\\BorrowBoard.jsx",["54","55"],"//빌려주세요 게시판 전체를 나타내는 파일입니다.\r\nimport React, {useState, useEffect} from 'react';\r\nimport BoardNav from './BoardNav';\r\nimport styled from \"styled-components\";\r\nimport axios from 'axios';\r\nimport PostComponent from './PostComponent';\r\n//검색박스 전체 (회색 둥글둥글 모양) 스타일링입니다.\r\nconst SearchBox=styled.div`\r\n    position:relative;\r\n    background-color:#E5E5E5;\r\n    border-radius:20px;\r\n    margin:15px;\r\n    padding:5px 5px 5px 20px;\r\n    height:30px;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:flex-end;\r\n    `;\r\n//위의 검색박스 내의 input 창 스타일링입니다.\r\nconst Input=styled.input`\r\n    width:95%;\r\n    outline:none;\r\n    border:none;\r\n    border-radius:20px;\r\n    height:25px;\r\n    background:none;\r\n`;\r\n\r\n//이미지 태그 (각 버튼들에 들어가는 아이콘) 대신 쓰는 component입니다.\r\nexport const Img=styled.img`\r\nmax-width: 100%;\r\nheight:auto;\r\n`;\r\n//각 버튼들 (글 등록, )\r\nconst StyledButton=styled.button`\r\n    border:none;\r\n    margin:2px;\r\n    background:none;\r\n    height:30px;\r\n    width:30px;\r\n    padding-top:5px;\r\n    background:none;\r\n`;\r\n//게시글 리스트 component 입니다.\r\nconst List=styled.div`\r\nfont-family:'KoddiUDOnGothic-Regular';\r\n`;\r\n\r\nconst BorrowBoard=()=>{\r\n    const [showAddress, setShowAddress]=useState('용현동'); //현재 사용자의 주소\r\n    const [searchText,setSearchText]=useState(''); //검색 input 창에 입력되는 text\r\n    const [dataList,setDataList]=useState([]); //백엔드에서 가져온 데이터 담는 배열\r\n    \r\n    const loadItem = async () => {\r\n    axios.get(\"./SearchJson.json\")\r\n    .then(({ data }) => {\r\n        setDataList(data);\r\n    })\r\n      .catch(e => {  // API 호출이 실패한 경우\r\n        console.error(e);  // 에러표시\r\n    });\r\n};\r\n    // 페이지가 로드될 때 \r\n    useEffect(() =>{ \r\n        loadItem(); \r\n    }, []);\r\n\r\n    const searchChange=(e)=>{//검색창에 text 입력했을 때 입력한 text를 검색 text에 넣어줌\r\n        setSearchText(e.target.value);\r\n};\r\n    const btnClick=()=>{ //검색창 버튼 클릭했을 때 뜨는 버튼\r\n        alert('검색했습니다');\r\n    };\r\n    \r\n    return(\r\n    <>\r\n   <BoardNav showAddress={showAddress} boardName=\"빌려주세요\" />\r\n    <SearchBox>\r\n    <Input value={searchText} onChange={searchChange}/>\r\n    {searchText&&<StyledButton onClick={btnClick}  color=\"#E5E5E5\"><Img src=\"img/search.png\" alt=\"검색\"/></StyledButton>}\r\n    {/* 검색창에 입력된 text 내용이 있을 경우 검색 버튼이 활성화됩니다. */}\r\n    </SearchBox>\r\n    <List>\r\n    {/* dataList에서 받아온 data 들을 하나씩 게시글 컴포넌트로 감쌉니다.\r\n    필요한 데이터들은 props로 넘겨줍니다. */}\r\n    {/* {dataList.map((data) => (\r\n        // PostComponent 내의 변수 설명은 PostComponent.jsx 파일 내부에\r\n                       return( <PostComponent\r\n                        title={data.title}\r\n                        postDate={data.postDate} \r\n                        writerAddress={data.writerAddress} \r\n                        startDate={data.startDate}\r\n                        endDate={data.endDate}\r\n                        cost={data.cost}\r\n                        key={data.id}\r\n                        />/);\r\n                    )\r\n                )}; */}\r\n                {/* 아래는 게시글 출력 확인차 적어놓은 더미 post component 입니다. */}\r\n                        <PostComponent\r\n                        title=\"돗자리 빌려주세요.\"\r\n                        postDate=\"08/19\" \r\n                        writerAddress=\"미추홀구 용현동\" \r\n                        startDate=\"08/20\"\r\n                        endDate=\"08/31\"\r\n                        cost=\"20,000\"\r\n                        />\r\n                        <PostComponent\r\n                        title=\"오렌지 나눠가지실 분.\"\r\n                        postDate=\"08/19\" \r\n                        writerAddress=\"미추홀구 용현동\" \r\n                        startDate=\"08/19\"\r\n                        endDate=\"08/19\"\r\n                        cost=\"5,000\"\r\n                        />                       \r\n    </List>\r\n    </>\r\n    );\r\n};\r\n\r\nexport default BorrowBoard;\r\nexport {StyledButton};\r\n","C:\\Users\\sycho\\Front-End\\billage\\src\\Logo.jsx",[],"C:\\Users\\sycho\\Front-End\\billage\\src\\BoardNav.jsx",["56"],"//제일 위에 보라색 nav bar 부분입니다.\r\nimport React, {useState} from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Img, StyledButton} from \"./BorrowBoard\";\r\n\r\n\r\n// nav 바를 감싸는 ul 태그 styled component 입니다.\r\nconst StyledNav=styled.ul` \r\nheight:70px;\r\ndisplay:flex;\r\nalign-items:center;\r\njustify-content:space-between;\r\nlist-style:none;\r\nmargin:0;\r\npadding:0 20px 0 20px;\r\ncolor: white;\r\nbackground:#A352CC;\r\nfont-size:20px;\r\nfont-weight:bold;\r\n`;\r\n;\r\nconst BoardNav=({showAddress, boardName})=>{\r\n    return(\r\n        <StyledNav>\r\n        <li style={{fontWeight:'normal'}}>{showAddress}</li>\r\n        <li>{boardName}</li>\r\n        <li>\r\n        <StyledButton onClick={()=>{alert('글 등록 버튼입니다.')}}><Img src=\"img/plus_w.png\" alt=\"글 등록\"/></StyledButton>\r\n        <StyledButton onClick={()=>{alert('마이페이지 버튼입니다.')}}><Img src=\"img/mypage_w.png\" alt=\"마이페이지\"/></StyledButton>\r\n        </li>\r\n        </StyledNav>\r\n    );\r\n};\r\n\r\nexport default BoardNav;\r\n","C:\\Users\\sycho\\Front-End\\billage\\src\\PostComponent.jsx",[],"C:\\Users\\sycho\\Front-End\\billage\\src\\ShowPost.jsx",["57","58","59","60"],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":2,"column":16,"nodeType":"67","messageId":"68","endLine":2,"endColumn":27},{"ruleId":"65","severity":1,"message":"69","line":83,"column":21,"nodeType":"67","messageId":"68","endLine":83,"endColumn":32},{"ruleId":"65","severity":1,"message":"70","line":84,"column":24,"nodeType":"67","messageId":"68","endLine":84,"endColumn":38},{"ruleId":"65","severity":1,"message":"66","line":2,"column":16,"nodeType":"67","messageId":"68","endLine":2,"endColumn":27},{"ruleId":"65","severity":1,"message":"70","line":80,"column":24,"nodeType":"67","messageId":"68","endLine":80,"endColumn":38},{"ruleId":"65","severity":1,"message":"71","line":50,"column":25,"nodeType":"67","messageId":"68","endLine":50,"endColumn":39},{"ruleId":"65","severity":1,"message":"72","line":52,"column":12,"nodeType":"67","messageId":"68","endLine":52,"endColumn":20},{"ruleId":"65","severity":1,"message":"73","line":2,"column":16,"nodeType":"67","messageId":"68","endLine":2,"endColumn":24},{"ruleId":"65","severity":1,"message":"74","line":1,"column":26,"nodeType":"67","messageId":"68","endLine":1,"endColumn":35},{"ruleId":"65","severity":1,"message":"75","line":3,"column":8,"nodeType":"67","messageId":"68","endLine":3,"endColumn":13},{"ruleId":"65","severity":1,"message":"76","line":107,"column":19,"nodeType":"67","messageId":"68","endLine":107,"endColumn":28},{"ruleId":"65","severity":1,"message":"77","line":108,"column":21,"nodeType":"67","messageId":"68","endLine":108,"endColumn":32},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'setChkEmail' is assigned a value but never used.","'setChkNickname' is assigned a value but never used.","'setShowAddress' is assigned a value but never used.","'dataList' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'setImgArr' is assigned a value but never used.","'setPostInfo' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]